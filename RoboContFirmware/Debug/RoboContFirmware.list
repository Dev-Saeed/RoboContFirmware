
RoboContFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a54  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006bdc  08006bdc  00007bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c14  08006c14  0000800c  2**0
                  CONTENTS
  4 .ARM          00000000  08006c14  08006c14  0000800c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c14  08006c14  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c14  08006c14  00007c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c18  08006c18  00007c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006c1c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000082c  2000000c  08006c28  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000838  08006c28  00008838  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dabf  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004706  00000000  00000000  00025afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a0  00000000  00000000  0002a208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000131a  00000000  00000000  0002baa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000210bb  00000000  00000000  0002cdc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022404  00000000  00000000  0004de7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b83ea  00000000  00000000  00070281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012866b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066b8  00000000  00000000  001286b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0012ed68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006bc4 	.word	0x08006bc4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006bc4 	.word	0x08006bc4

080001c8 <_Z4testv>:
extern I2C_HandleTypeDef hi2c1; // Assuming hi2c1 is configured in CubeMX
extern TIM_HandleTypeDef htim5; // Assuming htim5 is configured in CubeMX

// Test function
void test()
{
 80001c8:	b590      	push	{r4, r7, lr}
 80001ca:	b09d      	sub	sp, #116	@ 0x74
 80001cc:	af04      	add	r7, sp, #16
    ICM20948 imu(&hi2c1, 0xD0); // Default I2C address shifted left by 1 (0x68 << 1)
 80001ce:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80001d2:	22d0      	movs	r2, #208	@ 0xd0
 80001d4:	4948      	ldr	r1, [pc, #288]	@ (80002f8 <_Z4testv+0x130>)
 80001d6:	4618      	mov	r0, r3
 80001d8:	f000 f89a 	bl	8000310 <_ZN8ICM20948C1EP19__I2C_HandleTypeDefh>
    Motor testMotor(&htim5, TIM_CHANNEL_1, &htim5, TIM_CHANNEL_2, 0.1f, 1.0f, 1000.0f);
 80001dc:	f107 001c 	add.w	r0, r7, #28
 80001e0:	2304      	movs	r3, #4
 80001e2:	9300      	str	r3, [sp, #0]
 80001e4:	ed9f 1a45 	vldr	s2, [pc, #276]	@ 80002fc <_Z4testv+0x134>
 80001e8:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80001ec:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 8000300 <_Z4testv+0x138>
 80001f0:	4b44      	ldr	r3, [pc, #272]	@ (8000304 <_Z4testv+0x13c>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	4943      	ldr	r1, [pc, #268]	@ (8000304 <_Z4testv+0x13c>)
 80001f6:	f000 f98f 	bl	8000518 <_ZN5MotorC1EP17TIM_HandleTypeDefmS1_mfff>

    bool imu_ready = imu.initialize();
 80001fa:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80001fe:	4618      	mov	r0, r3
 8000200:	f000 f89a 	bl	8000338 <_ZN8ICM2094810initializeEv>
 8000204:	4603      	mov	r3, r0
 8000206:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

    if (!imu_ready) {
 800020a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800020e:	f083 0301 	eor.w	r3, r3, #1
 8000212:	b2db      	uxtb	r3, r3
 8000214:	2b00      	cmp	r3, #0
 8000216:	d029      	beq.n	800026c <_Z4testv+0xa4>
        // Blink LED slowly to indicate failure (alternating PWM)
        while (1) {
            testMotor.setTargetSpeed(0.5f);
 8000218:	f107 031c 	add.w	r3, r7, #28
 800021c:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f9c8 	bl	80005b6 <_ZN5Motor14setTargetSpeedEf>
            testMotor.updatePWM(0.0f, 0.01f);
 8000226:	f107 031c 	add.w	r3, r7, #28
 800022a:	eddf 0a37 	vldr	s1, [pc, #220]	@ 8000308 <_Z4testv+0x140>
 800022e:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 800030c <_Z4testv+0x144>
 8000232:	4618      	mov	r0, r3
 8000234:	f000 f9ee 	bl	8000614 <_ZN5Motor9updatePWMEff>
            HAL_Delay(500);
 8000238:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800023c:	f001 ffe4 	bl	8002208 <HAL_Delay>
            testMotor.setTargetSpeed(0.0f);
 8000240:	f107 031c 	add.w	r3, r7, #28
 8000244:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 800030c <_Z4testv+0x144>
 8000248:	4618      	mov	r0, r3
 800024a:	f000 f9b4 	bl	80005b6 <_ZN5Motor14setTargetSpeedEf>
            testMotor.updatePWM(0.0f, 0.01f);
 800024e:	f107 031c 	add.w	r3, r7, #28
 8000252:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8000308 <_Z4testv+0x140>
 8000256:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 800030c <_Z4testv+0x144>
 800025a:	4618      	mov	r0, r3
 800025c:	f000 f9da 	bl	8000614 <_ZN5Motor9updatePWMEff>
            HAL_Delay(500);
 8000260:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000264:	f001 ffd0 	bl	8002208 <HAL_Delay>
            testMotor.setTargetSpeed(0.5f);
 8000268:	bf00      	nop
 800026a:	e7d5      	b.n	8000218 <_Z4testv+0x50>
    }

    while (1)
    {
        float ax, ay, az, gx, gy, gz;
        bool ok = imu.readAccelGyro(ax, ay, az, gx, gy, gz);
 800026c:	f107 0410 	add.w	r4, r7, #16
 8000270:	f107 0214 	add.w	r2, r7, #20
 8000274:	f107 0118 	add.w	r1, r7, #24
 8000278:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	9302      	str	r3, [sp, #8]
 8000280:	f107 0308 	add.w	r3, r7, #8
 8000284:	9301      	str	r3, [sp, #4]
 8000286:	f107 030c 	add.w	r3, r7, #12
 800028a:	9300      	str	r3, [sp, #0]
 800028c:	4623      	mov	r3, r4
 800028e:	f000 f867 	bl	8000360 <_ZN8ICM2094813readAccelGyroERfS0_S0_S0_S0_S0_>
 8000292:	4603      	mov	r3, r0
 8000294:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a

        if (ok) {
 8000298:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800029c:	2b00      	cmp	r3, #0
 800029e:	d027      	beq.n	80002f0 <_Z4testv+0x128>
            // Light up LED (connected to motor channel) based on ax
            float intensity = ax;
 80002a0:	69bb      	ldr	r3, [r7, #24]
 80002a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
            if (intensity < 0.0f) intensity = 0.0f;
 80002a4:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80002a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80002ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002b0:	d502      	bpl.n	80002b8 <_Z4testv+0xf0>
 80002b2:	f04f 0300 	mov.w	r3, #0
 80002b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
            if (intensity > 1.0f) intensity = 1.0f;
 80002b8:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80002bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80002c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80002c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002c8:	dd02      	ble.n	80002d0 <_Z4testv+0x108>
 80002ca:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80002ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
            testMotor.setTargetSpeed(intensity); // Simulate LED brightness
 80002d0:	f107 031c 	add.w	r3, r7, #28
 80002d4:	ed97 0a17 	vldr	s0, [r7, #92]	@ 0x5c
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 f96c 	bl	80005b6 <_ZN5Motor14setTargetSpeedEf>
            testMotor.updatePWM(0.0f, 0.01f);
 80002de:	f107 031c 	add.w	r3, r7, #28
 80002e2:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8000308 <_Z4testv+0x140>
 80002e6:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800030c <_Z4testv+0x144>
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 f992 	bl	8000614 <_ZN5Motor9updatePWMEff>
        }

        HAL_Delay(100);
 80002f0:	2064      	movs	r0, #100	@ 0x64
 80002f2:	f001 ff89 	bl	8002208 <HAL_Delay>
    }
 80002f6:	e7b9      	b.n	800026c <_Z4testv+0xa4>
 80002f8:	200000a8 	.word	0x200000a8
 80002fc:	447a0000 	.word	0x447a0000
 8000300:	3dcccccd 	.word	0x3dcccccd
 8000304:	2000024c 	.word	0x2000024c
 8000308:	3c23d70a 	.word	0x3c23d70a
 800030c:	00000000 	.word	0x00000000

08000310 <_ZN8ICM20948C1EP19__I2C_HandleTypeDefh>:
#define REG_WHO_AM_I        0x00
#define WHO_AM_I_EXPECTED   0xEA
#define REG_ACCEL_XOUT_H    0x2D
#define REG_GYRO_XOUT_H     0x33

ICM20948::ICM20948(I2C_HandleTypeDef* i2cHandle, uint8_t deviceAddress) {
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	4613      	mov	r3, r2
 800031c:	71fb      	strb	r3, [r7, #7]
    hi2c = i2cHandle;
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	68ba      	ldr	r2, [r7, #8]
 8000322:	601a      	str	r2, [r3, #0]
    address = deviceAddress;
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	79fa      	ldrb	r2, [r7, #7]
 8000328:	711a      	strb	r2, [r3, #4]
}
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	4618      	mov	r0, r3
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <_ZN8ICM2094810initializeEv>:

bool ICM20948::initialize() {
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
    uint8_t whoami = readRegister(REG_WHO_AM_I);
 8000340:	2100      	movs	r1, #0
 8000342:	6878      	ldr	r0, [r7, #4]
 8000344:	f000 f8c9 	bl	80004da <_ZN8ICM2094812readRegisterEh>
 8000348:	4603      	mov	r3, r0
 800034a:	73fb      	strb	r3, [r7, #15]
    return (whoami == WHO_AM_I_EXPECTED);
 800034c:	7bfb      	ldrb	r3, [r7, #15]
 800034e:	2bea      	cmp	r3, #234	@ 0xea
 8000350:	bf0c      	ite	eq
 8000352:	2301      	moveq	r3, #1
 8000354:	2300      	movne	r3, #0
 8000356:	b2db      	uxtb	r3, r3
}
 8000358:	4618      	mov	r0, r3
 800035a:	3710      	adds	r7, #16
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <_ZN8ICM2094813readAccelGyroERfS0_S0_S0_S0_S0_>:

bool ICM20948::readAccelGyro(float& ax, float& ay, float& az, float& gx, float& gy, float& gz) {
 8000360:	b580      	push	{r7, lr}
 8000362:	b08a      	sub	sp, #40	@ 0x28
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
 800036c:	603b      	str	r3, [r7, #0]
    uint8_t raw[12];
    if (!readRegisters(REG_ACCEL_XOUT_H, raw, 12)) return false;
 800036e:	f107 0210 	add.w	r2, r7, #16
 8000372:	230c      	movs	r3, #12
 8000374:	212d      	movs	r1, #45	@ 0x2d
 8000376:	68f8      	ldr	r0, [r7, #12]
 8000378:	f000 f88a 	bl	8000490 <_ZN8ICM2094813readRegistersEhPht>
 800037c:	4603      	mov	r3, r0
 800037e:	f083 0301 	eor.w	r3, r3, #1
 8000382:	b2db      	uxtb	r3, r3
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <_ZN8ICM2094813readAccelGyroERfS0_S0_S0_S0_S0_+0x2c>
 8000388:	2300      	movs	r3, #0
 800038a:	e078      	b.n	800047e <_ZN8ICM2094813readAccelGyroERfS0_S0_S0_S0_S0_+0x11e>

    int16_t ax_raw = (raw[0] << 8) | raw[1];
 800038c:	7c3b      	ldrb	r3, [r7, #16]
 800038e:	021b      	lsls	r3, r3, #8
 8000390:	b21a      	sxth	r2, r3
 8000392:	7c7b      	ldrb	r3, [r7, #17]
 8000394:	b21b      	sxth	r3, r3
 8000396:	4313      	orrs	r3, r2
 8000398:	84fb      	strh	r3, [r7, #38]	@ 0x26
    int16_t ay_raw = (raw[2] << 8) | raw[3];
 800039a:	7cbb      	ldrb	r3, [r7, #18]
 800039c:	021b      	lsls	r3, r3, #8
 800039e:	b21a      	sxth	r2, r3
 80003a0:	7cfb      	ldrb	r3, [r7, #19]
 80003a2:	b21b      	sxth	r3, r3
 80003a4:	4313      	orrs	r3, r2
 80003a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
    int16_t az_raw = (raw[4] << 8) | raw[5];
 80003a8:	7d3b      	ldrb	r3, [r7, #20]
 80003aa:	021b      	lsls	r3, r3, #8
 80003ac:	b21a      	sxth	r2, r3
 80003ae:	7d7b      	ldrb	r3, [r7, #21]
 80003b0:	b21b      	sxth	r3, r3
 80003b2:	4313      	orrs	r3, r2
 80003b4:	847b      	strh	r3, [r7, #34]	@ 0x22
    int16_t gx_raw = (raw[6] << 8) | raw[7];
 80003b6:	7dbb      	ldrb	r3, [r7, #22]
 80003b8:	021b      	lsls	r3, r3, #8
 80003ba:	b21a      	sxth	r2, r3
 80003bc:	7dfb      	ldrb	r3, [r7, #23]
 80003be:	b21b      	sxth	r3, r3
 80003c0:	4313      	orrs	r3, r2
 80003c2:	843b      	strh	r3, [r7, #32]
    int16_t gy_raw = (raw[8] << 8) | raw[9];
 80003c4:	7e3b      	ldrb	r3, [r7, #24]
 80003c6:	021b      	lsls	r3, r3, #8
 80003c8:	b21a      	sxth	r2, r3
 80003ca:	7e7b      	ldrb	r3, [r7, #25]
 80003cc:	b21b      	sxth	r3, r3
 80003ce:	4313      	orrs	r3, r2
 80003d0:	83fb      	strh	r3, [r7, #30]
    int16_t gz_raw = (raw[10] << 8) | raw[11];
 80003d2:	7ebb      	ldrb	r3, [r7, #26]
 80003d4:	021b      	lsls	r3, r3, #8
 80003d6:	b21a      	sxth	r2, r3
 80003d8:	7efb      	ldrb	r3, [r7, #27]
 80003da:	b21b      	sxth	r3, r3
 80003dc:	4313      	orrs	r3, r2
 80003de:	83bb      	strh	r3, [r7, #28]

    ax = ax_raw / 2048.0f;  // Assuming ±16g full scale (example scale factor)
 80003e0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80003e4:	ee07 3a90 	vmov	s15, r3
 80003e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80003ec:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8000488 <_ZN8ICM2094813readAccelGyroERfS0_S0_S0_S0_S0_+0x128>
 80003f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	edc3 7a00 	vstr	s15, [r3]
    ay = ay_raw / 2048.0f;
 80003fa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80003fe:	ee07 3a90 	vmov	s15, r3
 8000402:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000406:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8000488 <_ZN8ICM2094813readAccelGyroERfS0_S0_S0_S0_S0_+0x128>
 800040a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	edc3 7a00 	vstr	s15, [r3]
    az = az_raw / 2048.0f;
 8000414:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000418:	ee07 3a90 	vmov	s15, r3
 800041c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000420:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8000488 <_ZN8ICM2094813readAccelGyroERfS0_S0_S0_S0_S0_+0x128>
 8000424:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	edc3 7a00 	vstr	s15, [r3]

    gx = gx_raw / 16.4f;    // Assuming ±2000 dps full scale
 800042e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000432:	ee07 3a90 	vmov	s15, r3
 8000436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800043a:	eddf 6a14 	vldr	s13, [pc, #80]	@ 800048c <_ZN8ICM2094813readAccelGyroERfS0_S0_S0_S0_S0_+0x12c>
 800043e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000444:	edc3 7a00 	vstr	s15, [r3]
    gy = gy_raw / 16.4f;
 8000448:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800044c:	ee07 3a90 	vmov	s15, r3
 8000450:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000454:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 800048c <_ZN8ICM2094813readAccelGyroERfS0_S0_S0_S0_S0_+0x12c>
 8000458:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800045c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800045e:	edc3 7a00 	vstr	s15, [r3]
    gz = gz_raw / 16.4f;
 8000462:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000466:	ee07 3a90 	vmov	s15, r3
 800046a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800046e:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800048c <_ZN8ICM2094813readAccelGyroERfS0_S0_S0_S0_S0_+0x12c>
 8000472:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000478:	edc3 7a00 	vstr	s15, [r3]

    return true;
 800047c:	2301      	movs	r3, #1
}
 800047e:	4618      	mov	r0, r3
 8000480:	3728      	adds	r7, #40	@ 0x28
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	45000000 	.word	0x45000000
 800048c:	41833333 	.word	0x41833333

08000490 <_ZN8ICM2094813readRegistersEhPht>:

bool ICM20948::writeRegister(uint8_t reg, uint8_t data) {
    return (HAL_I2C_Mem_Write(hi2c, address, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY) == HAL_OK);
}

bool ICM20948::readRegisters(uint8_t reg, uint8_t* buffer, uint16_t length) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af04      	add	r7, sp, #16
 8000496:	60f8      	str	r0, [r7, #12]
 8000498:	607a      	str	r2, [r7, #4]
 800049a:	461a      	mov	r2, r3
 800049c:	460b      	mov	r3, r1
 800049e:	72fb      	strb	r3, [r7, #11]
 80004a0:	4613      	mov	r3, r2
 80004a2:	813b      	strh	r3, [r7, #8]
    return (HAL_I2C_Mem_Read(hi2c, address, reg, I2C_MEMADD_SIZE_8BIT, buffer, length, HAL_MAX_DELAY) == HAL_OK);
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	6818      	ldr	r0, [r3, #0]
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	791b      	ldrb	r3, [r3, #4]
 80004ac:	4619      	mov	r1, r3
 80004ae:	7afb      	ldrb	r3, [r7, #11]
 80004b0:	b29a      	uxth	r2, r3
 80004b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004b6:	9302      	str	r3, [sp, #8]
 80004b8:	893b      	ldrh	r3, [r7, #8]
 80004ba:	9301      	str	r3, [sp, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	9300      	str	r3, [sp, #0]
 80004c0:	2301      	movs	r3, #1
 80004c2:	f002 fd4b 	bl	8002f5c <HAL_I2C_Mem_Read>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	bf0c      	ite	eq
 80004cc:	2301      	moveq	r3, #1
 80004ce:	2300      	movne	r3, #0
 80004d0:	b2db      	uxtb	r3, r3
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3710      	adds	r7, #16
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}

080004da <_ZN8ICM2094812readRegisterEh>:

uint8_t ICM20948::readRegister(uint8_t reg) {
 80004da:	b580      	push	{r7, lr}
 80004dc:	b088      	sub	sp, #32
 80004de:	af04      	add	r7, sp, #16
 80004e0:	6078      	str	r0, [r7, #4]
 80004e2:	460b      	mov	r3, r1
 80004e4:	70fb      	strb	r3, [r7, #3]
    uint8_t value = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(hi2c, address, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	6818      	ldr	r0, [r3, #0]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	791b      	ldrb	r3, [r3, #4]
 80004f2:	4619      	mov	r1, r3
 80004f4:	78fb      	ldrb	r3, [r7, #3]
 80004f6:	b29a      	uxth	r2, r3
 80004f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004fc:	9302      	str	r3, [sp, #8]
 80004fe:	2301      	movs	r3, #1
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	f107 030f 	add.w	r3, r7, #15
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	2301      	movs	r3, #1
 800050a:	f002 fd27 	bl	8002f5c <HAL_I2C_Mem_Read>
    return value;
 800050e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000510:	4618      	mov	r0, r3
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <_ZN5MotorC1EP17TIM_HandleTypeDefmS1_mfff>:
#include <RoboContFirmware/LowLevel/motor.hpp>

Motor::Motor(TIM_HandleTypeDef* pwm_timer1, uint32_t pwm_channel1,
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0
 800051e:	61f8      	str	r0, [r7, #28]
 8000520:	61b9      	str	r1, [r7, #24]
 8000522:	617a      	str	r2, [r7, #20]
 8000524:	613b      	str	r3, [r7, #16]
 8000526:	ed87 0a03 	vstr	s0, [r7, #12]
 800052a:	edc7 0a02 	vstr	s1, [r7, #8]
 800052e:	ed87 1a01 	vstr	s2, [r7, #4]
             TIM_HandleTypeDef* pwm_timer2, uint32_t pwm_channel2,
             float wheel_diameter, float max_speed_mps, float max_pwm) {
    this->htim_pwm1 = pwm_timer1;
 8000532:	69fb      	ldr	r3, [r7, #28]
 8000534:	69ba      	ldr	r2, [r7, #24]
 8000536:	601a      	str	r2, [r3, #0]
    this->channel_pwm1 = pwm_channel1;
 8000538:	69fb      	ldr	r3, [r7, #28]
 800053a:	697a      	ldr	r2, [r7, #20]
 800053c:	605a      	str	r2, [r3, #4]
    this->htim_pwm2 = pwm_timer2;
 800053e:	69fb      	ldr	r3, [r7, #28]
 8000540:	693a      	ldr	r2, [r7, #16]
 8000542:	609a      	str	r2, [r3, #8]
    this->channel_pwm2 = pwm_channel2;
 8000544:	69fb      	ldr	r3, [r7, #28]
 8000546:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000548:	60da      	str	r2, [r3, #12]

    this->wheel_diameter = wheel_diameter;
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	68fa      	ldr	r2, [r7, #12]
 800054e:	611a      	str	r2, [r3, #16]
    this->max_speed_mps = max_speed_mps;
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	68ba      	ldr	r2, [r7, #8]
 8000554:	615a      	str	r2, [r3, #20]
    this->max_pwm = max_pwm;
 8000556:	69fb      	ldr	r3, [r7, #28]
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	619a      	str	r2, [r3, #24]

    pid_kp = 1.0f;
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000562:	61da      	str	r2, [r3, #28]
    pid_ki = 0.0f;
 8000564:	69fb      	ldr	r3, [r7, #28]
 8000566:	f04f 0200 	mov.w	r2, #0
 800056a:	621a      	str	r2, [r3, #32]
    pid_kd = 0.0f;
 800056c:	69fb      	ldr	r3, [r7, #28]
 800056e:	f04f 0200 	mov.w	r2, #0
 8000572:	625a      	str	r2, [r3, #36]	@ 0x24
    pid_integral = 0.0f;
 8000574:	69fb      	ldr	r3, [r7, #28]
 8000576:	f04f 0200 	mov.w	r2, #0
 800057a:	629a      	str	r2, [r3, #40]	@ 0x28
    pid_previous_error = 0.0f;
 800057c:	69fb      	ldr	r3, [r7, #28]
 800057e:	f04f 0200 	mov.w	r2, #0
 8000582:	62da      	str	r2, [r3, #44]	@ 0x2c

    target_speed_mps = 0.0f;
 8000584:	69fb      	ldr	r3, [r7, #28]
 8000586:	f04f 0200 	mov.w	r2, #0
 800058a:	631a      	str	r2, [r3, #48]	@ 0x30

    HAL_TIM_PWM_Start(htim_pwm1, channel_pwm1);
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	69fb      	ldr	r3, [r7, #28]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	4619      	mov	r1, r3
 8000596:	4610      	mov	r0, r2
 8000598:	f004 fee2 	bl	8005360 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htim_pwm2, channel_pwm2);
 800059c:	69fb      	ldr	r3, [r7, #28]
 800059e:	689a      	ldr	r2, [r3, #8]
 80005a0:	69fb      	ldr	r3, [r7, #28]
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	4619      	mov	r1, r3
 80005a6:	4610      	mov	r0, r2
 80005a8:	f004 feda 	bl	8005360 <HAL_TIM_PWM_Start>
}
 80005ac:	69fb      	ldr	r3, [r7, #28]
 80005ae:	4618      	mov	r0, r3
 80005b0:	3720      	adds	r7, #32
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <_ZN5Motor14setTargetSpeedEf>:
    pid_kp = kp;
    pid_ki = ki;
    pid_kd = kd;
}

void Motor::setTargetSpeed(float target_speed) {
 80005b6:	b480      	push	{r7}
 80005b8:	b083      	sub	sp, #12
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	ed87 0a00 	vstr	s0, [r7]
    if (target_speed > max_speed_mps) target_speed = max_speed_mps;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	edd3 7a05 	vldr	s15, [r3, #20]
 80005c8:	ed97 7a00 	vldr	s14, [r7]
 80005cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005d4:	dd02      	ble.n	80005dc <_ZN5Motor14setTargetSpeedEf+0x26>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	603b      	str	r3, [r7, #0]
    if (target_speed < -max_speed_mps) target_speed = -max_speed_mps;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	edd3 7a05 	vldr	s15, [r3, #20]
 80005e2:	eef1 7a67 	vneg.f32	s15, s15
 80005e6:	ed97 7a00 	vldr	s14, [r7]
 80005ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005f2:	d506      	bpl.n	8000602 <_ZN5Motor14setTargetSpeedEf+0x4c>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	edd3 7a05 	vldr	s15, [r3, #20]
 80005fa:	eef1 7a67 	vneg.f32	s15, s15
 80005fe:	edc7 7a00 	vstr	s15, [r7]
    target_speed_mps = target_speed;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	683a      	ldr	r2, [r7, #0]
 8000606:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <_ZN5Motor9updatePWMEff>:

void Motor::updatePWM(float current_speed, float dt) {
 8000614:	b480      	push	{r7}
 8000616:	b089      	sub	sp, #36	@ 0x24
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000620:	edc7 0a01 	vstr	s1, [r7, #4]
    float error = target_speed_mps - current_speed;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800062a:	edd7 7a02 	vldr	s15, [r7, #8]
 800062e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000632:	edc7 7a06 	vstr	s15, [r7, #24]
    pid_integral += error * dt;
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800063c:	edd7 6a06 	vldr	s13, [r7, #24]
 8000640:	edd7 7a01 	vldr	s15, [r7, #4]
 8000644:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    float derivative = (error - pid_previous_error) / dt;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000658:	ed97 7a06 	vldr	s14, [r7, #24]
 800065c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000660:	ed97 7a01 	vldr	s14, [r7, #4]
 8000664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000668:	edc7 7a05 	vstr	s15, [r7, #20]
    float output = pid_kp * error + pid_ki * pid_integral + pid_kd * derivative;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	ed93 7a07 	vldr	s14, [r3, #28]
 8000672:	edd7 7a06 	vldr	s15, [r7, #24]
 8000676:	ee27 7a27 	vmul.f32	s14, s14, s15
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	edd3 6a08 	vldr	s13, [r3, #32]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000686:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800068a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8000694:	edd7 7a05 	vldr	s15, [r7, #20]
 8000698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800069c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006a0:	edc7 7a04 	vstr	s15, [r7, #16]
    pid_previous_error = error;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	69ba      	ldr	r2, [r7, #24]
 80006a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    float pwm_value = (output / max_speed_mps) * max_pwm;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	edd3 7a05 	vldr	s15, [r3, #20]
 80006b0:	edd7 6a04 	vldr	s13, [r7, #16]
 80006b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80006be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006c2:	edc7 7a07 	vstr	s15, [r7, #28]
    if (pwm_value > max_pwm) pwm_value = max_pwm;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80006cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80006d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d8:	dd02      	ble.n	80006e0 <_ZN5Motor9updatePWMEff+0xcc>
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	61fb      	str	r3, [r7, #28]
    if (pwm_value < -max_pwm) pwm_value = -max_pwm;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	edd3 7a06 	vldr	s15, [r3, #24]
 80006e6:	eef1 7a67 	vneg.f32	s15, s15
 80006ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80006ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f6:	d506      	bpl.n	8000706 <_ZN5Motor9updatePWMEff+0xf2>
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	edd3 7a06 	vldr	s15, [r3, #24]
 80006fe:	eef1 7a67 	vneg.f32	s15, s15
 8000702:	edc7 7a07 	vstr	s15, [r7, #28]

    if (pwm_value >= 0) {
 8000706:	edd7 7a07 	vldr	s15, [r7, #28]
 800070a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800070e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000712:	db5a      	blt.n	80007ca <_ZN5Motor9updatePWMEff+0x1b6>
        __HAL_TIM_SET_COMPARE(htim_pwm1, channel_pwm1, (uint32_t)pwm_value);
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d10a      	bne.n	8000732 <_ZN5Motor9updatePWMEff+0x11e>
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	edd7 7a07 	vldr	s15, [r7, #28]
 8000726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800072a:	ee17 2a90 	vmov	r2, s15
 800072e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000730:	e027      	b.n	8000782 <_ZN5Motor9updatePWMEff+0x16e>
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	2b04      	cmp	r3, #4
 8000738:	d10a      	bne.n	8000750 <_ZN5Motor9updatePWMEff+0x13c>
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	edd7 7a07 	vldr	s15, [r7, #28]
 8000744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000748:	ee17 2a90 	vmov	r2, s15
 800074c:	639a      	str	r2, [r3, #56]	@ 0x38
 800074e:	e018      	b.n	8000782 <_ZN5Motor9updatePWMEff+0x16e>
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	2b08      	cmp	r3, #8
 8000756:	d10a      	bne.n	800076e <_ZN5Motor9updatePWMEff+0x15a>
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000766:	ee17 2a90 	vmov	r2, s15
 800076a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800076c:	e009      	b.n	8000782 <_ZN5Motor9updatePWMEff+0x16e>
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	edd7 7a07 	vldr	s15, [r7, #28]
 8000778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800077c:	ee17 2a90 	vmov	r2, s15
 8000780:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htim_pwm2, channel_pwm2, 0);
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	68db      	ldr	r3, [r3, #12]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d105      	bne.n	8000796 <_ZN5Motor9updatePWMEff+0x182>
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	689b      	ldr	r3, [r3, #8]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2200      	movs	r2, #0
 8000792:	635a      	str	r2, [r3, #52]	@ 0x34
    } else {
        __HAL_TIM_SET_COMPARE(htim_pwm1, channel_pwm1, 0);
        __HAL_TIM_SET_COMPARE(htim_pwm2, channel_pwm2, (uint32_t)(-pwm_value));
    }
}
 8000794:	e07b      	b.n	800088e <_ZN5Motor9updatePWMEff+0x27a>
        __HAL_TIM_SET_COMPARE(htim_pwm2, channel_pwm2, 0);
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	2b04      	cmp	r3, #4
 800079c:	d105      	bne.n	80007aa <_ZN5Motor9updatePWMEff+0x196>
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2200      	movs	r2, #0
 80007a6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80007a8:	e071      	b.n	800088e <_ZN5Motor9updatePWMEff+0x27a>
        __HAL_TIM_SET_COMPARE(htim_pwm2, channel_pwm2, 0);
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	68db      	ldr	r3, [r3, #12]
 80007ae:	2b08      	cmp	r3, #8
 80007b0:	d105      	bne.n	80007be <_ZN5Motor9updatePWMEff+0x1aa>
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	689b      	ldr	r3, [r3, #8]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2200      	movs	r2, #0
 80007ba:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80007bc:	e067      	b.n	800088e <_ZN5Motor9updatePWMEff+0x27a>
        __HAL_TIM_SET_COMPARE(htim_pwm2, channel_pwm2, 0);
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	689b      	ldr	r3, [r3, #8]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2200      	movs	r2, #0
 80007c6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80007c8:	e061      	b.n	800088e <_ZN5Motor9updatePWMEff+0x27a>
        __HAL_TIM_SET_COMPARE(htim_pwm1, channel_pwm1, 0);
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d105      	bne.n	80007de <_ZN5Motor9updatePWMEff+0x1ca>
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2200      	movs	r2, #0
 80007da:	635a      	str	r2, [r3, #52]	@ 0x34
 80007dc:	e018      	b.n	8000810 <_ZN5Motor9updatePWMEff+0x1fc>
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	d105      	bne.n	80007f2 <_ZN5Motor9updatePWMEff+0x1de>
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2200      	movs	r2, #0
 80007ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80007f0:	e00e      	b.n	8000810 <_ZN5Motor9updatePWMEff+0x1fc>
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	2b08      	cmp	r3, #8
 80007f8:	d105      	bne.n	8000806 <_ZN5Motor9updatePWMEff+0x1f2>
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2200      	movs	r2, #0
 8000802:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000804:	e004      	b.n	8000810 <_ZN5Motor9updatePWMEff+0x1fc>
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2200      	movs	r2, #0
 800080e:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htim_pwm2, channel_pwm2, (uint32_t)(-pwm_value));
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d10c      	bne.n	8000832 <_ZN5Motor9updatePWMEff+0x21e>
 8000818:	edd7 7a07 	vldr	s15, [r7, #28]
 800081c:	eef1 7a67 	vneg.f32	s15, s15
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	689b      	ldr	r3, [r3, #8]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800082a:	ee17 2a90 	vmov	r2, s15
 800082e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000830:	e02d      	b.n	800088e <_ZN5Motor9updatePWMEff+0x27a>
        __HAL_TIM_SET_COMPARE(htim_pwm2, channel_pwm2, (uint32_t)(-pwm_value));
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	68db      	ldr	r3, [r3, #12]
 8000836:	2b04      	cmp	r3, #4
 8000838:	d10c      	bne.n	8000854 <_ZN5Motor9updatePWMEff+0x240>
 800083a:	edd7 7a07 	vldr	s15, [r7, #28]
 800083e:	eef1 7a67 	vneg.f32	s15, s15
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800084c:	ee17 2a90 	vmov	r2, s15
 8000850:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000852:	e01c      	b.n	800088e <_ZN5Motor9updatePWMEff+0x27a>
        __HAL_TIM_SET_COMPARE(htim_pwm2, channel_pwm2, (uint32_t)(-pwm_value));
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	2b08      	cmp	r3, #8
 800085a:	d10c      	bne.n	8000876 <_ZN5Motor9updatePWMEff+0x262>
 800085c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000860:	eef1 7a67 	vneg.f32	s15, s15
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800086e:	ee17 2a90 	vmov	r2, s15
 8000872:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000874:	e00b      	b.n	800088e <_ZN5Motor9updatePWMEff+0x27a>
        __HAL_TIM_SET_COMPARE(htim_pwm2, channel_pwm2, (uint32_t)(-pwm_value));
 8000876:	edd7 7a07 	vldr	s15, [r7, #28]
 800087a:	eef1 7a67 	vneg.f32	s15, s15
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000888:	ee17 2a90 	vmov	r2, s15
 800088c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800088e:	bf00      	nop
 8000890:	3724      	adds	r7, #36	@ 0x24
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <_ZNK5Motor14getMaxSpeedMpsEv>:

float Motor::getMaxSpeedMps() const {
 800089a:	b480      	push	{r7}
 800089c:	b083      	sub	sp, #12
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
    return max_speed_mps;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	ee07 3a90 	vmov	s15, r3
}
 80008aa:	eeb0 0a67 	vmov.f32	s0, s15
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008c8:	4b18      	ldr	r3, [pc, #96]	@ (800092c <MX_ADC1_Init+0x74>)
 80008ca:	4a19      	ldr	r2, [pc, #100]	@ (8000930 <MX_ADC1_Init+0x78>)
 80008cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ce:	4b17      	ldr	r3, [pc, #92]	@ (800092c <MX_ADC1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008d4:	4b15      	ldr	r3, [pc, #84]	@ (800092c <MX_ADC1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008da:	4b14      	ldr	r3, [pc, #80]	@ (800092c <MX_ADC1_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <MX_ADC1_Init+0x74>)
 80008e2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80008e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e8:	4b10      	ldr	r3, [pc, #64]	@ (800092c <MX_ADC1_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <MX_ADC1_Init+0x74>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008f4:	480d      	ldr	r0, [pc, #52]	@ (800092c <MX_ADC1_Init+0x74>)
 80008f6:	f001 fcab 	bl	8002250 <HAL_ADC_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000900:	f000 fc82 	bl	8001208 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000904:	2304      	movs	r3, #4
 8000906:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000908:	2301      	movs	r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	@ (800092c <MX_ADC1_Init+0x74>)
 8000916:	f001 fd73 	bl	8002400 <HAL_ADC_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000920:	f000 fc72 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000028 	.word	0x20000028
 8000930:	40012400 	.word	0x40012400

08000934 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	@ 0x28
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a15      	ldr	r2, [pc, #84]	@ (80009a8 <HAL_ADC_MspInit+0x74>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d124      	bne.n	80009a0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000956:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <HAL_ADC_MspInit+0x78>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	4a14      	ldr	r2, [pc, #80]	@ (80009ac <HAL_ADC_MspInit+0x78>)
 800095c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000960:	6193      	str	r3, [r2, #24]
 8000962:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <HAL_ADC_MspInit+0x78>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <HAL_ADC_MspInit+0x78>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	4a0e      	ldr	r2, [pc, #56]	@ (80009ac <HAL_ADC_MspInit+0x78>)
 8000974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000978:	6153      	str	r3, [r2, #20]
 800097a:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <HAL_ADC_MspInit+0x78>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000986:	23f0      	movs	r3, #240	@ 0xf0
 8000988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800098a:	2303      	movs	r3, #3
 800098c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800099c:	f002 f8b0 	bl	8002b00 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80009a0:	bf00      	nop
 80009a2:	3728      	adds	r7, #40	@ 0x28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40012400 	.word	0x40012400
 80009ac:	40021000 	.word	0x40021000

080009b0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80009b4:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <MX_CAN_Init+0x60>)
 80009b6:	4a17      	ldr	r2, [pc, #92]	@ (8000a14 <MX_CAN_Init+0x64>)
 80009b8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80009ba:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <MX_CAN_Init+0x60>)
 80009bc:	2210      	movs	r2, #16
 80009be:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80009c0:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <MX_CAN_Init+0x60>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009c6:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <MX_CAN_Init+0x60>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80009cc:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <MX_CAN_Init+0x60>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <MX_CAN_Init+0x60>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80009d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a10 <MX_CAN_Init+0x60>)
 80009da:	2200      	movs	r2, #0
 80009dc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80009de:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <MX_CAN_Init+0x60>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <MX_CAN_Init+0x60>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80009ea:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <MX_CAN_Init+0x60>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80009f0:	4b07      	ldr	r3, [pc, #28]	@ (8000a10 <MX_CAN_Init+0x60>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <MX_CAN_Init+0x60>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	@ (8000a10 <MX_CAN_Init+0x60>)
 80009fe:	f001 fe30 	bl	8002662 <HAL_CAN_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000a08:	f000 fbfe 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000058 	.word	0x20000058
 8000a14:	40006400 	.word	0x40006400

08000a18 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	@ 0x28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a17      	ldr	r2, [pc, #92]	@ (8000a94 <HAL_CAN_MspInit+0x7c>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d128      	bne.n	8000a8c <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a3a:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <HAL_CAN_MspInit+0x80>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	4a16      	ldr	r2, [pc, #88]	@ (8000a98 <HAL_CAN_MspInit+0x80>)
 8000a40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a44:	61d3      	str	r3, [r2, #28]
 8000a46:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <HAL_CAN_MspInit+0x80>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <HAL_CAN_MspInit+0x80>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	4a10      	ldr	r2, [pc, #64]	@ (8000a98 <HAL_CAN_MspInit+0x80>)
 8000a58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a5c:	6153      	str	r3, [r2, #20]
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <HAL_CAN_MspInit+0x80>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000a7c:	2309      	movs	r3, #9
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <HAL_CAN_MspInit+0x84>)
 8000a88:	f002 f83a 	bl	8002b00 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	@ 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40006400 	.word	0x40006400
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	48000400 	.word	0x48000400

08000aa0 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DAC_HandleTypeDef hdac2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <MX_DAC1_Init+0x64>)
 8000ab2:	4a15      	ldr	r2, [pc, #84]	@ (8000b08 <MX_DAC1_Init+0x68>)
 8000ab4:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ab6:	4813      	ldr	r0, [pc, #76]	@ (8000b04 <MX_DAC1_Init+0x64>)
 8000ab8:	f001 ffb3 	bl	8002a22 <HAL_DAC_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000ac2:	f000 fba1 	bl	8001208 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480b      	ldr	r0, [pc, #44]	@ (8000b04 <MX_DAC1_Init+0x64>)
 8000ad6:	f001 ffc6 	bl	8002a66 <HAL_DAC_ConfigChannel>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000ae0:	f000 fb92 	bl	8001208 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2210      	movs	r2, #16
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4806      	ldr	r0, [pc, #24]	@ (8000b04 <MX_DAC1_Init+0x64>)
 8000aec:	f001 ffbb 	bl	8002a66 <HAL_DAC_ConfigChannel>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_DAC1_Init+0x5a>
  {
    Error_Handler();
 8000af6:	f000 fb87 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000080 	.word	0x20000080
 8000b08:	40007400 	.word	0x40007400

08000b0c <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <MX_DAC2_Init+0x4c>)
 8000b1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b5c <MX_DAC2_Init+0x50>)
 8000b20:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000b22:	480d      	ldr	r0, [pc, #52]	@ (8000b58 <MX_DAC2_Init+0x4c>)
 8000b24:	f001 ff7d 	bl	8002a22 <HAL_DAC_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_DAC2_Init+0x26>
  {
    Error_Handler();
 8000b2e:	f000 fb6b 	bl	8001208 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <MX_DAC2_Init+0x4c>)
 8000b42:	f001 ff90 	bl	8002a66 <HAL_DAC_ConfigChannel>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_DAC2_Init+0x44>
  {
    Error_Handler();
 8000b4c:	f000 fb5c 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000094 	.word	0x20000094
 8000b5c:	40009800 	.word	0x40009800

08000b60 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	@ 0x30
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a2b      	ldr	r2, [pc, #172]	@ (8000c2c <HAL_DAC_MspInit+0xcc>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d125      	bne.n	8000bce <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000b82:	4b2b      	ldr	r3, [pc, #172]	@ (8000c30 <HAL_DAC_MspInit+0xd0>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	4a2a      	ldr	r2, [pc, #168]	@ (8000c30 <HAL_DAC_MspInit+0xd0>)
 8000b88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000b8c:	61d3      	str	r3, [r2, #28]
 8000b8e:	4b28      	ldr	r3, [pc, #160]	@ (8000c30 <HAL_DAC_MspInit+0xd0>)
 8000b90:	69db      	ldr	r3, [r3, #28]
 8000b92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000b96:	61bb      	str	r3, [r7, #24]
 8000b98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	4b25      	ldr	r3, [pc, #148]	@ (8000c30 <HAL_DAC_MspInit+0xd0>)
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	4a24      	ldr	r2, [pc, #144]	@ (8000c30 <HAL_DAC_MspInit+0xd0>)
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba4:	6153      	str	r3, [r2, #20]
 8000ba6:	4b22      	ldr	r3, [pc, #136]	@ (8000c30 <HAL_DAC_MspInit+0xd0>)
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000bb2:	2330      	movs	r3, #48	@ 0x30
 8000bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc8:	f001 ff9a 	bl	8002b00 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8000bcc:	e029      	b.n	8000c22 <HAL_DAC_MspInit+0xc2>
  else if(dacHandle->Instance==DAC2)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a18      	ldr	r2, [pc, #96]	@ (8000c34 <HAL_DAC_MspInit+0xd4>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d124      	bne.n	8000c22 <HAL_DAC_MspInit+0xc2>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8000bd8:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <HAL_DAC_MspInit+0xd0>)
 8000bda:	69db      	ldr	r3, [r3, #28]
 8000bdc:	4a14      	ldr	r2, [pc, #80]	@ (8000c30 <HAL_DAC_MspInit+0xd0>)
 8000bde:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000be2:	61d3      	str	r3, [r2, #28]
 8000be4:	4b12      	ldr	r3, [pc, #72]	@ (8000c30 <HAL_DAC_MspInit+0xd0>)
 8000be6:	69db      	ldr	r3, [r3, #28]
 8000be8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <HAL_DAC_MspInit+0xd0>)
 8000bf2:	695b      	ldr	r3, [r3, #20]
 8000bf4:	4a0e      	ldr	r2, [pc, #56]	@ (8000c30 <HAL_DAC_MspInit+0xd0>)
 8000bf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bfa:	6153      	str	r3, [r2, #20]
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <HAL_DAC_MspInit+0xd0>)
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c08:	2340      	movs	r3, #64	@ 0x40
 8000c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c1e:	f001 ff6f 	bl	8002b00 <HAL_GPIO_Init>
}
 8000c22:	bf00      	nop
 8000c24:	3730      	adds	r7, #48	@ 0x30
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40007400 	.word	0x40007400
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40009800 	.word	0x40009800

08000c38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	@ 0x30
 8000c3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4e:	4b60      	ldr	r3, [pc, #384]	@ (8000dd0 <MX_GPIO_Init+0x198>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	4a5f      	ldr	r2, [pc, #380]	@ (8000dd0 <MX_GPIO_Init+0x198>)
 8000c54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000c58:	6153      	str	r3, [r2, #20]
 8000c5a:	4b5d      	ldr	r3, [pc, #372]	@ (8000dd0 <MX_GPIO_Init+0x198>)
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c62:	61bb      	str	r3, [r7, #24]
 8000c64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c66:	4b5a      	ldr	r3, [pc, #360]	@ (8000dd0 <MX_GPIO_Init+0x198>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	4a59      	ldr	r2, [pc, #356]	@ (8000dd0 <MX_GPIO_Init+0x198>)
 8000c6c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c70:	6153      	str	r3, [r2, #20]
 8000c72:	4b57      	ldr	r3, [pc, #348]	@ (8000dd0 <MX_GPIO_Init+0x198>)
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b54      	ldr	r3, [pc, #336]	@ (8000dd0 <MX_GPIO_Init+0x198>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	4a53      	ldr	r2, [pc, #332]	@ (8000dd0 <MX_GPIO_Init+0x198>)
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c88:	6153      	str	r3, [r2, #20]
 8000c8a:	4b51      	ldr	r3, [pc, #324]	@ (8000dd0 <MX_GPIO_Init+0x198>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	4b4e      	ldr	r3, [pc, #312]	@ (8000dd0 <MX_GPIO_Init+0x198>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	4a4d      	ldr	r2, [pc, #308]	@ (8000dd0 <MX_GPIO_Init+0x198>)
 8000c9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ca0:	6153      	str	r3, [r2, #20]
 8000ca2:	4b4b      	ldr	r3, [pc, #300]	@ (8000dd0 <MX_GPIO_Init+0x198>)
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cae:	4b48      	ldr	r3, [pc, #288]	@ (8000dd0 <MX_GPIO_Init+0x198>)
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	4a47      	ldr	r2, [pc, #284]	@ (8000dd0 <MX_GPIO_Init+0x198>)
 8000cb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cb8:	6153      	str	r3, [r2, #20]
 8000cba:	4b45      	ldr	r3, [pc, #276]	@ (8000dd0 <MX_GPIO_Init+0x198>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc6:	4b42      	ldr	r3, [pc, #264]	@ (8000dd0 <MX_GPIO_Init+0x198>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	4a41      	ldr	r2, [pc, #260]	@ (8000dd0 <MX_GPIO_Init+0x198>)
 8000ccc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000cd0:	6153      	str	r3, [r2, #20]
 8000cd2:	4b3f      	ldr	r3, [pc, #252]	@ (8000dd0 <MX_GPIO_Init+0x198>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000ce4:	483b      	ldr	r0, [pc, #236]	@ (8000dd4 <MX_GPIO_Init+0x19c>)
 8000ce6:	f002 f885 	bl	8002df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_2, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000cf0:	4839      	ldr	r0, [pc, #228]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000cf2:	f002 f87f 	bl	8002df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8000cfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d00:	f002 f878 	bl	8002df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d04:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	482d      	ldr	r0, [pc, #180]	@ (8000dd4 <MX_GPIO_Init+0x19c>)
 8000d1e:	f001 feef 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = encoder1_B_Pin;
 8000d22:	2320      	movs	r3, #32
 8000d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(encoder1_B_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	4827      	ldr	r0, [pc, #156]	@ (8000dd4 <MX_GPIO_Init+0x19c>)
 8000d36:	f001 fee3 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = encoder2_B_Pin;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(encoder2_B_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4823      	ldr	r0, [pc, #140]	@ (8000ddc <MX_GPIO_Init+0x1a4>)
 8000d4e:	f001 fed7 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = encoder3_B_Pin|encoder4_B_Pin;
 8000d52:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	4619      	mov	r1, r3
 8000d66:	481e      	ldr	r0, [pc, #120]	@ (8000de0 <MX_GPIO_Init+0x1a8>)
 8000d68:	f001 feca 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d72:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	4619      	mov	r1, r3
 8000d82:	4816      	ldr	r0, [pc, #88]	@ (8000ddc <MX_GPIO_Init+0x1a4>)
 8000d84:	f001 febc 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_2;
 8000d88:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480d      	ldr	r0, [pc, #52]	@ (8000dd8 <MX_GPIO_Init+0x1a0>)
 8000da2:	f001 fead 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8000da6:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc2:	f001 fe9d 	bl	8002b00 <HAL_GPIO_Init>

}
 8000dc6:	bf00      	nop
 8000dc8:	3730      	adds	r7, #48	@ 0x30
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	48000800 	.word	0x48000800
 8000dd8:	48000c00 	.word	0x48000c00
 8000ddc:	48000400 	.word	0x48000400
 8000de0:	48001000 	.word	0x48001000

08000de4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000dea:	4a1c      	ldr	r2, [pc, #112]	@ (8000e5c <MX_I2C1_Init+0x78>)
 8000dec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000df0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e60 <MX_I2C1_Init+0x7c>)
 8000df2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000df4:	4b18      	ldr	r3, [pc, #96]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dfa:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e00:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e06:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e12:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e1e:	480e      	ldr	r0, [pc, #56]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000e20:	f002 f800 	bl	8002e24 <HAL_I2C_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e2a:	f000 f9ed 	bl	8001208 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4809      	ldr	r0, [pc, #36]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000e32:	f002 fc1b 	bl	800366c <HAL_I2CEx_ConfigAnalogFilter>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e3c:	f000 f9e4 	bl	8001208 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e40:	2100      	movs	r1, #0
 8000e42:	4805      	ldr	r0, [pc, #20]	@ (8000e58 <MX_I2C1_Init+0x74>)
 8000e44:	f002 fc5d 	bl	8003702 <HAL_I2CEx_ConfigDigitalFilter>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e4e:	f000 f9db 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200000a8 	.word	0x200000a8
 8000e5c:	40005400 	.word	0x40005400
 8000e60:	00201d2b 	.word	0x00201d2b

08000e64 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed8 <MX_I2C2_Init+0x74>)
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000edc <MX_I2C2_Init+0x78>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00201D2B;
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed8 <MX_I2C2_Init+0x74>)
 8000e70:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee0 <MX_I2C2_Init+0x7c>)
 8000e72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e74:	4b18      	ldr	r3, [pc, #96]	@ (8000ed8 <MX_I2C2_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ed8 <MX_I2C2_Init+0x74>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e80:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <MX_I2C2_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e86:	4b14      	ldr	r3, [pc, #80]	@ (8000ed8 <MX_I2C2_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <MX_I2C2_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e92:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <MX_I2C2_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed8 <MX_I2C2_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e9e:	480e      	ldr	r0, [pc, #56]	@ (8000ed8 <MX_I2C2_Init+0x74>)
 8000ea0:	f001 ffc0 	bl	8002e24 <HAL_I2C_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000eaa:	f000 f9ad 	bl	8001208 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4809      	ldr	r0, [pc, #36]	@ (8000ed8 <MX_I2C2_Init+0x74>)
 8000eb2:	f002 fbdb 	bl	800366c <HAL_I2CEx_ConfigAnalogFilter>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ebc:	f000 f9a4 	bl	8001208 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4805      	ldr	r0, [pc, #20]	@ (8000ed8 <MX_I2C2_Init+0x74>)
 8000ec4:	f002 fc1d 	bl	8003702 <HAL_I2CEx_ConfigDigitalFilter>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ece:	f000 f99b 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200000fc 	.word	0x200000fc
 8000edc:	40005800 	.word	0x40005800
 8000ee0:	00201d2b 	.word	0x00201d2b

08000ee4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08c      	sub	sp, #48	@ 0x30
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a2e      	ldr	r2, [pc, #184]	@ (8000fbc <HAL_I2C_MspInit+0xd8>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d128      	bne.n	8000f58 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc0 <HAL_I2C_MspInit+0xdc>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	4a2d      	ldr	r2, [pc, #180]	@ (8000fc0 <HAL_I2C_MspInit+0xdc>)
 8000f0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f10:	6153      	str	r3, [r2, #20]
 8000f12:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc0 <HAL_I2C_MspInit+0xdc>)
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f1a:	61bb      	str	r3, [r7, #24]
 8000f1c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f1e:	23c0      	movs	r3, #192	@ 0xc0
 8000f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f22:	2312      	movs	r3, #18
 8000f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f2e:	2304      	movs	r3, #4
 8000f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	4619      	mov	r1, r3
 8000f38:	4822      	ldr	r0, [pc, #136]	@ (8000fc4 <HAL_I2C_MspInit+0xe0>)
 8000f3a:	f001 fde1 	bl	8002b00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f3e:	4b20      	ldr	r3, [pc, #128]	@ (8000fc0 <HAL_I2C_MspInit+0xdc>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	4a1f      	ldr	r2, [pc, #124]	@ (8000fc0 <HAL_I2C_MspInit+0xdc>)
 8000f44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f48:	61d3      	str	r3, [r2, #28]
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc0 <HAL_I2C_MspInit+0xdc>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000f56:	e02c      	b.n	8000fb2 <HAL_I2C_MspInit+0xce>
  else if(i2cHandle->Instance==I2C2)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a1a      	ldr	r2, [pc, #104]	@ (8000fc8 <HAL_I2C_MspInit+0xe4>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d127      	bne.n	8000fb2 <HAL_I2C_MspInit+0xce>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f62:	4b17      	ldr	r3, [pc, #92]	@ (8000fc0 <HAL_I2C_MspInit+0xdc>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	4a16      	ldr	r2, [pc, #88]	@ (8000fc0 <HAL_I2C_MspInit+0xdc>)
 8000f68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f6c:	6153      	str	r3, [r2, #20]
 8000f6e:	4b14      	ldr	r3, [pc, #80]	@ (8000fc0 <HAL_I2C_MspInit+0xdc>)
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f7a:	23c0      	movs	r3, #192	@ 0xc0
 8000f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f7e:	2312      	movs	r3, #18
 8000f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f86:	2303      	movs	r3, #3
 8000f88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	4619      	mov	r1, r3
 8000f94:	480d      	ldr	r0, [pc, #52]	@ (8000fcc <HAL_I2C_MspInit+0xe8>)
 8000f96:	f001 fdb3 	bl	8002b00 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f9a:	4b09      	ldr	r3, [pc, #36]	@ (8000fc0 <HAL_I2C_MspInit+0xdc>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	4a08      	ldr	r2, [pc, #32]	@ (8000fc0 <HAL_I2C_MspInit+0xdc>)
 8000fa0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fa4:	61d3      	str	r3, [r2, #28]
 8000fa6:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <HAL_I2C_MspInit+0xdc>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
}
 8000fb2:	bf00      	nop
 8000fb4:	3730      	adds	r7, #48	@ 0x30
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40005400 	.word	0x40005400
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	48000400 	.word	0x48000400
 8000fc8:	40005800 	.word	0x40005800
 8000fcc:	48001400 	.word	0x48001400

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b094      	sub	sp, #80	@ 0x50
 8000fd4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd6:	f001 f8b1 	bl	800213c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fda:	f000 f89b 	bl	8001114 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fde:	f7ff fe2b 	bl	8000c38 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fe2:	f7ff fc69 	bl	80008b8 <MX_ADC1_Init>
  MX_CAN_Init();
 8000fe6:	f7ff fce3 	bl	80009b0 <MX_CAN_Init>
  MX_DAC1_Init();
 8000fea:	f7ff fd59 	bl	8000aa0 <MX_DAC1_Init>
  MX_DAC2_Init();
 8000fee:	f7ff fd8d 	bl	8000b0c <MX_DAC2_Init>
  MX_TIM2_Init();
 8000ff2:	f000 f9f7 	bl	80013e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ff6:	f000 fa8b 	bl	8001510 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000ffa:	f000 fae7 	bl	80015cc <MX_TIM5_Init>
  MX_TIM13_Init();
 8000ffe:	f000 fb7d 	bl	80016fc <MX_TIM13_Init>
  MX_USB_PCD_Init();
 8001002:	f001 f80b 	bl	800201c <MX_USB_PCD_Init>
  MX_TIM15_Init();
 8001006:	f000 fbc1 	bl	800178c <MX_TIM15_Init>
  MX_I2C1_Init();
 800100a:	f7ff feeb 	bl	8000de4 <MX_I2C1_Init>
  MX_I2C2_Init();
 800100e:	f7ff ff29 	bl	8000e64 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001012:	f000 f8ff 	bl	8001214 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001016:	f000 fec9 	bl	8001dac <MX_USART1_UART_Init>
  MX_TIM17_Init();
 800101a:	f000 fc2b 	bl	8001874 <MX_TIM17_Init>
  MX_TIM19_Init();
 800101e:	f000 fca1 	bl	8001964 <MX_TIM19_Init>
  MX_USART2_UART_Init();
 8001022:	f000 fef3 	bl	8001e0c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001026:	f000 ff21 	bl	8001e6c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Create motor object for TIM5 CH1 and CH2
  Motor testMotor(&htim5, TIM_CHANNEL_1, &htim5, TIM_CHANNEL_2, 0.1f, 1.5f, 1000.0f);
 800102a:	1d38      	adds	r0, r7, #4
 800102c:	2304      	movs	r3, #4
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 8001100 <main+0x130>
 8001034:	eef7 0a08 	vmov.f32	s1, #120	@ 0x3fc00000  1.5
 8001038:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8001104 <main+0x134>
 800103c:	4b32      	ldr	r3, [pc, #200]	@ (8001108 <main+0x138>)
 800103e:	2200      	movs	r2, #0
 8001040:	4931      	ldr	r1, [pc, #196]	@ (8001108 <main+0x138>)
 8001042:	f7ff fa69 	bl	8000518 <_ZN5MotorC1EP17TIM_HandleTypeDefmS1_mfff>

  float target_speed = 0.0f;
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	647b      	str	r3, [r7, #68]	@ 0x44
  float step = 0.05f; // Speed increment step
 800104c:	4b2f      	ldr	r3, [pc, #188]	@ (800110c <main+0x13c>)
 800104e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  bool increasing = true;
 8001050:	2301      	movs	r3, #1
 8001052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  test();
 8001056:	f7ff f8b7 	bl	80001c8 <_Z4testv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      // Set motor target speed
      testMotor.setTargetSpeed(target_speed);
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff faa8 	bl	80005b6 <_ZN5Motor14setTargetSpeedEf>

      // Simulate measured speed as zero for testing (replace later with encoder feedback)
      float simulated_speed = 0.0f;
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	63bb      	str	r3, [r7, #56]	@ 0x38
      testMotor.updatePWM(simulated_speed, 0.01f);
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001110 <main+0x140>
 8001072:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff facc 	bl	8000614 <_ZN5Motor9updatePWMEff>

      HAL_Delay(100);
 800107c:	2064      	movs	r0, #100	@ 0x64
 800107e:	f001 f8c3 	bl	8002208 <HAL_Delay>

      // Increase or decrease speed with safe access to max speed
      if (increasing)
 8001082:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001086:	2b00      	cmp	r3, #0
 8001088:	d023      	beq.n	80010d2 <main+0x102>
      {
          target_speed += step;
 800108a:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800108e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001092:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001096:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
          if (target_speed >= testMotor.getMaxSpeedMps())
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fbfc 	bl	800089a <_ZNK5Motor14getMaxSpeedMpsEv>
 80010a2:	eeb0 7a40 	vmov.f32	s14, s0
 80010a6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80010aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b2:	bfac      	ite	ge
 80010b4:	2301      	movge	r3, #1
 80010b6:	2300      	movlt	r3, #0
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0cd      	beq.n	800105a <main+0x8a>
          {
              target_speed = testMotor.getMaxSpeedMps();
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fbea 	bl	800089a <_ZNK5Motor14getMaxSpeedMpsEv>
 80010c6:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
              increasing = false;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80010d0:	e7c3      	b.n	800105a <main+0x8a>
          }
      }
      else
      {
          target_speed -= step;
 80010d2:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80010d6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80010da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010de:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
          if (target_speed <= 0.0f)
 80010e2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80010e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ee:	d805      	bhi.n	80010fc <main+0x12c>
          {
              target_speed = 0.0f;
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	647b      	str	r3, [r7, #68]	@ 0x44
              increasing = true;
 80010f6:	2301      	movs	r3, #1
 80010f8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43


      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
  }
 80010fc:	e7ad      	b.n	800105a <main+0x8a>
 80010fe:	bf00      	nop
 8001100:	447a0000 	.word	0x447a0000
 8001104:	3dcccccd 	.word	0x3dcccccd
 8001108:	2000024c 	.word	0x2000024c
 800110c:	3d4ccccd 	.word	0x3d4ccccd
 8001110:	3c23d70a 	.word	0x3c23d70a

08001114 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b09a      	sub	sp, #104	@ 0x68
 8001118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800111e:	2228      	movs	r2, #40	@ 0x28
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f005 fd22 	bl	8006b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001128:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001138:	463b      	mov	r3, r7
 800113a:	222c      	movs	r2, #44	@ 0x2c
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f005 fd14 	bl	8006b6c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001144:	2303      	movs	r3, #3
 8001146:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001148:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800114c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001152:	2301      	movs	r3, #1
 8001154:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001156:	2310      	movs	r3, #16
 8001158:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115a:	2302      	movs	r3, #2
 800115c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800115e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001162:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001164:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001168:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800116e:	4618      	mov	r0, r3
 8001170:	f002 fbda 	bl	8003928 <HAL_RCC_OscConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	bf14      	ite	ne
 800117a:	2301      	movne	r3, #1
 800117c:	2300      	moveq	r3, #0
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <_Z18SystemClock_Configv+0x74>
  {
    Error_Handler();
 8001184:	f000 f840 	bl	8001208 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001188:	230f      	movs	r3, #15
 800118a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118c:	2302      	movs	r3, #2
 800118e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001194:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001198:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800119e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011a2:	2101      	movs	r1, #1
 80011a4:	4618      	mov	r0, r3
 80011a6:	f003 fbfd 	bl	80049a4 <HAL_RCC_ClockConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	bf14      	ite	ne
 80011b0:	2301      	movne	r3, #1
 80011b2:	2300      	moveq	r3, #0
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 80011ba:	f000 f825 	bl	8001208 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80011be:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <_Z18SystemClock_Configv+0xf0>)
 80011c0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80011d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011da:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PCLK2_DIV2;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e0:	463b      	mov	r3, r7
 80011e2:	4618      	mov	r0, r3
 80011e4:	f003 fdfe 	bl	8004de4 <HAL_RCCEx_PeriphCLKConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	bf14      	ite	ne
 80011ee:	2301      	movne	r3, #1
 80011f0:	2300      	moveq	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 80011f8:	f000 f806 	bl	8001208 <Error_Handler>
  }
}
 80011fc:	bf00      	nop
 80011fe:	3768      	adds	r7, #104	@ 0x68
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	000200e7 	.word	0x000200e7

08001208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800120c:	b672      	cpsid	i
}
 800120e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <Error_Handler+0x8>

08001214 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001218:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <MX_SPI1_Init+0x74>)
 800121a:	4a1c      	ldr	r2, [pc, #112]	@ (800128c <MX_SPI1_Init+0x78>)
 800121c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800121e:	4b1a      	ldr	r3, [pc, #104]	@ (8001288 <MX_SPI1_Init+0x74>)
 8001220:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001224:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001226:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <MX_SPI1_Init+0x74>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800122c:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <MX_SPI1_Init+0x74>)
 800122e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001232:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001234:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <MX_SPI1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800123a:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <MX_SPI1_Init+0x74>)
 800123c:	2200      	movs	r2, #0
 800123e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001240:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <MX_SPI1_Init+0x74>)
 8001242:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001246:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001248:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <MX_SPI1_Init+0x74>)
 800124a:	2208      	movs	r2, #8
 800124c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <MX_SPI1_Init+0x74>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001254:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <MX_SPI1_Init+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800125a:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <MX_SPI1_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001260:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <MX_SPI1_Init+0x74>)
 8001262:	2207      	movs	r2, #7
 8001264:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001266:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <MX_SPI1_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <MX_SPI1_Init+0x74>)
 800126e:	2208      	movs	r2, #8
 8001270:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001272:	4805      	ldr	r0, [pc, #20]	@ (8001288 <MX_SPI1_Init+0x74>)
 8001274:	f003 ff2a 	bl	80050cc <HAL_SPI_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800127e:	f7ff ffc3 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000150 	.word	0x20000150
 800128c:	40013000 	.word	0x40013000

08001290 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	@ 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a17      	ldr	r2, [pc, #92]	@ (800130c <HAL_SPI_MspInit+0x7c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d128      	bne.n	8001304 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012b2:	4b17      	ldr	r3, [pc, #92]	@ (8001310 <HAL_SPI_MspInit+0x80>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	4a16      	ldr	r2, [pc, #88]	@ (8001310 <HAL_SPI_MspInit+0x80>)
 80012b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012bc:	6193      	str	r3, [r2, #24]
 80012be:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <HAL_SPI_MspInit+0x80>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <HAL_SPI_MspInit+0x80>)
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	4a10      	ldr	r2, [pc, #64]	@ (8001310 <HAL_SPI_MspInit+0x80>)
 80012d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80012d4:	6153      	str	r3, [r2, #20]
 80012d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <HAL_SPI_MspInit+0x80>)
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> SPI1_NSS
    PC7     ------> SPI1_SCK
    PC8     ------> SPI1_MISO
    PC9     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80012e2:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80012e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012f4:	2305      	movs	r3, #5
 80012f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4619      	mov	r1, r3
 80012fe:	4805      	ldr	r0, [pc, #20]	@ (8001314 <HAL_SPI_MspInit+0x84>)
 8001300:	f001 fbfe 	bl	8002b00 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001304:	bf00      	nop
 8001306:	3728      	adds	r7, #40	@ 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40013000 	.word	0x40013000
 8001310:	40021000 	.word	0x40021000
 8001314:	48000800 	.word	0x48000800

08001318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <HAL_MspInit+0x44>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	4a0e      	ldr	r2, [pc, #56]	@ (800135c <HAL_MspInit+0x44>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6193      	str	r3, [r2, #24]
 800132a:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <HAL_MspInit+0x44>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001336:	4b09      	ldr	r3, [pc, #36]	@ (800135c <HAL_MspInit+0x44>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	4a08      	ldr	r2, [pc, #32]	@ (800135c <HAL_MspInit+0x44>)
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001340:	61d3      	str	r3, [r2, #28]
 8001342:	4b06      	ldr	r3, [pc, #24]	@ (800135c <HAL_MspInit+0x44>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40021000 	.word	0x40021000

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <NMI_Handler+0x4>

08001368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <HardFault_Handler+0x4>

08001370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <MemManage_Handler+0x4>

08001378 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <BusFault_Handler+0x4>

08001380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <UsageFault_Handler+0x4>

08001388 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b6:	f000 ff07 	bl	80021c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013c4:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <SystemInit+0x20>)
 80013c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ca:	4a05      	ldr	r2, [pc, #20]	@ (80013e0 <SystemInit+0x20>)
 80013cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim17;
TIM_HandleTypeDef htim19;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08e      	sub	sp, #56	@ 0x38
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f8:	f107 0320 	add.w	r3, r7, #32
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001414:	4b3d      	ldr	r3, [pc, #244]	@ (800150c <MX_TIM2_Init+0x128>)
 8001416:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800141a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 800141c:	4b3b      	ldr	r3, [pc, #236]	@ (800150c <MX_TIM2_Init+0x128>)
 800141e:	222f      	movs	r2, #47	@ 0x2f
 8001420:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001422:	4b3a      	ldr	r3, [pc, #232]	@ (800150c <MX_TIM2_Init+0x128>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001428:	4b38      	ldr	r3, [pc, #224]	@ (800150c <MX_TIM2_Init+0x128>)
 800142a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800142e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001430:	4b36      	ldr	r3, [pc, #216]	@ (800150c <MX_TIM2_Init+0x128>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001436:	4b35      	ldr	r3, [pc, #212]	@ (800150c <MX_TIM2_Init+0x128>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800143c:	4833      	ldr	r0, [pc, #204]	@ (800150c <MX_TIM2_Init+0x128>)
 800143e:	f003 fef0 	bl	8005222 <HAL_TIM_Base_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001448:	f7ff fede 	bl	8001208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001450:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001452:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001456:	4619      	mov	r1, r3
 8001458:	482c      	ldr	r0, [pc, #176]	@ (800150c <MX_TIM2_Init+0x128>)
 800145a:	f004 f9f9 	bl	8005850 <HAL_TIM_ConfigClockSource>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001464:	f7ff fed0 	bl	8001208 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001468:	4828      	ldr	r0, [pc, #160]	@ (800150c <MX_TIM2_Init+0x128>)
 800146a:	f003 ff29 	bl	80052c0 <HAL_TIM_PWM_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001474:	f7ff fec8 	bl	8001208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001480:	f107 0320 	add.w	r3, r7, #32
 8001484:	4619      	mov	r1, r3
 8001486:	4821      	ldr	r0, [pc, #132]	@ (800150c <MX_TIM2_Init+0x128>)
 8001488:	f004 fe8e 	bl	80061a8 <HAL_TIMEx_MasterConfigSynchronization>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001492:	f7ff feb9 	bl	8001208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001496:	2360      	movs	r3, #96	@ 0x60
 8001498:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2200      	movs	r2, #0
 80014aa:	4619      	mov	r1, r3
 80014ac:	4817      	ldr	r0, [pc, #92]	@ (800150c <MX_TIM2_Init+0x128>)
 80014ae:	f004 f90d 	bl	80056cc <HAL_TIM_PWM_ConfigChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80014b8:	f7ff fea6 	bl	8001208 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2204      	movs	r2, #4
 80014c0:	4619      	mov	r1, r3
 80014c2:	4812      	ldr	r0, [pc, #72]	@ (800150c <MX_TIM2_Init+0x128>)
 80014c4:	f004 f902 	bl	80056cc <HAL_TIM_PWM_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80014ce:	f7ff fe9b 	bl	8001208 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2208      	movs	r2, #8
 80014d6:	4619      	mov	r1, r3
 80014d8:	480c      	ldr	r0, [pc, #48]	@ (800150c <MX_TIM2_Init+0x128>)
 80014da:	f004 f8f7 	bl	80056cc <HAL_TIM_PWM_ConfigChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80014e4:	f7ff fe90 	bl	8001208 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	220c      	movs	r2, #12
 80014ec:	4619      	mov	r1, r3
 80014ee:	4807      	ldr	r0, [pc, #28]	@ (800150c <MX_TIM2_Init+0x128>)
 80014f0:	f004 f8ec 	bl	80056cc <HAL_TIM_PWM_ConfigChannel>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 80014fa:	f7ff fe85 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014fe:	4803      	ldr	r0, [pc, #12]	@ (800150c <MX_TIM2_Init+0x128>)
 8001500:	f000 fbae 	bl	8001c60 <HAL_TIM_MspPostInit>

}
 8001504:	bf00      	nop
 8001506:	3738      	adds	r7, #56	@ 0x38
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200001b4 	.word	0x200001b4

08001510 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001516:	f107 0310 	add.w	r3, r7, #16
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001520:	463b      	mov	r3, r7
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800152c:	4b25      	ldr	r3, [pc, #148]	@ (80015c4 <MX_TIM3_Init+0xb4>)
 800152e:	4a26      	ldr	r2, [pc, #152]	@ (80015c8 <MX_TIM3_Init+0xb8>)
 8001530:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001532:	4b24      	ldr	r3, [pc, #144]	@ (80015c4 <MX_TIM3_Init+0xb4>)
 8001534:	2200      	movs	r2, #0
 8001536:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001538:	4b22      	ldr	r3, [pc, #136]	@ (80015c4 <MX_TIM3_Init+0xb4>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800153e:	4b21      	ldr	r3, [pc, #132]	@ (80015c4 <MX_TIM3_Init+0xb4>)
 8001540:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001544:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001546:	4b1f      	ldr	r3, [pc, #124]	@ (80015c4 <MX_TIM3_Init+0xb4>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154c:	4b1d      	ldr	r3, [pc, #116]	@ (80015c4 <MX_TIM3_Init+0xb4>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001552:	481c      	ldr	r0, [pc, #112]	@ (80015c4 <MX_TIM3_Init+0xb4>)
 8001554:	f003 ffce 	bl	80054f4 <HAL_TIM_IC_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800155e:	f7ff fe53 	bl	8001208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800156a:	f107 0310 	add.w	r3, r7, #16
 800156e:	4619      	mov	r1, r3
 8001570:	4814      	ldr	r0, [pc, #80]	@ (80015c4 <MX_TIM3_Init+0xb4>)
 8001572:	f004 fe19 	bl	80061a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800157c:	f7ff fe44 	bl	8001208 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001580:	2300      	movs	r3, #0
 8001582:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001584:	2301      	movs	r3, #1
 8001586:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001590:	463b      	mov	r3, r7
 8001592:	2204      	movs	r2, #4
 8001594:	4619      	mov	r1, r3
 8001596:	480b      	ldr	r0, [pc, #44]	@ (80015c4 <MX_TIM3_Init+0xb4>)
 8001598:	f003 fffb 	bl	8005592 <HAL_TIM_IC_ConfigChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80015a2:	f7ff fe31 	bl	8001208 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80015a6:	463b      	mov	r3, r7
 80015a8:	220c      	movs	r2, #12
 80015aa:	4619      	mov	r1, r3
 80015ac:	4805      	ldr	r0, [pc, #20]	@ (80015c4 <MX_TIM3_Init+0xb4>)
 80015ae:	f003 fff0 	bl	8005592 <HAL_TIM_IC_ConfigChannel>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80015b8:	f7ff fe26 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015bc:	bf00      	nop
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000200 	.word	0x20000200
 80015c8:	40000400 	.word	0x40000400

080015cc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08e      	sub	sp, #56	@ 0x38
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e0:	f107 0320 	add.w	r3, r7, #32
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
 80015f8:	615a      	str	r2, [r3, #20]
 80015fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015fc:	4b3d      	ldr	r3, [pc, #244]	@ (80016f4 <MX_TIM5_Init+0x128>)
 80015fe:	4a3e      	ldr	r2, [pc, #248]	@ (80016f8 <MX_TIM5_Init+0x12c>)
 8001600:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 48-1;
 8001602:	4b3c      	ldr	r3, [pc, #240]	@ (80016f4 <MX_TIM5_Init+0x128>)
 8001604:	222f      	movs	r2, #47	@ 0x2f
 8001606:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001608:	4b3a      	ldr	r3, [pc, #232]	@ (80016f4 <MX_TIM5_Init+0x128>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 800160e:	4b39      	ldr	r3, [pc, #228]	@ (80016f4 <MX_TIM5_Init+0x128>)
 8001610:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001614:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001616:	4b37      	ldr	r3, [pc, #220]	@ (80016f4 <MX_TIM5_Init+0x128>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161c:	4b35      	ldr	r3, [pc, #212]	@ (80016f4 <MX_TIM5_Init+0x128>)
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001622:	4834      	ldr	r0, [pc, #208]	@ (80016f4 <MX_TIM5_Init+0x128>)
 8001624:	f003 fdfd 	bl	8005222 <HAL_TIM_Base_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800162e:	f7ff fdeb 	bl	8001208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001632:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001636:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001638:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800163c:	4619      	mov	r1, r3
 800163e:	482d      	ldr	r0, [pc, #180]	@ (80016f4 <MX_TIM5_Init+0x128>)
 8001640:	f004 f906 	bl	8005850 <HAL_TIM_ConfigClockSource>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800164a:	f7ff fddd 	bl	8001208 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800164e:	4829      	ldr	r0, [pc, #164]	@ (80016f4 <MX_TIM5_Init+0x128>)
 8001650:	f003 fe36 	bl	80052c0 <HAL_TIM_PWM_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800165a:	f7ff fdd5 	bl	8001208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001666:	f107 0320 	add.w	r3, r7, #32
 800166a:	4619      	mov	r1, r3
 800166c:	4821      	ldr	r0, [pc, #132]	@ (80016f4 <MX_TIM5_Init+0x128>)
 800166e:	f004 fd9b 	bl	80061a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001678:	f7ff fdc6 	bl	8001208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800167c:	2360      	movs	r3, #96	@ 0x60
 800167e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	2200      	movs	r2, #0
 8001690:	4619      	mov	r1, r3
 8001692:	4818      	ldr	r0, [pc, #96]	@ (80016f4 <MX_TIM5_Init+0x128>)
 8001694:	f004 f81a 	bl	80056cc <HAL_TIM_PWM_ConfigChannel>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800169e:	f7ff fdb3 	bl	8001208 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2204      	movs	r2, #4
 80016a6:	4619      	mov	r1, r3
 80016a8:	4812      	ldr	r0, [pc, #72]	@ (80016f4 <MX_TIM5_Init+0x128>)
 80016aa:	f004 f80f 	bl	80056cc <HAL_TIM_PWM_ConfigChannel>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 80016b4:	f7ff fda8 	bl	8001208 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	2208      	movs	r2, #8
 80016bc:	4619      	mov	r1, r3
 80016be:	480d      	ldr	r0, [pc, #52]	@ (80016f4 <MX_TIM5_Init+0x128>)
 80016c0:	f004 f804 	bl	80056cc <HAL_TIM_PWM_ConfigChannel>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM5_Init+0x102>
  {
    Error_Handler();
 80016ca:	f7ff fd9d 	bl	8001208 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	220c      	movs	r2, #12
 80016d2:	4619      	mov	r1, r3
 80016d4:	4807      	ldr	r0, [pc, #28]	@ (80016f4 <MX_TIM5_Init+0x128>)
 80016d6:	f003 fff9 	bl	80056cc <HAL_TIM_PWM_ConfigChannel>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM5_Init+0x118>
  {
    Error_Handler();
 80016e0:	f7ff fd92 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80016e4:	4803      	ldr	r0, [pc, #12]	@ (80016f4 <MX_TIM5_Init+0x128>)
 80016e6:	f000 fabb 	bl	8001c60 <HAL_TIM_MspPostInit>

}
 80016ea:	bf00      	nop
 80016ec:	3738      	adds	r7, #56	@ 0x38
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	2000024c 	.word	0x2000024c
 80016f8:	40000c00 	.word	0x40000c00

080016fc <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001702:	463b      	mov	r3, r7
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800170e:	4b1d      	ldr	r3, [pc, #116]	@ (8001784 <MX_TIM13_Init+0x88>)
 8001710:	4a1d      	ldr	r2, [pc, #116]	@ (8001788 <MX_TIM13_Init+0x8c>)
 8001712:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8001714:	4b1b      	ldr	r3, [pc, #108]	@ (8001784 <MX_TIM13_Init+0x88>)
 8001716:	2200      	movs	r2, #0
 8001718:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171a:	4b1a      	ldr	r3, [pc, #104]	@ (8001784 <MX_TIM13_Init+0x88>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001720:	4b18      	ldr	r3, [pc, #96]	@ (8001784 <MX_TIM13_Init+0x88>)
 8001722:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001726:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001728:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <MX_TIM13_Init+0x88>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172e:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <MX_TIM13_Init+0x88>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001734:	4813      	ldr	r0, [pc, #76]	@ (8001784 <MX_TIM13_Init+0x88>)
 8001736:	f003 fd74 	bl	8005222 <HAL_TIM_Base_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM13_Init+0x48>
  {
    Error_Handler();
 8001740:	f7ff fd62 	bl	8001208 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8001744:	480f      	ldr	r0, [pc, #60]	@ (8001784 <MX_TIM13_Init+0x88>)
 8001746:	f003 fed5 	bl	80054f4 <HAL_TIM_IC_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM13_Init+0x58>
  {
    Error_Handler();
 8001750:	f7ff fd5a 	bl	8001208 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001754:	2300      	movs	r3, #0
 8001756:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001758:	2301      	movs	r3, #1
 800175a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001764:	463b      	mov	r3, r7
 8001766:	2200      	movs	r2, #0
 8001768:	4619      	mov	r1, r3
 800176a:	4806      	ldr	r0, [pc, #24]	@ (8001784 <MX_TIM13_Init+0x88>)
 800176c:	f003 ff11 	bl	8005592 <HAL_TIM_IC_ConfigChannel>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM13_Init+0x7e>
  {
    Error_Handler();
 8001776:	f7ff fd47 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000298 	.word	0x20000298
 8001788:	40001c00 	.word	0x40001c00

0800178c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	@ 0x28
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001792:	f107 0318 	add.w	r3, r7, #24
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a0:	f107 0310 	add.w	r3, r7, #16
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017aa:	463b      	mov	r3, r7
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80017b6:	4b2d      	ldr	r3, [pc, #180]	@ (800186c <MX_TIM15_Init+0xe0>)
 80017b8:	4a2d      	ldr	r2, [pc, #180]	@ (8001870 <MX_TIM15_Init+0xe4>)
 80017ba:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80017bc:	4b2b      	ldr	r3, [pc, #172]	@ (800186c <MX_TIM15_Init+0xe0>)
 80017be:	2200      	movs	r2, #0
 80017c0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c2:	4b2a      	ldr	r3, [pc, #168]	@ (800186c <MX_TIM15_Init+0xe0>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80017c8:	4b28      	ldr	r3, [pc, #160]	@ (800186c <MX_TIM15_Init+0xe0>)
 80017ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017ce:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d0:	4b26      	ldr	r3, [pc, #152]	@ (800186c <MX_TIM15_Init+0xe0>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80017d6:	4b25      	ldr	r3, [pc, #148]	@ (800186c <MX_TIM15_Init+0xe0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017dc:	4b23      	ldr	r3, [pc, #140]	@ (800186c <MX_TIM15_Init+0xe0>)
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80017e2:	4822      	ldr	r0, [pc, #136]	@ (800186c <MX_TIM15_Init+0xe0>)
 80017e4:	f003 fd1d 	bl	8005222 <HAL_TIM_Base_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM15_Init+0x66>
  {
    Error_Handler();
 80017ee:	f7ff fd0b 	bl	8001208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017f6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80017f8:	f107 0318 	add.w	r3, r7, #24
 80017fc:	4619      	mov	r1, r3
 80017fe:	481b      	ldr	r0, [pc, #108]	@ (800186c <MX_TIM15_Init+0xe0>)
 8001800:	f004 f826 	bl	8005850 <HAL_TIM_ConfigClockSource>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM15_Init+0x82>
  {
    Error_Handler();
 800180a:	f7ff fcfd 	bl	8001208 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 800180e:	4817      	ldr	r0, [pc, #92]	@ (800186c <MX_TIM15_Init+0xe0>)
 8001810:	f003 fe70 	bl	80054f4 <HAL_TIM_IC_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800181a:	f7ff fcf5 	bl	8001208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001826:	f107 0310 	add.w	r3, r7, #16
 800182a:	4619      	mov	r1, r3
 800182c:	480f      	ldr	r0, [pc, #60]	@ (800186c <MX_TIM15_Init+0xe0>)
 800182e:	f004 fcbb 	bl	80061a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM15_Init+0xb0>
  {
    Error_Handler();
 8001838:	f7ff fce6 	bl	8001208 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800183c:	2300      	movs	r3, #0
 800183e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001840:	2301      	movs	r3, #1
 8001842:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800184c:	463b      	mov	r3, r7
 800184e:	2200      	movs	r2, #0
 8001850:	4619      	mov	r1, r3
 8001852:	4806      	ldr	r0, [pc, #24]	@ (800186c <MX_TIM15_Init+0xe0>)
 8001854:	f003 fe9d 	bl	8005592 <HAL_TIM_IC_ConfigChannel>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM15_Init+0xd6>
  {
    Error_Handler();
 800185e:	f7ff fcd3 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001862:	bf00      	nop
 8001864:	3728      	adds	r7, #40	@ 0x28
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	200002e4 	.word	0x200002e4
 8001870:	40014000 	.word	0x40014000

08001874 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b090      	sub	sp, #64	@ 0x40
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800187a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
 8001888:	611a      	str	r2, [r3, #16]
 800188a:	615a      	str	r2, [r3, #20]
 800188c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	2220      	movs	r2, #32
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f005 f969 	bl	8006b6c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800189a:	4b30      	ldr	r3, [pc, #192]	@ (800195c <MX_TIM17_Init+0xe8>)
 800189c:	4a30      	ldr	r2, [pc, #192]	@ (8001960 <MX_TIM17_Init+0xec>)
 800189e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80018a0:	4b2e      	ldr	r3, [pc, #184]	@ (800195c <MX_TIM17_Init+0xe8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a6:	4b2d      	ldr	r3, [pc, #180]	@ (800195c <MX_TIM17_Init+0xe8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80018ac:	4b2b      	ldr	r3, [pc, #172]	@ (800195c <MX_TIM17_Init+0xe8>)
 80018ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018b2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b4:	4b29      	ldr	r3, [pc, #164]	@ (800195c <MX_TIM17_Init+0xe8>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80018ba:	4b28      	ldr	r3, [pc, #160]	@ (800195c <MX_TIM17_Init+0xe8>)
 80018bc:	2200      	movs	r2, #0
 80018be:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c0:	4b26      	ldr	r3, [pc, #152]	@ (800195c <MX_TIM17_Init+0xe8>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80018c6:	4825      	ldr	r0, [pc, #148]	@ (800195c <MX_TIM17_Init+0xe8>)
 80018c8:	f003 fcab 	bl	8005222 <HAL_TIM_Base_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80018d2:	f7ff fc99 	bl	8001208 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80018d6:	4821      	ldr	r0, [pc, #132]	@ (800195c <MX_TIM17_Init+0xe8>)
 80018d8:	f003 fcf2 	bl	80052c0 <HAL_TIM_PWM_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80018e2:	f7ff fc91 	bl	8001208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018e6:	2360      	movs	r3, #96	@ 0x60
 80018e8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ee:	2300      	movs	r3, #0
 80018f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018f2:	2300      	movs	r3, #0
 80018f4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018fe:	2300      	movs	r3, #0
 8001900:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001906:	2200      	movs	r2, #0
 8001908:	4619      	mov	r1, r3
 800190a:	4814      	ldr	r0, [pc, #80]	@ (800195c <MX_TIM17_Init+0xe8>)
 800190c:	f003 fede 	bl	80056cc <HAL_TIM_PWM_ConfigChannel>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001916:	f7ff fc77 	bl	8001208 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800192e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001932:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	4619      	mov	r1, r3
 800193c:	4807      	ldr	r0, [pc, #28]	@ (800195c <MX_TIM17_Init+0xe8>)
 800193e:	f004 fca7 	bl	8006290 <HAL_TIMEx_ConfigBreakDeadTime>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM17_Init+0xd8>
  {
    Error_Handler();
 8001948:	f7ff fc5e 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800194c:	4803      	ldr	r0, [pc, #12]	@ (800195c <MX_TIM17_Init+0xe8>)
 800194e:	f000 f987 	bl	8001c60 <HAL_TIM_MspPostInit>

}
 8001952:	bf00      	nop
 8001954:	3740      	adds	r7, #64	@ 0x40
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000330 	.word	0x20000330
 8001960:	40014800 	.word	0x40014800

08001964 <MX_TIM19_Init>:
/* TIM19 init function */
void MX_TIM19_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	@ 0x28
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM19_Init 0 */

  /* USER CODE END TIM19_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196a:	f107 0320 	add.w	r3, r7, #32
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
 8001980:	611a      	str	r2, [r3, #16]
 8001982:	615a      	str	r2, [r3, #20]
 8001984:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM19_Init 1 */

  /* USER CODE END TIM19_Init 1 */
  htim19.Instance = TIM19;
 8001986:	4b22      	ldr	r3, [pc, #136]	@ (8001a10 <MX_TIM19_Init+0xac>)
 8001988:	4a22      	ldr	r2, [pc, #136]	@ (8001a14 <MX_TIM19_Init+0xb0>)
 800198a:	601a      	str	r2, [r3, #0]
  htim19.Init.Prescaler = 0;
 800198c:	4b20      	ldr	r3, [pc, #128]	@ (8001a10 <MX_TIM19_Init+0xac>)
 800198e:	2200      	movs	r2, #0
 8001990:	605a      	str	r2, [r3, #4]
  htim19.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001992:	4b1f      	ldr	r3, [pc, #124]	@ (8001a10 <MX_TIM19_Init+0xac>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  htim19.Init.Period = 65535;
 8001998:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <MX_TIM19_Init+0xac>)
 800199a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800199e:	60da      	str	r2, [r3, #12]
  htim19.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a10 <MX_TIM19_Init+0xac>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	611a      	str	r2, [r3, #16]
  htim19.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a10 <MX_TIM19_Init+0xac>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim19) != HAL_OK)
 80019ac:	4818      	ldr	r0, [pc, #96]	@ (8001a10 <MX_TIM19_Init+0xac>)
 80019ae:	f003 fc87 	bl	80052c0 <HAL_TIM_PWM_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM19_Init+0x58>
  {
    Error_Handler();
 80019b8:	f7ff fc26 	bl	8001208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim19, &sMasterConfig) != HAL_OK)
 80019c4:	f107 0320 	add.w	r3, r7, #32
 80019c8:	4619      	mov	r1, r3
 80019ca:	4811      	ldr	r0, [pc, #68]	@ (8001a10 <MX_TIM19_Init+0xac>)
 80019cc:	f004 fbec 	bl	80061a8 <HAL_TIMEx_MasterConfigSynchronization>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM19_Init+0x76>
  {
    Error_Handler();
 80019d6:	f7ff fc17 	bl	8001208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019da:	2360      	movs	r3, #96	@ 0x60
 80019dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim19, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	2208      	movs	r2, #8
 80019ee:	4619      	mov	r1, r3
 80019f0:	4807      	ldr	r0, [pc, #28]	@ (8001a10 <MX_TIM19_Init+0xac>)
 80019f2:	f003 fe6b 	bl	80056cc <HAL_TIM_PWM_ConfigChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM19_Init+0x9c>
  {
    Error_Handler();
 80019fc:	f7ff fc04 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM19_Init 2 */

  /* USER CODE END TIM19_Init 2 */
  HAL_TIM_MspPostInit(&htim19);
 8001a00:	4803      	ldr	r0, [pc, #12]	@ (8001a10 <MX_TIM19_Init+0xac>)
 8001a02:	f000 f92d 	bl	8001c60 <HAL_TIM_MspPostInit>

}
 8001a06:	bf00      	nop
 8001a08:	3728      	adds	r7, #40	@ 0x28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	2000037c 	.word	0x2000037c
 8001a14:	40015c00 	.word	0x40015c00

08001a18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08e      	sub	sp, #56	@ 0x38
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a38:	d10c      	bne.n	8001a54 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a3a:	4b48      	ldr	r3, [pc, #288]	@ (8001b5c <HAL_TIM_Base_MspInit+0x144>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	4a47      	ldr	r2, [pc, #284]	@ (8001b5c <HAL_TIM_Base_MspInit+0x144>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	61d3      	str	r3, [r2, #28]
 8001a46:	4b45      	ldr	r3, [pc, #276]	@ (8001b5c <HAL_TIM_Base_MspInit+0x144>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	623b      	str	r3, [r7, #32]
 8001a50:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001a52:	e07f      	b.n	8001b54 <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM5)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a41      	ldr	r2, [pc, #260]	@ (8001b60 <HAL_TIM_Base_MspInit+0x148>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d10c      	bne.n	8001a78 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a5e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b5c <HAL_TIM_Base_MspInit+0x144>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	4a3e      	ldr	r2, [pc, #248]	@ (8001b5c <HAL_TIM_Base_MspInit+0x144>)
 8001a64:	f043 0308 	orr.w	r3, r3, #8
 8001a68:	61d3      	str	r3, [r2, #28]
 8001a6a:	4b3c      	ldr	r3, [pc, #240]	@ (8001b5c <HAL_TIM_Base_MspInit+0x144>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	61fb      	str	r3, [r7, #28]
 8001a74:	69fb      	ldr	r3, [r7, #28]
}
 8001a76:	e06d      	b.n	8001b54 <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM13)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a39      	ldr	r2, [pc, #228]	@ (8001b64 <HAL_TIM_Base_MspInit+0x14c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d128      	bne.n	8001ad4 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001a82:	4b36      	ldr	r3, [pc, #216]	@ (8001b5c <HAL_TIM_Base_MspInit+0x144>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	4a35      	ldr	r2, [pc, #212]	@ (8001b5c <HAL_TIM_Base_MspInit+0x144>)
 8001a88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a8c:	61d3      	str	r3, [r2, #28]
 8001a8e:	4b33      	ldr	r3, [pc, #204]	@ (8001b5c <HAL_TIM_Base_MspInit+0x144>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a96:	61bb      	str	r3, [r7, #24]
 8001a98:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9a:	4b30      	ldr	r3, [pc, #192]	@ (8001b5c <HAL_TIM_Base_MspInit+0x144>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	4a2f      	ldr	r2, [pc, #188]	@ (8001b5c <HAL_TIM_Base_MspInit+0x144>)
 8001aa0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001aa4:	6153      	str	r3, [r2, #20]
 8001aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8001b5c <HAL_TIM_Base_MspInit+0x144>)
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = encoder1_A_Pin;
 8001ab2:	2310      	movs	r3, #16
 8001ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM13;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(encoder1_A_GPIO_Port, &GPIO_InitStruct);
 8001ac6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aca:	4619      	mov	r1, r3
 8001acc:	4826      	ldr	r0, [pc, #152]	@ (8001b68 <HAL_TIM_Base_MspInit+0x150>)
 8001ace:	f001 f817 	bl	8002b00 <HAL_GPIO_Init>
}
 8001ad2:	e03f      	b.n	8001b54 <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM15)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a24      	ldr	r2, [pc, #144]	@ (8001b6c <HAL_TIM_Base_MspInit+0x154>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d129      	bne.n	8001b32 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001ade:	4b1f      	ldr	r3, [pc, #124]	@ (8001b5c <HAL_TIM_Base_MspInit+0x144>)
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b5c <HAL_TIM_Base_MspInit+0x144>)
 8001ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ae8:	6193      	str	r3, [r2, #24]
 8001aea:	4b1c      	ldr	r3, [pc, #112]	@ (8001b5c <HAL_TIM_Base_MspInit+0x144>)
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	4b19      	ldr	r3, [pc, #100]	@ (8001b5c <HAL_TIM_Base_MspInit+0x144>)
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	4a18      	ldr	r2, [pc, #96]	@ (8001b5c <HAL_TIM_Base_MspInit+0x144>)
 8001afc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b00:	6153      	str	r3, [r2, #20]
 8001b02:	4b16      	ldr	r3, [pc, #88]	@ (8001b5c <HAL_TIM_Base_MspInit+0x144>)
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = encoder4_A_Pin;
 8001b0e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001b20:	2301      	movs	r3, #1
 8001b22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(encoder4_A_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4811      	ldr	r0, [pc, #68]	@ (8001b70 <HAL_TIM_Base_MspInit+0x158>)
 8001b2c:	f000 ffe8 	bl	8002b00 <HAL_GPIO_Init>
}
 8001b30:	e010      	b.n	8001b54 <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM17)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a0f      	ldr	r2, [pc, #60]	@ (8001b74 <HAL_TIM_Base_MspInit+0x15c>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d10b      	bne.n	8001b54 <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001b3c:	4b07      	ldr	r3, [pc, #28]	@ (8001b5c <HAL_TIM_Base_MspInit+0x144>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	4a06      	ldr	r2, [pc, #24]	@ (8001b5c <HAL_TIM_Base_MspInit+0x144>)
 8001b42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b46:	6193      	str	r3, [r2, #24]
 8001b48:	4b04      	ldr	r3, [pc, #16]	@ (8001b5c <HAL_TIM_Base_MspInit+0x144>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]
}
 8001b54:	bf00      	nop
 8001b56:	3738      	adds	r7, #56	@ 0x38
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40000c00 	.word	0x40000c00
 8001b64:	40001c00 	.word	0x40001c00
 8001b68:	48000800 	.word	0x48000800
 8001b6c:	40014000 	.word	0x40014000
 8001b70:	48000400 	.word	0x48000400
 8001b74:	40014800 	.word	0x40014800

08001b78 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	@ 0x28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a1f      	ldr	r2, [pc, #124]	@ (8001c14 <HAL_TIM_IC_MspInit+0x9c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d137      	bne.n	8001c0a <HAL_TIM_IC_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c18 <HAL_TIM_IC_MspInit+0xa0>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8001c18 <HAL_TIM_IC_MspInit+0xa0>)
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	61d3      	str	r3, [r2, #28]
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c18 <HAL_TIM_IC_MspInit+0xa0>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb2:	4b19      	ldr	r3, [pc, #100]	@ (8001c18 <HAL_TIM_IC_MspInit+0xa0>)
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	4a18      	ldr	r2, [pc, #96]	@ (8001c18 <HAL_TIM_IC_MspInit+0xa0>)
 8001bb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bbc:	6153      	str	r3, [r2, #20]
 8001bbe:	4b16      	ldr	r3, [pc, #88]	@ (8001c18 <HAL_TIM_IC_MspInit+0xa0>)
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH2
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = encoder2_A_Pin;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 8001bda:	230a      	movs	r3, #10
 8001bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(encoder2_A_GPIO_Port, &GPIO_InitStruct);
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	4619      	mov	r1, r3
 8001be4:	480d      	ldr	r0, [pc, #52]	@ (8001c1c <HAL_TIM_IC_MspInit+0xa4>)
 8001be6:	f000 ff8b 	bl	8002b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = encoder3_A_Pin;
 8001bea:	2302      	movs	r3, #2
 8001bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(encoder3_A_GPIO_Port, &GPIO_InitStruct);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	4805      	ldr	r0, [pc, #20]	@ (8001c1c <HAL_TIM_IC_MspInit+0xa4>)
 8001c06:	f000 ff7b 	bl	8002b00 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	3728      	adds	r7, #40	@ 0x28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40000400 	.word	0x40000400
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	48000400 	.word	0x48000400

08001c20 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM19)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <HAL_TIM_PWM_MspInit+0x38>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d10b      	bne.n	8001c4a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM19_MspInit 0 */

  /* USER CODE END TIM19_MspInit 0 */
    /* TIM19 clock enable */
    __HAL_RCC_TIM19_CLK_ENABLE();
 8001c32:	4b0a      	ldr	r3, [pc, #40]	@ (8001c5c <HAL_TIM_PWM_MspInit+0x3c>)
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	4a09      	ldr	r2, [pc, #36]	@ (8001c5c <HAL_TIM_PWM_MspInit+0x3c>)
 8001c38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001c3c:	6193      	str	r3, [r2, #24]
 8001c3e:	4b07      	ldr	r3, [pc, #28]	@ (8001c5c <HAL_TIM_PWM_MspInit+0x3c>)
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM19_MspInit 1 */

  /* USER CODE END TIM19_MspInit 1 */
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40015c00 	.word	0x40015c00
 8001c5c:	40021000 	.word	0x40021000

08001c60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08c      	sub	sp, #48	@ 0x30
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 031c 	add.w	r3, r7, #28
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c80:	d11d      	bne.n	8001cbe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	4b44      	ldr	r3, [pc, #272]	@ (8001d94 <HAL_TIM_MspPostInit+0x134>)
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	4a43      	ldr	r2, [pc, #268]	@ (8001d94 <HAL_TIM_MspPostInit+0x134>)
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c8c:	6153      	str	r3, [r2, #20]
 8001c8e:	4b41      	ldr	r3, [pc, #260]	@ (8001d94 <HAL_TIM_MspPostInit+0x134>)
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c96:	61bb      	str	r3, [r7, #24]
 8001c98:	69bb      	ldr	r3, [r7, #24]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = motor3_A_Pin|motor3_B_Pin|motor4_A_Pin|motor4_AA3_Pin;
 8001c9a:	230f      	movs	r3, #15
 8001c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001caa:	2301      	movs	r3, #1
 8001cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f107 031c 	add.w	r3, r7, #28
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cb8:	f000 ff22 	bl	8002b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM19_MspPostInit 1 */

  /* USER CODE END TIM19_MspPostInit 1 */
  }

}
 8001cbc:	e065      	b.n	8001d8a <HAL_TIM_MspPostInit+0x12a>
  else if(timHandle->Instance==TIM5)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a35      	ldr	r2, [pc, #212]	@ (8001d98 <HAL_TIM_MspPostInit+0x138>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d11c      	bne.n	8001d02 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc8:	4b32      	ldr	r3, [pc, #200]	@ (8001d94 <HAL_TIM_MspPostInit+0x134>)
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	4a31      	ldr	r2, [pc, #196]	@ (8001d94 <HAL_TIM_MspPostInit+0x134>)
 8001cce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001cd2:	6153      	str	r3, [r2, #20]
 8001cd4:	4b2f      	ldr	r3, [pc, #188]	@ (8001d94 <HAL_TIM_MspPostInit+0x134>)
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = motor1_A_Pin|motor1_B_Pin|motor2_A_Pin|motor2_B_Pin;
 8001ce0:	230f      	movs	r3, #15
 8001ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4828      	ldr	r0, [pc, #160]	@ (8001d9c <HAL_TIM_MspPostInit+0x13c>)
 8001cfc:	f000 ff00 	bl	8002b00 <HAL_GPIO_Init>
}
 8001d00:	e043      	b.n	8001d8a <HAL_TIM_MspPostInit+0x12a>
  else if(timHandle->Instance==TIM17)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a26      	ldr	r2, [pc, #152]	@ (8001da0 <HAL_TIM_MspPostInit+0x140>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d11c      	bne.n	8001d46 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0c:	4b21      	ldr	r3, [pc, #132]	@ (8001d94 <HAL_TIM_MspPostInit+0x134>)
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	4a20      	ldr	r2, [pc, #128]	@ (8001d94 <HAL_TIM_MspPostInit+0x134>)
 8001d12:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d16:	6153      	str	r3, [r2, #20]
 8001d18:	4b1e      	ldr	r3, [pc, #120]	@ (8001d94 <HAL_TIM_MspPostInit+0x134>)
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d24:	2320      	movs	r3, #32
 8001d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	2300      	movs	r3, #0
 8001d32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8001d34:	230a      	movs	r3, #10
 8001d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d38:	f107 031c 	add.w	r3, r7, #28
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4819      	ldr	r0, [pc, #100]	@ (8001da4 <HAL_TIM_MspPostInit+0x144>)
 8001d40:	f000 fede 	bl	8002b00 <HAL_GPIO_Init>
}
 8001d44:	e021      	b.n	8001d8a <HAL_TIM_MspPostInit+0x12a>
  else if(timHandle->Instance==TIM19)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a17      	ldr	r2, [pc, #92]	@ (8001da8 <HAL_TIM_MspPostInit+0x148>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d11c      	bne.n	8001d8a <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d50:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <HAL_TIM_MspPostInit+0x134>)
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	4a0f      	ldr	r2, [pc, #60]	@ (8001d94 <HAL_TIM_MspPostInit+0x134>)
 8001d56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001d5a:	6153      	str	r3, [r2, #20]
 8001d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <HAL_TIM_MspPostInit+0x134>)
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM19;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7e:	f107 031c 	add.w	r3, r7, #28
 8001d82:	4619      	mov	r1, r3
 8001d84:	4805      	ldr	r0, [pc, #20]	@ (8001d9c <HAL_TIM_MspPostInit+0x13c>)
 8001d86:	f000 febb 	bl	8002b00 <HAL_GPIO_Init>
}
 8001d8a:	bf00      	nop
 8001d8c:	3730      	adds	r7, #48	@ 0x30
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40000c00 	.word	0x40000c00
 8001d9c:	48000800 	.word	0x48000800
 8001da0:	40014800 	.word	0x40014800
 8001da4:	48000400 	.word	0x48000400
 8001da8:	40015c00 	.word	0x40015c00

08001dac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001db0:	4b14      	ldr	r3, [pc, #80]	@ (8001e04 <MX_USART1_UART_Init+0x58>)
 8001db2:	4a15      	ldr	r2, [pc, #84]	@ (8001e08 <MX_USART1_UART_Init+0x5c>)
 8001db4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001db6:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <MX_USART1_UART_Init+0x58>)
 8001db8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001dbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dbe:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <MX_USART1_UART_Init+0x58>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e04 <MX_USART1_UART_Init+0x58>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dca:	4b0e      	ldr	r3, [pc, #56]	@ (8001e04 <MX_USART1_UART_Init+0x58>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <MX_USART1_UART_Init+0x58>)
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <MX_USART1_UART_Init+0x58>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ddc:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <MX_USART1_UART_Init+0x58>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001de2:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <MX_USART1_UART_Init+0x58>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001de8:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <MX_USART1_UART_Init+0x58>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dee:	4805      	ldr	r0, [pc, #20]	@ (8001e04 <MX_USART1_UART_Init+0x58>)
 8001df0:	f004 faa0 	bl	8006334 <HAL_UART_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001dfa:	f7ff fa05 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200003c8 	.word	0x200003c8
 8001e08:	40013800 	.word	0x40013800

08001e0c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e10:	4b14      	ldr	r3, [pc, #80]	@ (8001e64 <MX_USART2_UART_Init+0x58>)
 8001e12:	4a15      	ldr	r2, [pc, #84]	@ (8001e68 <MX_USART2_UART_Init+0x5c>)
 8001e14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001e16:	4b13      	ldr	r3, [pc, #76]	@ (8001e64 <MX_USART2_UART_Init+0x58>)
 8001e18:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001e1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e1e:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <MX_USART2_UART_Init+0x58>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e24:	4b0f      	ldr	r3, [pc, #60]	@ (8001e64 <MX_USART2_UART_Init+0x58>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e64 <MX_USART2_UART_Init+0x58>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e30:	4b0c      	ldr	r3, [pc, #48]	@ (8001e64 <MX_USART2_UART_Init+0x58>)
 8001e32:	220c      	movs	r2, #12
 8001e34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e36:	4b0b      	ldr	r3, [pc, #44]	@ (8001e64 <MX_USART2_UART_Init+0x58>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e3c:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <MX_USART2_UART_Init+0x58>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e42:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <MX_USART2_UART_Init+0x58>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e48:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <MX_USART2_UART_Init+0x58>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e4e:	4805      	ldr	r0, [pc, #20]	@ (8001e64 <MX_USART2_UART_Init+0x58>)
 8001e50:	f004 fa70 	bl	8006334 <HAL_UART_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e5a:	f7ff f9d5 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000450 	.word	0x20000450
 8001e68:	40004400 	.word	0x40004400

08001e6c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e70:	4b14      	ldr	r3, [pc, #80]	@ (8001ec4 <MX_USART3_UART_Init+0x58>)
 8001e72:	4a15      	ldr	r2, [pc, #84]	@ (8001ec8 <MX_USART3_UART_Init+0x5c>)
 8001e74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001e76:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <MX_USART3_UART_Init+0x58>)
 8001e78:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001e7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <MX_USART3_UART_Init+0x58>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec4 <MX_USART3_UART_Init+0x58>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec4 <MX_USART3_UART_Init+0x58>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e90:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec4 <MX_USART3_UART_Init+0x58>)
 8001e92:	220c      	movs	r2, #12
 8001e94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e96:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec4 <MX_USART3_UART_Init+0x58>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <MX_USART3_UART_Init+0x58>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ea2:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <MX_USART3_UART_Init+0x58>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <MX_USART3_UART_Init+0x58>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001eae:	4805      	ldr	r0, [pc, #20]	@ (8001ec4 <MX_USART3_UART_Init+0x58>)
 8001eb0:	f004 fa40 	bl	8006334 <HAL_UART_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001eba:	f7ff f9a5 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200004d8 	.word	0x200004d8
 8001ec8:	40004800 	.word	0x40004800

08001ecc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08e      	sub	sp, #56	@ 0x38
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a46      	ldr	r2, [pc, #280]	@ (8002004 <HAL_UART_MspInit+0x138>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d12a      	bne.n	8001f44 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eee:	4b46      	ldr	r3, [pc, #280]	@ (8002008 <HAL_UART_MspInit+0x13c>)
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	4a45      	ldr	r2, [pc, #276]	@ (8002008 <HAL_UART_MspInit+0x13c>)
 8001ef4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ef8:	6193      	str	r3, [r2, #24]
 8001efa:	4b43      	ldr	r3, [pc, #268]	@ (8002008 <HAL_UART_MspInit+0x13c>)
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f02:	623b      	str	r3, [r7, #32]
 8001f04:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	4b40      	ldr	r3, [pc, #256]	@ (8002008 <HAL_UART_MspInit+0x13c>)
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	4a3f      	ldr	r2, [pc, #252]	@ (8002008 <HAL_UART_MspInit+0x13c>)
 8001f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f10:	6153      	str	r3, [r2, #20]
 8001f12:	4b3d      	ldr	r3, [pc, #244]	@ (8002008 <HAL_UART_MspInit+0x13c>)
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1a:	61fb      	str	r3, [r7, #28]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f1e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f30:	2307      	movs	r3, #7
 8001f32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f3e:	f000 fddf 	bl	8002b00 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f42:	e05b      	b.n	8001ffc <HAL_UART_MspInit+0x130>
  else if(uartHandle->Instance==USART2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a30      	ldr	r2, [pc, #192]	@ (800200c <HAL_UART_MspInit+0x140>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d128      	bne.n	8001fa0 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f4e:	4b2e      	ldr	r3, [pc, #184]	@ (8002008 <HAL_UART_MspInit+0x13c>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	4a2d      	ldr	r2, [pc, #180]	@ (8002008 <HAL_UART_MspInit+0x13c>)
 8001f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f58:	61d3      	str	r3, [r2, #28]
 8001f5a:	4b2b      	ldr	r3, [pc, #172]	@ (8002008 <HAL_UART_MspInit+0x13c>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f66:	4b28      	ldr	r3, [pc, #160]	@ (8002008 <HAL_UART_MspInit+0x13c>)
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	4a27      	ldr	r2, [pc, #156]	@ (8002008 <HAL_UART_MspInit+0x13c>)
 8001f6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f70:	6153      	str	r3, [r2, #20]
 8001f72:	4b25      	ldr	r3, [pc, #148]	@ (8002008 <HAL_UART_MspInit+0x13c>)
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001f7e:	2318      	movs	r3, #24
 8001f80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f8e:	2307      	movs	r3, #7
 8001f90:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f96:	4619      	mov	r1, r3
 8001f98:	481d      	ldr	r0, [pc, #116]	@ (8002010 <HAL_UART_MspInit+0x144>)
 8001f9a:	f000 fdb1 	bl	8002b00 <HAL_GPIO_Init>
}
 8001f9e:	e02d      	b.n	8001ffc <HAL_UART_MspInit+0x130>
  else if(uartHandle->Instance==USART3)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8002014 <HAL_UART_MspInit+0x148>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d128      	bne.n	8001ffc <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001faa:	4b17      	ldr	r3, [pc, #92]	@ (8002008 <HAL_UART_MspInit+0x13c>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	4a16      	ldr	r2, [pc, #88]	@ (8002008 <HAL_UART_MspInit+0x13c>)
 8001fb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fb4:	61d3      	str	r3, [r2, #28]
 8001fb6:	4b14      	ldr	r3, [pc, #80]	@ (8002008 <HAL_UART_MspInit+0x13c>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc2:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <HAL_UART_MspInit+0x13c>)
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	4a10      	ldr	r2, [pc, #64]	@ (8002008 <HAL_UART_MspInit+0x13c>)
 8001fc8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001fcc:	6153      	str	r3, [r2, #20]
 8001fce:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <HAL_UART_MspInit+0x13c>)
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001fda:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001fde:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fec:	2307      	movs	r3, #7
 8001fee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ff0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4808      	ldr	r0, [pc, #32]	@ (8002018 <HAL_UART_MspInit+0x14c>)
 8001ff8:	f000 fd82 	bl	8002b00 <HAL_GPIO_Init>
}
 8001ffc:	bf00      	nop
 8001ffe:	3738      	adds	r7, #56	@ 0x38
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40013800 	.word	0x40013800
 8002008:	40021000 	.word	0x40021000
 800200c:	40004400 	.word	0x40004400
 8002010:	48000400 	.word	0x48000400
 8002014:	40004800 	.word	0x40004800
 8002018:	48000800 	.word	0x48000800

0800201c <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002020:	4b0d      	ldr	r3, [pc, #52]	@ (8002058 <MX_USB_PCD_Init+0x3c>)
 8002022:	4a0e      	ldr	r2, [pc, #56]	@ (800205c <MX_USB_PCD_Init+0x40>)
 8002024:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002026:	4b0c      	ldr	r3, [pc, #48]	@ (8002058 <MX_USB_PCD_Init+0x3c>)
 8002028:	2208      	movs	r2, #8
 800202a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800202c:	4b0a      	ldr	r3, [pc, #40]	@ (8002058 <MX_USB_PCD_Init+0x3c>)
 800202e:	2202      	movs	r2, #2
 8002030:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002032:	4b09      	ldr	r3, [pc, #36]	@ (8002058 <MX_USB_PCD_Init+0x3c>)
 8002034:	2202      	movs	r2, #2
 8002036:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002038:	4b07      	ldr	r3, [pc, #28]	@ (8002058 <MX_USB_PCD_Init+0x3c>)
 800203a:	2200      	movs	r2, #0
 800203c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800203e:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <MX_USB_PCD_Init+0x3c>)
 8002040:	2200      	movs	r2, #0
 8002042:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002044:	4804      	ldr	r0, [pc, #16]	@ (8002058 <MX_USB_PCD_Init+0x3c>)
 8002046:	f001 fba8 	bl	800379a <HAL_PCD_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8002050:	f7ff f8da 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000560 	.word	0x20000560
 800205c:	40005c00 	.word	0x40005c00

08002060 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08a      	sub	sp, #40	@ 0x28
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a18      	ldr	r2, [pc, #96]	@ (80020e0 <HAL_PCD_MspInit+0x80>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d129      	bne.n	80020d6 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002082:	4b18      	ldr	r3, [pc, #96]	@ (80020e4 <HAL_PCD_MspInit+0x84>)
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	4a17      	ldr	r2, [pc, #92]	@ (80020e4 <HAL_PCD_MspInit+0x84>)
 8002088:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800208c:	6153      	str	r3, [r2, #20]
 800208e:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <HAL_PCD_MspInit+0x84>)
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800209a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800209e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	2302      	movs	r3, #2
 80020a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020a8:	2303      	movs	r3, #3
 80020aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80020ac:	230e      	movs	r3, #14
 80020ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	4619      	mov	r1, r3
 80020b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ba:	f000 fd21 	bl	8002b00 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80020be:	4b09      	ldr	r3, [pc, #36]	@ (80020e4 <HAL_PCD_MspInit+0x84>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	4a08      	ldr	r2, [pc, #32]	@ (80020e4 <HAL_PCD_MspInit+0x84>)
 80020c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020c8:	61d3      	str	r3, [r2, #28]
 80020ca:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <HAL_PCD_MspInit+0x84>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80020d6:	bf00      	nop
 80020d8:	3728      	adds	r7, #40	@ 0x28
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40005c00 	.word	0x40005c00
 80020e4:	40021000 	.word	0x40021000

080020e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002120 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80020ec:	f7ff f968 	bl	80013c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020f0:	480c      	ldr	r0, [pc, #48]	@ (8002124 <LoopForever+0x6>)
  ldr r1, =_edata
 80020f2:	490d      	ldr	r1, [pc, #52]	@ (8002128 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020f4:	4a0d      	ldr	r2, [pc, #52]	@ (800212c <LoopForever+0xe>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f8:	e002      	b.n	8002100 <LoopCopyDataInit>

080020fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020fe:	3304      	adds	r3, #4

08002100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002104:	d3f9      	bcc.n	80020fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002106:	4a0a      	ldr	r2, [pc, #40]	@ (8002130 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002108:	4c0a      	ldr	r4, [pc, #40]	@ (8002134 <LoopForever+0x16>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800210c:	e001      	b.n	8002112 <LoopFillZerobss>

0800210e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800210e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002110:	3204      	adds	r2, #4

08002112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002114:	d3fb      	bcc.n	800210e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002116:	f004 fd31 	bl	8006b7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800211a:	f7fe ff59 	bl	8000fd0 <main>

0800211e <LoopForever>:

LoopForever:
    b LoopForever
 800211e:	e7fe      	b.n	800211e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002120:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002128:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800212c:	08006c1c 	.word	0x08006c1c
  ldr r2, =_sbss
 8002130:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002134:	20000838 	.word	0x20000838

08002138 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002138:	e7fe      	b.n	8002138 <ADC1_IRQHandler>
	...

0800213c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002140:	4b08      	ldr	r3, [pc, #32]	@ (8002164 <HAL_Init+0x28>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a07      	ldr	r2, [pc, #28]	@ (8002164 <HAL_Init+0x28>)
 8002146:	f043 0310 	orr.w	r3, r3, #16
 800214a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800214c:	2003      	movs	r0, #3
 800214e:	f000 fc35 	bl	80029bc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002152:	200f      	movs	r0, #15
 8002154:	f000 f808 	bl	8002168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002158:	f7ff f8de 	bl	8001318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40022000 	.word	0x40022000

08002168 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002170:	4b12      	ldr	r3, [pc, #72]	@ (80021bc <HAL_InitTick+0x54>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b12      	ldr	r3, [pc, #72]	@ (80021c0 <HAL_InitTick+0x58>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	4619      	mov	r1, r3
 800217a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800217e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002182:	fbb2 f3f3 	udiv	r3, r2, r3
 8002186:	4618      	mov	r0, r3
 8002188:	f000 fc3f 	bl	8002a0a <HAL_SYSTICK_Config>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e00e      	b.n	80021b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b0f      	cmp	r3, #15
 800219a:	d80a      	bhi.n	80021b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800219c:	2200      	movs	r2, #0
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021a4:	f000 fc15 	bl	80029d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021a8:	4a06      	ldr	r2, [pc, #24]	@ (80021c4 <HAL_InitTick+0x5c>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	e000      	b.n	80021b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000000 	.word	0x20000000
 80021c0:	20000008 	.word	0x20000008
 80021c4:	20000004 	.word	0x20000004

080021c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021cc:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <HAL_IncTick+0x20>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	4b06      	ldr	r3, [pc, #24]	@ (80021ec <HAL_IncTick+0x24>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4413      	add	r3, r2
 80021d8:	4a04      	ldr	r2, [pc, #16]	@ (80021ec <HAL_IncTick+0x24>)
 80021da:	6013      	str	r3, [r2, #0]
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000008 	.word	0x20000008
 80021ec:	20000834 	.word	0x20000834

080021f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80021f4:	4b03      	ldr	r3, [pc, #12]	@ (8002204 <HAL_GetTick+0x14>)
 80021f6:	681b      	ldr	r3, [r3, #0]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	20000834 	.word	0x20000834

08002208 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002210:	f7ff ffee 	bl	80021f0 <HAL_GetTick>
 8002214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002220:	d005      	beq.n	800222e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002222:	4b0a      	ldr	r3, [pc, #40]	@ (800224c <HAL_Delay+0x44>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4413      	add	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800222e:	bf00      	nop
 8002230:	f7ff ffde 	bl	80021f0 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	429a      	cmp	r2, r3
 800223e:	d8f7      	bhi.n	8002230 <HAL_Delay+0x28>
  {
  }
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000008 	.word	0x20000008

08002250 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e0be      	b.n	80023f0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227c:	2b00      	cmp	r3, #0
 800227e:	d109      	bne.n	8002294 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7fe fb50 	bl	8000934 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f9a3 	bl	80025e0 <ADC_ConversionStop_Disable>
 800229a:	4603      	mov	r3, r0
 800229c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a2:	f003 0310 	and.w	r3, r3, #16
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f040 8099 	bne.w	80023de <HAL_ADC_Init+0x18e>
 80022ac:	7dfb      	ldrb	r3, [r7, #23]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f040 8095 	bne.w	80023de <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80022bc:	f023 0302 	bic.w	r3, r3, #2
 80022c0:	f043 0202 	orr.w	r2, r3, #2
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685a      	ldr	r2, [r3, #4]
                hadc->Init.ExternalTrigConv                      |
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 80022d0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) );
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	7b1b      	ldrb	r3, [r3, #12]
 80022d6:	005b      	lsls	r3, r3, #1
                hadc->Init.ExternalTrigConv                      |
 80022d8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	4313      	orrs	r3, r2
 80022de:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022e8:	d003      	beq.n	80022f2 <HAL_ADC_Init+0xa2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d102      	bne.n	80022f8 <HAL_ADC_Init+0xa8>
 80022f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022f6:	e000      	b.n	80022fa <HAL_ADC_Init+0xaa>
 80022f8:	2300      	movs	r3, #0
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]

    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	7d1b      	ldrb	r3, [r3, #20]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d119      	bne.n	800233c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	7b1b      	ldrb	r3, [r3, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d109      	bne.n	8002324 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
                  ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion) );
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	3b01      	subs	r3, #1
 8002316:	035a      	lsls	r2, r3, #13
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	e00b      	b.n	800233c <HAL_ADC_Init+0xec>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002328:	f043 0220 	orr.w	r2, r3, #32
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002334:	f043 0201 	orr.w	r2, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	430a      	orrs	r2, r1
 800234e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	4b28      	ldr	r3, [pc, #160]	@ (80023f8 <HAL_ADC_Init+0x1a8>)
 8002358:	4013      	ands	r3, r2
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6812      	ldr	r2, [r2, #0]
 800235e:	68b9      	ldr	r1, [r7, #8]
 8002360:	430b      	orrs	r3, r1
 8002362:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800236c:	d003      	beq.n	8002376 <HAL_ADC_Init+0x126>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d104      	bne.n	8002380 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	3b01      	subs	r3, #1
 800237c:	051b      	lsls	r3, r3, #20
 800237e:	60fb      	str	r3, [r7, #12]
    }
    
    MODIFY_REG(hadc->Instance->SQR1,
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002386:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	430a      	orrs	r2, r1
 8002392:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	4b18      	ldr	r3, [pc, #96]	@ (80023fc <HAL_ADC_Init+0x1ac>)
 800239c:	4013      	ands	r3, r2
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d10b      	bne.n	80023bc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ae:	f023 0303 	bic.w	r3, r3, #3
 80023b2:	f043 0201 	orr.w	r2, r3, #1
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023ba:	e018      	b.n	80023ee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c0:	f023 0312 	bic.w	r3, r3, #18
 80023c4:	f043 0210 	orr.w	r2, r3, #16
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d0:	f043 0201 	orr.w	r2, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023dc:	e007      	b.n	80023ee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e2:	f043 0210 	orr.w	r2, r3, #16
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	ffe1f7fd 	.word	0xffe1f7fd
 80023fc:	ff1f0efe 	.word	0xff1f0efe

08002400 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x20>
 800241c:	2302      	movs	r3, #2
 800241e:	e0d2      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x1c6>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6U */
  if (sConfig->Rank < 7U)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b06      	cmp	r3, #6
 800242e:	d81c      	bhi.n	800246a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	3b05      	subs	r3, #5
 8002442:	221f      	movs	r2, #31
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	4019      	ands	r1, r3
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	6818      	ldr	r0, [r3, #0]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	3b05      	subs	r3, #5
 800245c:	fa00 f203 	lsl.w	r2, r0, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	635a      	str	r2, [r3, #52]	@ 0x34
 8002468:	e03c      	b.n	80024e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12U */
  else if (sConfig->Rank < 13U)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b0c      	cmp	r3, #12
 8002470:	d81c      	bhi.n	80024ac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	3b23      	subs	r3, #35	@ 0x23
 8002484:	221f      	movs	r2, #31
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	4019      	ands	r1, r3
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	3b23      	subs	r3, #35	@ 0x23
 800249e:	fa00 f203 	lsl.w	r2, r0, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80024aa:	e01b      	b.n	80024e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16U */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	3b41      	subs	r3, #65	@ 0x41
 80024be:	221f      	movs	r2, #31
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	4019      	ands	r1, r3
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	3b41      	subs	r3, #65	@ 0x41
 80024d8:	fa00 f203 	lsl.w	r2, r0, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 18U */
  if (sConfig->Channel > ADC_CHANNEL_10)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b0a      	cmp	r3, #10
 80024ea:	d91c      	bls.n	8002526 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68d9      	ldr	r1, [r3, #12]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	4613      	mov	r3, r2
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	4413      	add	r3, r2
 80024fc:	3b1e      	subs	r3, #30
 80024fe:	2207      	movs	r2, #7
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	4019      	ands	r1, r3
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	6898      	ldr	r0, [r3, #8]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4613      	mov	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4413      	add	r3, r2
 8002516:	3b1e      	subs	r3, #30
 8002518:	fa00 f203 	lsl.w	r2, r0, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	60da      	str	r2, [r3, #12]
 8002524:	e019      	b.n	800255a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else   /* For channels 0 to 9U */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6919      	ldr	r1, [r3, #16]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4613      	mov	r3, r2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	4413      	add	r3, r2
 8002536:	2207      	movs	r2, #7
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	4019      	ands	r1, r3
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	6898      	ldr	r0, [r3, #8]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4613      	mov	r3, r2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	4413      	add	r3, r2
 800254e:	fa00 f203 	lsl.w	r2, r0, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b10      	cmp	r3, #16
 8002560:	d003      	beq.n	800256a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002566:	2b11      	cmp	r3, #17
 8002568:	d11e      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x1a8>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002578:	609a      	str	r2, [r3, #8]
    
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b10      	cmp	r3, #16
 8002580:	d11c      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x1bc>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002582:	4b14      	ldr	r3, [pc, #80]	@ (80025d4 <HAL_ADC_ConfigChannel+0x1d4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a14      	ldr	r2, [pc, #80]	@ (80025d8 <HAL_ADC_ConfigChannel+0x1d8>)
 8002588:	fba2 2303 	umull	r2, r3, r2, r3
 800258c:	0c9a      	lsrs	r2, r3, #18
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 8002598:	e002      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x1a0>
      {
        wait_loop_index--;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	3b01      	subs	r3, #1
 800259e:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f9      	bne.n	800259a <HAL_ADC_ConfigChannel+0x19a>
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80025a6:	e009      	b.n	80025bc <HAL_ADC_ConfigChannel+0x1bc>
      }
    }
  }
  /* if ADC1 Channel_18 is selected, enable VBAT measurement path */
  else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b12      	cmp	r3, #18
 80025ae:	d105      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x1bc>
  {
    SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_VBAT);
 80025b0:	4b0a      	ldr	r3, [pc, #40]	@ (80025dc <HAL_ADC_ConfigChannel+0x1dc>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a09      	ldr	r2, [pc, #36]	@ (80025dc <HAL_ADC_ConfigChannel+0x1dc>)
 80025b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025ba:	6013      	str	r3, [r2, #0]
  }

   
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000000 	.word	0x20000000
 80025d8:	431bde83 	.word	0x431bde83
 80025dc:	40010000 	.word	0x40010000

080025e0 <ADC_ConversionStop_Disable>:
  * @brief  Stop ADC conversion and disable the selected ADC
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d12e      	bne.n	8002658 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0201 	bic.w	r2, r2, #1
 8002608:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800260a:	f7ff fdf1 	bl	80021f0 <HAL_GetTick>
 800260e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002610:	e01b      	b.n	800264a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002612:	f7ff fded 	bl	80021f0 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d914      	bls.n	800264a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b01      	cmp	r3, #1
 800262c:	d10d      	bne.n	800264a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002632:	f043 0210 	orr.w	r2, r3, #16
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263e:	f043 0201 	orr.w	r2, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e007      	b.n	800265a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b01      	cmp	r3, #1
 8002656:	d0dc      	beq.n	8002612 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b084      	sub	sp, #16
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0ed      	b.n	8002850 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3020 	ldrb.w	r3, [r3, #32]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d102      	bne.n	8002686 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7fe f9c9 	bl	8000a18 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f042 0201 	orr.w	r2, r2, #1
 8002694:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002696:	f7ff fdab 	bl	80021f0 <HAL_GetTick>
 800269a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800269c:	e012      	b.n	80026c4 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800269e:	f7ff fda7 	bl	80021f0 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b0a      	cmp	r3, #10
 80026aa:	d90b      	bls.n	80026c4 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2205      	movs	r2, #5
 80026bc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0c5      	b.n	8002850 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0e5      	beq.n	800269e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0202 	bic.w	r2, r2, #2
 80026e0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026e2:	f7ff fd85 	bl	80021f0 <HAL_GetTick>
 80026e6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80026e8:	e012      	b.n	8002710 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026ea:	f7ff fd81 	bl	80021f0 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b0a      	cmp	r3, #10
 80026f6:	d90b      	bls.n	8002710 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2205      	movs	r2, #5
 8002708:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e09f      	b.n	8002850 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1e5      	bne.n	80026ea <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	7e1b      	ldrb	r3, [r3, #24]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d108      	bne.n	8002738 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	e007      	b.n	8002748 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002746:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	7e5b      	ldrb	r3, [r3, #25]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d108      	bne.n	8002762 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	e007      	b.n	8002772 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002770:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	7e9b      	ldrb	r3, [r3, #26]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d108      	bne.n	800278c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f042 0220 	orr.w	r2, r2, #32
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	e007      	b.n	800279c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0220 	bic.w	r2, r2, #32
 800279a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7edb      	ldrb	r3, [r3, #27]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d108      	bne.n	80027b6 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0210 	bic.w	r2, r2, #16
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	e007      	b.n	80027c6 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f042 0210 	orr.w	r2, r2, #16
 80027c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	7f1b      	ldrb	r3, [r3, #28]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d108      	bne.n	80027e0 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0208 	orr.w	r2, r2, #8
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	e007      	b.n	80027f0 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0208 	bic.w	r2, r2, #8
 80027ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	7f5b      	ldrb	r3, [r3, #29]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d108      	bne.n	800280a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0204 	orr.w	r2, r2, #4
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	e007      	b.n	800281a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0204 	bic.w	r2, r2, #4
 8002818:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689a      	ldr	r2, [r3, #8]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	ea42 0103 	orr.w	r1, r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	1e5a      	subs	r2, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002868:	4b0c      	ldr	r3, [pc, #48]	@ (800289c <__NVIC_SetPriorityGrouping+0x44>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002874:	4013      	ands	r3, r2
 8002876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002880:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002884:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800288a:	4a04      	ldr	r2, [pc, #16]	@ (800289c <__NVIC_SetPriorityGrouping+0x44>)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	60d3      	str	r3, [r2, #12]
}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a4:	4b04      	ldr	r3, [pc, #16]	@ (80028b8 <__NVIC_GetPriorityGrouping+0x18>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	0a1b      	lsrs	r3, r3, #8
 80028aa:	f003 0307 	and.w	r3, r3, #7
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	6039      	str	r1, [r7, #0]
 80028c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	db0a      	blt.n	80028e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	490c      	ldr	r1, [pc, #48]	@ (8002908 <__NVIC_SetPriority+0x4c>)
 80028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028da:	0112      	lsls	r2, r2, #4
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	440b      	add	r3, r1
 80028e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e4:	e00a      	b.n	80028fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	4908      	ldr	r1, [pc, #32]	@ (800290c <__NVIC_SetPriority+0x50>)
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	3b04      	subs	r3, #4
 80028f4:	0112      	lsls	r2, r2, #4
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	440b      	add	r3, r1
 80028fa:	761a      	strb	r2, [r3, #24]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000e100 	.word	0xe000e100
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002910:	b480      	push	{r7}
 8002912:	b089      	sub	sp, #36	@ 0x24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f1c3 0307 	rsb	r3, r3, #7
 800292a:	2b04      	cmp	r3, #4
 800292c:	bf28      	it	cs
 800292e:	2304      	movcs	r3, #4
 8002930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3304      	adds	r3, #4
 8002936:	2b06      	cmp	r3, #6
 8002938:	d902      	bls.n	8002940 <NVIC_EncodePriority+0x30>
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3b03      	subs	r3, #3
 800293e:	e000      	b.n	8002942 <NVIC_EncodePriority+0x32>
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43da      	mvns	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	401a      	ands	r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002958:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	fa01 f303 	lsl.w	r3, r1, r3
 8002962:	43d9      	mvns	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002968:	4313      	orrs	r3, r2
         );
}
 800296a:	4618      	mov	r0, r3
 800296c:	3724      	adds	r7, #36	@ 0x24
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3b01      	subs	r3, #1
 8002984:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002988:	d301      	bcc.n	800298e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800298a:	2301      	movs	r3, #1
 800298c:	e00f      	b.n	80029ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800298e:	4a0a      	ldr	r2, [pc, #40]	@ (80029b8 <SysTick_Config+0x40>)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3b01      	subs	r3, #1
 8002994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002996:	210f      	movs	r1, #15
 8002998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800299c:	f7ff ff8e 	bl	80028bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a0:	4b05      	ldr	r3, [pc, #20]	@ (80029b8 <SysTick_Config+0x40>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029a6:	4b04      	ldr	r3, [pc, #16]	@ (80029b8 <SysTick_Config+0x40>)
 80029a8:	2207      	movs	r2, #7
 80029aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	e000e010 	.word	0xe000e010

080029bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff ff47 	bl	8002858 <__NVIC_SetPriorityGrouping>
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b086      	sub	sp, #24
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	4603      	mov	r3, r0
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e4:	f7ff ff5c 	bl	80028a0 <__NVIC_GetPriorityGrouping>
 80029e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	6978      	ldr	r0, [r7, #20]
 80029f0:	f7ff ff8e 	bl	8002910 <NVIC_EncodePriority>
 80029f4:	4602      	mov	r2, r0
 80029f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029fa:	4611      	mov	r1, r2
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff ff5d 	bl	80028bc <__NVIC_SetPriority>
}
 8002a02:	bf00      	nop
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff ffb0 	bl	8002978 <SysTick_Config>
 8002a18:	4603      	mov	r3, r0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e014      	b.n	8002a5e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	791b      	ldrb	r3, [r3, #4]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d105      	bne.n	8002a4a <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7fe f88b 	bl	8000b60 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b087      	sub	sp, #28
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	795b      	ldrb	r3, [r3, #5]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <HAL_DAC_ConfigChannel+0x20>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e036      	b.n	8002af4 <HAL_DAC_ConfigChannel+0x8e>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002a9a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6819      	ldr	r1, [r3, #0]
 8002ad4:	22c0      	movs	r2, #192	@ 0xc0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43da      	mvns	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	400a      	ands	r2, r1
 8002ae4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	371c      	adds	r7, #28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b0e:	e154      	b.n	8002dba <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	2101      	movs	r1, #1
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 8146 	beq.w	8002db4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d005      	beq.n	8002b40 <HAL_GPIO_Init+0x40>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d130      	bne.n	8002ba2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b76:	2201      	movs	r2, #1
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	f003 0201 	and.w	r2, r3, #1
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d017      	beq.n	8002bde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	2203      	movs	r2, #3
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d123      	bne.n	8002c32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	08da      	lsrs	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3208      	adds	r2, #8
 8002bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	220f      	movs	r2, #15
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	08da      	lsrs	r2, r3, #3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3208      	adds	r2, #8
 8002c2c:	6939      	ldr	r1, [r7, #16]
 8002c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4013      	ands	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 0203 	and.w	r2, r3, #3
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 80a0 	beq.w	8002db4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c74:	4b58      	ldr	r3, [pc, #352]	@ (8002dd8 <HAL_GPIO_Init+0x2d8>)
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	4a57      	ldr	r2, [pc, #348]	@ (8002dd8 <HAL_GPIO_Init+0x2d8>)
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	6193      	str	r3, [r2, #24]
 8002c80:	4b55      	ldr	r3, [pc, #340]	@ (8002dd8 <HAL_GPIO_Init+0x2d8>)
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c8c:	4a53      	ldr	r2, [pc, #332]	@ (8002ddc <HAL_GPIO_Init+0x2dc>)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	089b      	lsrs	r3, r3, #2
 8002c92:	3302      	adds	r3, #2
 8002c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	220f      	movs	r2, #15
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002cb6:	d019      	beq.n	8002cec <HAL_GPIO_Init+0x1ec>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a49      	ldr	r2, [pc, #292]	@ (8002de0 <HAL_GPIO_Init+0x2e0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d013      	beq.n	8002ce8 <HAL_GPIO_Init+0x1e8>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a48      	ldr	r2, [pc, #288]	@ (8002de4 <HAL_GPIO_Init+0x2e4>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d00d      	beq.n	8002ce4 <HAL_GPIO_Init+0x1e4>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a47      	ldr	r2, [pc, #284]	@ (8002de8 <HAL_GPIO_Init+0x2e8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d007      	beq.n	8002ce0 <HAL_GPIO_Init+0x1e0>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a46      	ldr	r2, [pc, #280]	@ (8002dec <HAL_GPIO_Init+0x2ec>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d101      	bne.n	8002cdc <HAL_GPIO_Init+0x1dc>
 8002cd8:	2304      	movs	r3, #4
 8002cda:	e008      	b.n	8002cee <HAL_GPIO_Init+0x1ee>
 8002cdc:	2305      	movs	r3, #5
 8002cde:	e006      	b.n	8002cee <HAL_GPIO_Init+0x1ee>
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e004      	b.n	8002cee <HAL_GPIO_Init+0x1ee>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e002      	b.n	8002cee <HAL_GPIO_Init+0x1ee>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <HAL_GPIO_Init+0x1ee>
 8002cec:	2300      	movs	r3, #0
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	f002 0203 	and.w	r2, r2, #3
 8002cf4:	0092      	lsls	r2, r2, #2
 8002cf6:	4093      	lsls	r3, r2
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cfe:	4937      	ldr	r1, [pc, #220]	@ (8002ddc <HAL_GPIO_Init+0x2dc>)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	089b      	lsrs	r3, r3, #2
 8002d04:	3302      	adds	r3, #2
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d0c:	4b38      	ldr	r3, [pc, #224]	@ (8002df0 <HAL_GPIO_Init+0x2f0>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d30:	4a2f      	ldr	r2, [pc, #188]	@ (8002df0 <HAL_GPIO_Init+0x2f0>)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d36:	4b2e      	ldr	r3, [pc, #184]	@ (8002df0 <HAL_GPIO_Init+0x2f0>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4013      	ands	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d5a:	4a25      	ldr	r2, [pc, #148]	@ (8002df0 <HAL_GPIO_Init+0x2f0>)
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d60:	4b23      	ldr	r3, [pc, #140]	@ (8002df0 <HAL_GPIO_Init+0x2f0>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d84:	4a1a      	ldr	r2, [pc, #104]	@ (8002df0 <HAL_GPIO_Init+0x2f0>)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d8a:	4b19      	ldr	r3, [pc, #100]	@ (8002df0 <HAL_GPIO_Init+0x2f0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	43db      	mvns	r3, r3
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4013      	ands	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002dae:	4a10      	ldr	r2, [pc, #64]	@ (8002df0 <HAL_GPIO_Init+0x2f0>)
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	3301      	adds	r3, #1
 8002db8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f47f aea3 	bne.w	8002b10 <HAL_GPIO_Init+0x10>
  }
}
 8002dca:	bf00      	nop
 8002dcc:	bf00      	nop
 8002dce:	371c      	adds	r7, #28
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40010000 	.word	0x40010000
 8002de0:	48000400 	.word	0x48000400
 8002de4:	48000800 	.word	0x48000800
 8002de8:	48000c00 	.word	0x48000c00
 8002dec:	48001000 	.word	0x48001000
 8002df0:	40010400 	.word	0x40010400

08002df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	807b      	strh	r3, [r7, #2]
 8002e00:	4613      	mov	r3, r2
 8002e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e04:	787b      	ldrb	r3, [r7, #1]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e0a:	887a      	ldrh	r2, [r7, #2]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e10:	e002      	b.n	8002e18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e12:	887a      	ldrh	r2, [r7, #2]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e08d      	b.n	8002f52 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d106      	bne.n	8002e50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fe f84a 	bl	8000ee4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2224      	movs	r2, #36	@ 0x24
 8002e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0201 	bic.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d107      	bne.n	8002e9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	e006      	b.n	8002eac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002eaa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d108      	bne.n	8002ec6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	e007      	b.n	8002ed6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ed4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ee4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ee8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ef8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691a      	ldr	r2, [r3, #16]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69d9      	ldr	r1, [r3, #28]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a1a      	ldr	r2, [r3, #32]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0201 	orr.w	r2, r2, #1
 8002f32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	4608      	mov	r0, r1
 8002f66:	4611      	mov	r1, r2
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	817b      	strh	r3, [r7, #10]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	813b      	strh	r3, [r7, #8]
 8002f72:	4613      	mov	r3, r2
 8002f74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	f040 80fd 	bne.w	800317e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_I2C_Mem_Read+0x34>
 8002f8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d105      	bne.n	8002f9c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f96:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e0f1      	b.n	8003180 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_I2C_Mem_Read+0x4e>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e0ea      	b.n	8003180 <HAL_I2C_Mem_Read+0x224>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fb2:	f7ff f91d 	bl	80021f0 <HAL_GetTick>
 8002fb6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	2319      	movs	r3, #25
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 f95b 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0d5      	b.n	8003180 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2222      	movs	r2, #34	@ 0x22
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2240      	movs	r2, #64	@ 0x40
 8002fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a3a      	ldr	r2, [r7, #32]
 8002fee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ffc:	88f8      	ldrh	r0, [r7, #6]
 8002ffe:	893a      	ldrh	r2, [r7, #8]
 8003000:	8979      	ldrh	r1, [r7, #10]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	9301      	str	r3, [sp, #4]
 8003006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	4603      	mov	r3, r0
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f8bf 	bl	8003190 <I2C_RequestMemoryRead>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0ad      	b.n	8003180 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003028:	b29b      	uxth	r3, r3
 800302a:	2bff      	cmp	r3, #255	@ 0xff
 800302c:	d90e      	bls.n	800304c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2201      	movs	r2, #1
 8003032:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003038:	b2da      	uxtb	r2, r3
 800303a:	8979      	ldrh	r1, [r7, #10]
 800303c:	4b52      	ldr	r3, [pc, #328]	@ (8003188 <HAL_I2C_Mem_Read+0x22c>)
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 fadf 	bl	8003608 <I2C_TransferConfig>
 800304a:	e00f      	b.n	800306c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800305a:	b2da      	uxtb	r2, r3
 800305c:	8979      	ldrh	r1, [r7, #10]
 800305e:	4b4a      	ldr	r3, [pc, #296]	@ (8003188 <HAL_I2C_Mem_Read+0x22c>)
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 face 	bl	8003608 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003072:	2200      	movs	r2, #0
 8003074:	2104      	movs	r1, #4
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 f902 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e07c      	b.n	8003180 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030bc:	b29b      	uxth	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d034      	beq.n	800312c <HAL_I2C_Mem_Read+0x1d0>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d130      	bne.n	800312c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d0:	2200      	movs	r2, #0
 80030d2:	2180      	movs	r1, #128	@ 0x80
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f8d3 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e04d      	b.n	8003180 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2bff      	cmp	r3, #255	@ 0xff
 80030ec:	d90e      	bls.n	800310c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2201      	movs	r2, #1
 80030f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	8979      	ldrh	r1, [r7, #10]
 80030fc:	2300      	movs	r3, #0
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 fa7f 	bl	8003608 <I2C_TransferConfig>
 800310a:	e00f      	b.n	800312c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311a:	b2da      	uxtb	r2, r3
 800311c:	8979      	ldrh	r1, [r7, #10]
 800311e:	2300      	movs	r3, #0
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 fa6e 	bl	8003608 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d19a      	bne.n	800306c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f940 	bl	80033c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e01a      	b.n	8003180 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2220      	movs	r2, #32
 8003150:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6859      	ldr	r1, [r3, #4]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	4b0b      	ldr	r3, [pc, #44]	@ (800318c <HAL_I2C_Mem_Read+0x230>)
 800315e:	400b      	ands	r3, r1
 8003160:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	e000      	b.n	8003180 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800317e:	2302      	movs	r3, #2
  }
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	80002400 	.word	0x80002400
 800318c:	fe00e800 	.word	0xfe00e800

08003190 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	4608      	mov	r0, r1
 800319a:	4611      	mov	r1, r2
 800319c:	461a      	mov	r2, r3
 800319e:	4603      	mov	r3, r0
 80031a0:	817b      	strh	r3, [r7, #10]
 80031a2:	460b      	mov	r3, r1
 80031a4:	813b      	strh	r3, [r7, #8]
 80031a6:	4613      	mov	r3, r2
 80031a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	8979      	ldrh	r1, [r7, #10]
 80031b0:	4b20      	ldr	r3, [pc, #128]	@ (8003234 <I2C_RequestMemoryRead+0xa4>)
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	2300      	movs	r3, #0
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 fa26 	bl	8003608 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031bc:	69fa      	ldr	r2, [r7, #28]
 80031be:	69b9      	ldr	r1, [r7, #24]
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 f8b6 	bl	8003332 <I2C_WaitOnTXISFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e02c      	b.n	800322a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d105      	bne.n	80031e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031d6:	893b      	ldrh	r3, [r7, #8]
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	629a      	str	r2, [r3, #40]	@ 0x28
 80031e0:	e015      	b.n	800320e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031e2:	893b      	ldrh	r3, [r7, #8]
 80031e4:	0a1b      	lsrs	r3, r3, #8
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031f0:	69fa      	ldr	r2, [r7, #28]
 80031f2:	69b9      	ldr	r1, [r7, #24]
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f89c 	bl	8003332 <I2C_WaitOnTXISFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e012      	b.n	800322a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003204:	893b      	ldrh	r3, [r7, #8]
 8003206:	b2da      	uxtb	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	2200      	movs	r2, #0
 8003216:	2140      	movs	r1, #64	@ 0x40
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f831 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	80002000 	.word	0x80002000

08003238 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b02      	cmp	r3, #2
 800324c:	d103      	bne.n	8003256 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2200      	movs	r2, #0
 8003254:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b01      	cmp	r3, #1
 8003262:	d007      	beq.n	8003274 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	619a      	str	r2, [r3, #24]
  }
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003290:	e03b      	b.n	800330a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	6839      	ldr	r1, [r7, #0]
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 f8d6 	bl	8003448 <I2C_IsErrorOccurred>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e041      	b.n	800332a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032ac:	d02d      	beq.n	800330a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ae:	f7fe ff9f 	bl	80021f0 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d302      	bcc.n	80032c4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d122      	bne.n	800330a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	4013      	ands	r3, r2
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	bf0c      	ite	eq
 80032d4:	2301      	moveq	r3, #1
 80032d6:	2300      	movne	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	461a      	mov	r2, r3
 80032dc:	79fb      	ldrb	r3, [r7, #7]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d113      	bne.n	800330a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e6:	f043 0220 	orr.w	r2, r3, #32
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e00f      	b.n	800332a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699a      	ldr	r2, [r3, #24]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	4013      	ands	r3, r2
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	429a      	cmp	r2, r3
 8003318:	bf0c      	ite	eq
 800331a:	2301      	moveq	r3, #1
 800331c:	2300      	movne	r3, #0
 800331e:	b2db      	uxtb	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	429a      	cmp	r2, r3
 8003326:	d0b4      	beq.n	8003292 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800333e:	e033      	b.n	80033a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	68b9      	ldr	r1, [r7, #8]
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f87f 	bl	8003448 <I2C_IsErrorOccurred>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e031      	b.n	80033b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800335a:	d025      	beq.n	80033a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335c:	f7fe ff48 	bl	80021f0 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	429a      	cmp	r2, r3
 800336a:	d302      	bcc.n	8003372 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d11a      	bne.n	80033a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b02      	cmp	r3, #2
 800337e:	d013      	beq.n	80033a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003384:	f043 0220 	orr.w	r2, r3, #32
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e007      	b.n	80033b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d1c4      	bne.n	8003340 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033cc:	e02f      	b.n	800342e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f838 	bl	8003448 <I2C_IsErrorOccurred>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e02d      	b.n	800343e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e2:	f7fe ff05 	bl	80021f0 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d302      	bcc.n	80033f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d11a      	bne.n	800342e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f003 0320 	and.w	r3, r3, #32
 8003402:	2b20      	cmp	r3, #32
 8003404:	d013      	beq.n	800342e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340a:	f043 0220 	orr.w	r2, r3, #32
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2220      	movs	r2, #32
 8003416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e007      	b.n	800343e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b20      	cmp	r3, #32
 800343a:	d1c8      	bne.n	80033ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08a      	sub	sp, #40	@ 0x28
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003462:	2300      	movs	r3, #0
 8003464:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	f003 0310 	and.w	r3, r3, #16
 8003470:	2b00      	cmp	r3, #0
 8003472:	d068      	beq.n	8003546 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2210      	movs	r2, #16
 800347a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800347c:	e049      	b.n	8003512 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003484:	d045      	beq.n	8003512 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003486:	f7fe feb3 	bl	80021f0 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	429a      	cmp	r2, r3
 8003494:	d302      	bcc.n	800349c <I2C_IsErrorOccurred+0x54>
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d13a      	bne.n	8003512 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034be:	d121      	bne.n	8003504 <I2C_IsErrorOccurred+0xbc>
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034c6:	d01d      	beq.n	8003504 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80034c8:	7cfb      	ldrb	r3, [r7, #19]
 80034ca:	2b20      	cmp	r3, #32
 80034cc:	d01a      	beq.n	8003504 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80034de:	f7fe fe87 	bl	80021f0 <HAL_GetTick>
 80034e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034e4:	e00e      	b.n	8003504 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80034e6:	f7fe fe83 	bl	80021f0 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b19      	cmp	r3, #25
 80034f2:	d907      	bls.n	8003504 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	f043 0320 	orr.w	r3, r3, #32
 80034fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003502:	e006      	b.n	8003512 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f003 0320 	and.w	r3, r3, #32
 800350e:	2b20      	cmp	r3, #32
 8003510:	d1e9      	bne.n	80034e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b20      	cmp	r3, #32
 800351e:	d003      	beq.n	8003528 <I2C_IsErrorOccurred+0xe0>
 8003520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0aa      	beq.n	800347e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003528:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800352c:	2b00      	cmp	r3, #0
 800352e:	d103      	bne.n	8003538 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2220      	movs	r2, #32
 8003536:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	f043 0304 	orr.w	r3, r3, #4
 800353e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00b      	beq.n	8003570 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003568:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00b      	beq.n	8003592 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	f043 0308 	orr.w	r3, r3, #8
 8003580:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800358a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00b      	beq.n	80035b4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	f043 0302 	orr.w	r3, r3, #2
 80035a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80035b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01c      	beq.n	80035f6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f7ff fe3b 	bl	8003238 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6859      	ldr	r1, [r3, #4]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003604 <I2C_IsErrorOccurred+0x1bc>)
 80035ce:	400b      	ands	r3, r1
 80035d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	431a      	orrs	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80035f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3728      	adds	r7, #40	@ 0x28
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	fe00e800 	.word	0xfe00e800

08003608 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	607b      	str	r3, [r7, #4]
 8003612:	460b      	mov	r3, r1
 8003614:	817b      	strh	r3, [r7, #10]
 8003616:	4613      	mov	r3, r2
 8003618:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800361a:	897b      	ldrh	r3, [r7, #10]
 800361c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003620:	7a7b      	ldrb	r3, [r7, #9]
 8003622:	041b      	lsls	r3, r3, #16
 8003624:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003628:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	4313      	orrs	r3, r2
 8003632:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003636:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	0d5b      	lsrs	r3, r3, #21
 8003642:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003646:	4b08      	ldr	r3, [pc, #32]	@ (8003668 <I2C_TransferConfig+0x60>)
 8003648:	430b      	orrs	r3, r1
 800364a:	43db      	mvns	r3, r3
 800364c:	ea02 0103 	and.w	r1, r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	430a      	orrs	r2, r1
 8003658:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800365a:	bf00      	nop
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	03ff63ff 	.word	0x03ff63ff

0800366c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b20      	cmp	r3, #32
 8003680:	d138      	bne.n	80036f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800368c:	2302      	movs	r3, #2
 800368e:	e032      	b.n	80036f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2224      	movs	r2, #36	@ 0x24
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0201 	bic.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6819      	ldr	r1, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	e000      	b.n	80036f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036f4:	2302      	movs	r3, #2
  }
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b20      	cmp	r3, #32
 8003716:	d139      	bne.n	800378c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003722:	2302      	movs	r3, #2
 8003724:	e033      	b.n	800378e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2224      	movs	r2, #36	@ 0x24
 8003732:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0201 	bic.w	r2, r2, #1
 8003744:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003754:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	021b      	lsls	r3, r3, #8
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4313      	orrs	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0201 	orr.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	e000      	b.n	800378e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800378c:	2302      	movs	r3, #2
  }
}
 800378e:	4618      	mov	r0, r3
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b084      	sub	sp, #16
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0b9      	b.n	8003920 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d106      	bne.n	80037c6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7fe fc4d 	bl	8002060 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2203      	movs	r2, #3
 80037ca:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f003 f991 	bl	8006afa <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037d8:	2300      	movs	r3, #0
 80037da:	73fb      	strb	r3, [r7, #15]
 80037dc:	e03e      	b.n	800385c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037de:	7bfa      	ldrb	r2, [r7, #15]
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	440b      	add	r3, r1
 80037ec:	3311      	adds	r3, #17
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037f2:	7bfa      	ldrb	r2, [r7, #15]
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	440b      	add	r3, r1
 8003800:	3310      	adds	r3, #16
 8003802:	7bfa      	ldrb	r2, [r7, #15]
 8003804:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003806:	7bfa      	ldrb	r2, [r7, #15]
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	440b      	add	r3, r1
 8003814:	3313      	adds	r3, #19
 8003816:	2200      	movs	r2, #0
 8003818:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800381a:	7bfa      	ldrb	r2, [r7, #15]
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	440b      	add	r3, r1
 8003828:	3320      	adds	r3, #32
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800382e:	7bfa      	ldrb	r2, [r7, #15]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	440b      	add	r3, r1
 800383c:	3324      	adds	r3, #36	@ 0x24
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003842:	7bfb      	ldrb	r3, [r7, #15]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	440b      	add	r3, r1
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	3301      	adds	r3, #1
 800385a:	73fb      	strb	r3, [r7, #15]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	791b      	ldrb	r3, [r3, #4]
 8003860:	7bfa      	ldrb	r2, [r7, #15]
 8003862:	429a      	cmp	r2, r3
 8003864:	d3bb      	bcc.n	80037de <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003866:	2300      	movs	r3, #0
 8003868:	73fb      	strb	r3, [r7, #15]
 800386a:	e044      	b.n	80038f6 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800386c:	7bfa      	ldrb	r2, [r7, #15]
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	440b      	add	r3, r1
 800387a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800387e:	2200      	movs	r2, #0
 8003880:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003882:	7bfa      	ldrb	r2, [r7, #15]
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	440b      	add	r3, r1
 8003890:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003894:	7bfa      	ldrb	r2, [r7, #15]
 8003896:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003898:	7bfa      	ldrb	r2, [r7, #15]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	440b      	add	r3, r1
 80038a6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038ae:	7bfa      	ldrb	r2, [r7, #15]
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	440b      	add	r3, r1
 80038bc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038c4:	7bfa      	ldrb	r2, [r7, #15]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	440b      	add	r3, r1
 80038d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038da:	7bfa      	ldrb	r2, [r7, #15]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	440b      	add	r3, r1
 80038e8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	3301      	adds	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	791b      	ldrb	r3, [r3, #4]
 80038fa:	7bfa      	ldrb	r2, [r7, #15]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d3b5      	bcc.n	800386c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3304      	adds	r3, #4
 8003908:	e893 0006 	ldmia.w	r3, {r1, r2}
 800390c:	f003 f910 	bl	8006b30 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800392e:	af00      	add	r7, sp, #0
 8003930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003934:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003938:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800393a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800393e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d102      	bne.n	800394e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	f001 b823 	b.w	8004994 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800394e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003952:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 817d 	beq.w	8003c5e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003964:	4bbc      	ldr	r3, [pc, #752]	@ (8003c58 <HAL_RCC_OscConfig+0x330>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 030c 	and.w	r3, r3, #12
 800396c:	2b04      	cmp	r3, #4
 800396e:	d00c      	beq.n	800398a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003970:	4bb9      	ldr	r3, [pc, #740]	@ (8003c58 <HAL_RCC_OscConfig+0x330>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	2b08      	cmp	r3, #8
 800397a:	d15c      	bne.n	8003a36 <HAL_RCC_OscConfig+0x10e>
 800397c:	4bb6      	ldr	r3, [pc, #728]	@ (8003c58 <HAL_RCC_OscConfig+0x330>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003988:	d155      	bne.n	8003a36 <HAL_RCC_OscConfig+0x10e>
 800398a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800398e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003992:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003996:	fa93 f3a3 	rbit	r3, r3
 800399a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800399e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a2:	fab3 f383 	clz	r3, r3
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d102      	bne.n	80039bc <HAL_RCC_OscConfig+0x94>
 80039b6:	4ba8      	ldr	r3, [pc, #672]	@ (8003c58 <HAL_RCC_OscConfig+0x330>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	e015      	b.n	80039e8 <HAL_RCC_OscConfig+0xc0>
 80039bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039c0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80039c8:	fa93 f3a3 	rbit	r3, r3
 80039cc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80039d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039d4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80039d8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80039dc:	fa93 f3a3 	rbit	r3, r3
 80039e0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80039e4:	4b9c      	ldr	r3, [pc, #624]	@ (8003c58 <HAL_RCC_OscConfig+0x330>)
 80039e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80039ec:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80039f0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80039f4:	fa92 f2a2 	rbit	r2, r2
 80039f8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80039fc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003a00:	fab2 f282 	clz	r2, r2
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	f042 0220 	orr.w	r2, r2, #32
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	f002 021f 	and.w	r2, r2, #31
 8003a10:	2101      	movs	r1, #1
 8003a12:	fa01 f202 	lsl.w	r2, r1, r2
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 811f 	beq.w	8003c5c <HAL_RCC_OscConfig+0x334>
 8003a1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f040 8116 	bne.w	8003c5c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	f000 bfaf 	b.w	8004994 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a46:	d106      	bne.n	8003a56 <HAL_RCC_OscConfig+0x12e>
 8003a48:	4b83      	ldr	r3, [pc, #524]	@ (8003c58 <HAL_RCC_OscConfig+0x330>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a82      	ldr	r2, [pc, #520]	@ (8003c58 <HAL_RCC_OscConfig+0x330>)
 8003a4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	e036      	b.n	8003ac4 <HAL_RCC_OscConfig+0x19c>
 8003a56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10c      	bne.n	8003a80 <HAL_RCC_OscConfig+0x158>
 8003a66:	4b7c      	ldr	r3, [pc, #496]	@ (8003c58 <HAL_RCC_OscConfig+0x330>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a7b      	ldr	r2, [pc, #492]	@ (8003c58 <HAL_RCC_OscConfig+0x330>)
 8003a6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	4b79      	ldr	r3, [pc, #484]	@ (8003c58 <HAL_RCC_OscConfig+0x330>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a78      	ldr	r2, [pc, #480]	@ (8003c58 <HAL_RCC_OscConfig+0x330>)
 8003a78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	e021      	b.n	8003ac4 <HAL_RCC_OscConfig+0x19c>
 8003a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a90:	d10c      	bne.n	8003aac <HAL_RCC_OscConfig+0x184>
 8003a92:	4b71      	ldr	r3, [pc, #452]	@ (8003c58 <HAL_RCC_OscConfig+0x330>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a70      	ldr	r2, [pc, #448]	@ (8003c58 <HAL_RCC_OscConfig+0x330>)
 8003a98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	4b6e      	ldr	r3, [pc, #440]	@ (8003c58 <HAL_RCC_OscConfig+0x330>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a6d      	ldr	r2, [pc, #436]	@ (8003c58 <HAL_RCC_OscConfig+0x330>)
 8003aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	e00b      	b.n	8003ac4 <HAL_RCC_OscConfig+0x19c>
 8003aac:	4b6a      	ldr	r3, [pc, #424]	@ (8003c58 <HAL_RCC_OscConfig+0x330>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a69      	ldr	r2, [pc, #420]	@ (8003c58 <HAL_RCC_OscConfig+0x330>)
 8003ab2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	4b67      	ldr	r3, [pc, #412]	@ (8003c58 <HAL_RCC_OscConfig+0x330>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a66      	ldr	r2, [pc, #408]	@ (8003c58 <HAL_RCC_OscConfig+0x330>)
 8003abe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ac2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ac4:	4b64      	ldr	r3, [pc, #400]	@ (8003c58 <HAL_RCC_OscConfig+0x330>)
 8003ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac8:	f023 020f 	bic.w	r2, r3, #15
 8003acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ad0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	495f      	ldr	r1, [pc, #380]	@ (8003c58 <HAL_RCC_OscConfig+0x330>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ade:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ae2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d059      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aee:	f7fe fb7f 	bl	80021f0 <HAL_GetTick>
 8003af2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af6:	e00a      	b.n	8003b0e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af8:	f7fe fb7a 	bl	80021f0 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b64      	cmp	r3, #100	@ 0x64
 8003b06:	d902      	bls.n	8003b0e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	f000 bf43 	b.w	8004994 <HAL_RCC_OscConfig+0x106c>
 8003b0e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b12:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b16:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003b1a:	fa93 f3a3 	rbit	r3, r3
 8003b1e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003b22:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b26:	fab3 f383 	clz	r3, r3
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	095b      	lsrs	r3, r3, #5
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d102      	bne.n	8003b40 <HAL_RCC_OscConfig+0x218>
 8003b3a:	4b47      	ldr	r3, [pc, #284]	@ (8003c58 <HAL_RCC_OscConfig+0x330>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	e015      	b.n	8003b6c <HAL_RCC_OscConfig+0x244>
 8003b40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b44:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b48:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003b4c:	fa93 f3a3 	rbit	r3, r3
 8003b50:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003b54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b58:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003b5c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003b60:	fa93 f3a3 	rbit	r3, r3
 8003b64:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003b68:	4b3b      	ldr	r3, [pc, #236]	@ (8003c58 <HAL_RCC_OscConfig+0x330>)
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b70:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003b74:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003b78:	fa92 f2a2 	rbit	r2, r2
 8003b7c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003b80:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003b84:	fab2 f282 	clz	r2, r2
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	f042 0220 	orr.w	r2, r2, #32
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	f002 021f 	and.w	r2, r2, #31
 8003b94:	2101      	movs	r1, #1
 8003b96:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0ab      	beq.n	8003af8 <HAL_RCC_OscConfig+0x1d0>
 8003ba0:	e05d      	b.n	8003c5e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba2:	f7fe fb25 	bl	80021f0 <HAL_GetTick>
 8003ba6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003baa:	e00a      	b.n	8003bc2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bac:	f7fe fb20 	bl	80021f0 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b64      	cmp	r3, #100	@ 0x64
 8003bba:	d902      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	f000 bee9 	b.w	8004994 <HAL_RCC_OscConfig+0x106c>
 8003bc2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bc6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003bce:	fa93 f3a3 	rbit	r3, r3
 8003bd2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003bd6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bda:	fab3 f383 	clz	r3, r3
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	f043 0301 	orr.w	r3, r3, #1
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d102      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x2cc>
 8003bee:	4b1a      	ldr	r3, [pc, #104]	@ (8003c58 <HAL_RCC_OscConfig+0x330>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	e015      	b.n	8003c20 <HAL_RCC_OscConfig+0x2f8>
 8003bf4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bf8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003c00:	fa93 f3a3 	rbit	r3, r3
 8003c04:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003c08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c0c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003c10:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003c14:	fa93 f3a3 	rbit	r3, r3
 8003c18:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003c58 <HAL_RCC_OscConfig+0x330>)
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c20:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c24:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003c28:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003c2c:	fa92 f2a2 	rbit	r2, r2
 8003c30:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003c34:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003c38:	fab2 f282 	clz	r2, r2
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	f042 0220 	orr.w	r2, r2, #32
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	f002 021f 	and.w	r2, r2, #31
 8003c48:	2101      	movs	r1, #1
 8003c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c4e:	4013      	ands	r3, r2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1ab      	bne.n	8003bac <HAL_RCC_OscConfig+0x284>
 8003c54:	e003      	b.n	8003c5e <HAL_RCC_OscConfig+0x336>
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 817d 	beq.w	8003f6e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c74:	4ba6      	ldr	r3, [pc, #664]	@ (8003f10 <HAL_RCC_OscConfig+0x5e8>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f003 030c 	and.w	r3, r3, #12
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00b      	beq.n	8003c98 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c80:	4ba3      	ldr	r3, [pc, #652]	@ (8003f10 <HAL_RCC_OscConfig+0x5e8>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 030c 	and.w	r3, r3, #12
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d172      	bne.n	8003d72 <HAL_RCC_OscConfig+0x44a>
 8003c8c:	4ba0      	ldr	r3, [pc, #640]	@ (8003f10 <HAL_RCC_OscConfig+0x5e8>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d16c      	bne.n	8003d72 <HAL_RCC_OscConfig+0x44a>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003ca2:	fa93 f3a3 	rbit	r3, r3
 8003ca6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003caa:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cae:	fab3 f383 	clz	r3, r3
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	095b      	lsrs	r3, r3, #5
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	f043 0301 	orr.w	r3, r3, #1
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d102      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x3a0>
 8003cc2:	4b93      	ldr	r3, [pc, #588]	@ (8003f10 <HAL_RCC_OscConfig+0x5e8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	e013      	b.n	8003cf0 <HAL_RCC_OscConfig+0x3c8>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cce:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003cd2:	fa93 f3a3 	rbit	r3, r3
 8003cd6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003cda:	2302      	movs	r3, #2
 8003cdc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003ce0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003ce4:	fa93 f3a3 	rbit	r3, r3
 8003ce8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003cec:	4b88      	ldr	r3, [pc, #544]	@ (8003f10 <HAL_RCC_OscConfig+0x5e8>)
 8003cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003cf6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003cfa:	fa92 f2a2 	rbit	r2, r2
 8003cfe:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003d02:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003d06:	fab2 f282 	clz	r2, r2
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	f042 0220 	orr.w	r2, r2, #32
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	f002 021f 	and.w	r2, r2, #31
 8003d16:	2101      	movs	r1, #1
 8003d18:	fa01 f202 	lsl.w	r2, r1, r2
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <HAL_RCC_OscConfig+0x410>
 8003d22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d002      	beq.n	8003d38 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f000 be2e 	b.w	8004994 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d38:	4b75      	ldr	r3, [pc, #468]	@ (8003f10 <HAL_RCC_OscConfig+0x5e8>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	21f8      	movs	r1, #248	@ 0xf8
 8003d4e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d52:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003d56:	fa91 f1a1 	rbit	r1, r1
 8003d5a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003d5e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003d62:	fab1 f181 	clz	r1, r1
 8003d66:	b2c9      	uxtb	r1, r1
 8003d68:	408b      	lsls	r3, r1
 8003d6a:	4969      	ldr	r1, [pc, #420]	@ (8003f10 <HAL_RCC_OscConfig+0x5e8>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d70:	e0fd      	b.n	8003f6e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 8088 	beq.w	8003e94 <HAL_RCC_OscConfig+0x56c>
 8003d84:	2301      	movs	r3, #1
 8003d86:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003d8e:	fa93 f3a3 	rbit	r3, r3
 8003d92:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003d96:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d9a:	fab3 f383 	clz	r3, r3
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003da4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	461a      	mov	r2, r3
 8003dac:	2301      	movs	r3, #1
 8003dae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db0:	f7fe fa1e 	bl	80021f0 <HAL_GetTick>
 8003db4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db8:	e00a      	b.n	8003dd0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dba:	f7fe fa19 	bl	80021f0 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d902      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	f000 bde2 	b.w	8004994 <HAL_RCC_OscConfig+0x106c>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003dda:	fa93 f3a3 	rbit	r3, r3
 8003dde:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003de2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de6:	fab3 f383 	clz	r3, r3
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	095b      	lsrs	r3, r3, #5
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	f043 0301 	orr.w	r3, r3, #1
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d102      	bne.n	8003e00 <HAL_RCC_OscConfig+0x4d8>
 8003dfa:	4b45      	ldr	r3, [pc, #276]	@ (8003f10 <HAL_RCC_OscConfig+0x5e8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	e013      	b.n	8003e28 <HAL_RCC_OscConfig+0x500>
 8003e00:	2302      	movs	r3, #2
 8003e02:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e06:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003e0a:	fa93 f3a3 	rbit	r3, r3
 8003e0e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003e12:	2302      	movs	r3, #2
 8003e14:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003e18:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003e1c:	fa93 f3a3 	rbit	r3, r3
 8003e20:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003e24:	4b3a      	ldr	r3, [pc, #232]	@ (8003f10 <HAL_RCC_OscConfig+0x5e8>)
 8003e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e28:	2202      	movs	r2, #2
 8003e2a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003e2e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003e32:	fa92 f2a2 	rbit	r2, r2
 8003e36:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003e3a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003e3e:	fab2 f282 	clz	r2, r2
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	f042 0220 	orr.w	r2, r2, #32
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	f002 021f 	and.w	r2, r2, #31
 8003e4e:	2101      	movs	r1, #1
 8003e50:	fa01 f202 	lsl.w	r2, r1, r2
 8003e54:	4013      	ands	r3, r2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0af      	beq.n	8003dba <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5a:	4b2d      	ldr	r3, [pc, #180]	@ (8003f10 <HAL_RCC_OscConfig+0x5e8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	21f8      	movs	r1, #248	@ 0xf8
 8003e70:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e74:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003e78:	fa91 f1a1 	rbit	r1, r1
 8003e7c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003e80:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003e84:	fab1 f181 	clz	r1, r1
 8003e88:	b2c9      	uxtb	r1, r1
 8003e8a:	408b      	lsls	r3, r1
 8003e8c:	4920      	ldr	r1, [pc, #128]	@ (8003f10 <HAL_RCC_OscConfig+0x5e8>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	600b      	str	r3, [r1, #0]
 8003e92:	e06c      	b.n	8003f6e <HAL_RCC_OscConfig+0x646>
 8003e94:	2301      	movs	r3, #1
 8003e96:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003e9e:	fa93 f3a3 	rbit	r3, r3
 8003ea2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003ea6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eaa:	fab3 f383 	clz	r3, r3
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003eb4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	461a      	mov	r2, r3
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec0:	f7fe f996 	bl	80021f0 <HAL_GetTick>
 8003ec4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec8:	e00a      	b.n	8003ee0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eca:	f7fe f991 	bl	80021f0 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d902      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	f000 bd5a 	b.w	8004994 <HAL_RCC_OscConfig+0x106c>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003eea:	fa93 f3a3 	rbit	r3, r3
 8003eee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ef6:	fab3 f383 	clz	r3, r3
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	095b      	lsrs	r3, r3, #5
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d104      	bne.n	8003f14 <HAL_RCC_OscConfig+0x5ec>
 8003f0a:	4b01      	ldr	r3, [pc, #4]	@ (8003f10 <HAL_RCC_OscConfig+0x5e8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	e015      	b.n	8003f3c <HAL_RCC_OscConfig+0x614>
 8003f10:	40021000 	.word	0x40021000
 8003f14:	2302      	movs	r3, #2
 8003f16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003f1e:	fa93 f3a3 	rbit	r3, r3
 8003f22:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003f26:	2302      	movs	r3, #2
 8003f28:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003f2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003f30:	fa93 f3a3 	rbit	r3, r3
 8003f34:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003f38:	4bc8      	ldr	r3, [pc, #800]	@ (800425c <HAL_RCC_OscConfig+0x934>)
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003f42:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003f46:	fa92 f2a2 	rbit	r2, r2
 8003f4a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003f4e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003f52:	fab2 f282 	clz	r2, r2
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	f042 0220 	orr.w	r2, r2, #32
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	f002 021f 	and.w	r2, r2, #31
 8003f62:	2101      	movs	r1, #1
 8003f64:	fa01 f202 	lsl.w	r2, r1, r2
 8003f68:	4013      	ands	r3, r2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1ad      	bne.n	8003eca <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 8110 	beq.w	80041a4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f88:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d079      	beq.n	8004088 <HAL_RCC_OscConfig+0x760>
 8003f94:	2301      	movs	r3, #1
 8003f96:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003f9e:	fa93 f3a3 	rbit	r3, r3
 8003fa2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003faa:	fab3 f383 	clz	r3, r3
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4bab      	ldr	r3, [pc, #684]	@ (8004260 <HAL_RCC_OscConfig+0x938>)
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	461a      	mov	r2, r3
 8003fba:	2301      	movs	r3, #1
 8003fbc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fbe:	f7fe f917 	bl	80021f0 <HAL_GetTick>
 8003fc2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc6:	e00a      	b.n	8003fde <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fc8:	f7fe f912 	bl	80021f0 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d902      	bls.n	8003fde <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	f000 bcdb 	b.w	8004994 <HAL_RCC_OscConfig+0x106c>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003fe8:	fa93 f3a3 	rbit	r3, r3
 8003fec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ff4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004000:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	fa93 f2a3 	rbit	r2, r3
 800400a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800400e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004018:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800401c:	2202      	movs	r2, #2
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004024:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	fa93 f2a3 	rbit	r2, r3
 800402e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004032:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004036:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004038:	4b88      	ldr	r3, [pc, #544]	@ (800425c <HAL_RCC_OscConfig+0x934>)
 800403a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800403c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004040:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004044:	2102      	movs	r1, #2
 8004046:	6019      	str	r1, [r3, #0]
 8004048:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800404c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	fa93 f1a3 	rbit	r1, r3
 8004056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800405a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800405e:	6019      	str	r1, [r3, #0]
  return result;
 8004060:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004064:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	fab3 f383 	clz	r3, r3
 800406e:	b2db      	uxtb	r3, r3
 8004070:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004074:	b2db      	uxtb	r3, r3
 8004076:	f003 031f 	and.w	r3, r3, #31
 800407a:	2101      	movs	r1, #1
 800407c:	fa01 f303 	lsl.w	r3, r1, r3
 8004080:	4013      	ands	r3, r2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0a0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x6a0>
 8004086:	e08d      	b.n	80041a4 <HAL_RCC_OscConfig+0x87c>
 8004088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800408c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004090:	2201      	movs	r2, #1
 8004092:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004094:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004098:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	fa93 f2a3 	rbit	r2, r3
 80040a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80040aa:	601a      	str	r2, [r3, #0]
  return result;
 80040ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040b0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80040b4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040b6:	fab3 f383 	clz	r3, r3
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	461a      	mov	r2, r3
 80040be:	4b68      	ldr	r3, [pc, #416]	@ (8004260 <HAL_RCC_OscConfig+0x938>)
 80040c0:	4413      	add	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	461a      	mov	r2, r3
 80040c6:	2300      	movs	r3, #0
 80040c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ca:	f7fe f891 	bl	80021f0 <HAL_GetTick>
 80040ce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d2:	e00a      	b.n	80040ea <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040d4:	f7fe f88c 	bl	80021f0 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d902      	bls.n	80040ea <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	f000 bc55 	b.w	8004994 <HAL_RCC_OscConfig+0x106c>
 80040ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80040f2:	2202      	movs	r2, #2
 80040f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040fa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	fa93 f2a3 	rbit	r2, r3
 8004104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004108:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004112:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004116:	2202      	movs	r2, #2
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800411e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	fa93 f2a3 	rbit	r2, r3
 8004128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800412c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004136:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800413a:	2202      	movs	r2, #2
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004142:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	fa93 f2a3 	rbit	r2, r3
 800414c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004150:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004154:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004156:	4b41      	ldr	r3, [pc, #260]	@ (800425c <HAL_RCC_OscConfig+0x934>)
 8004158:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800415a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800415e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004162:	2102      	movs	r1, #2
 8004164:	6019      	str	r1, [r3, #0]
 8004166:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800416a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	fa93 f1a3 	rbit	r1, r3
 8004174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004178:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800417c:	6019      	str	r1, [r3, #0]
  return result;
 800417e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004182:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	fab3 f383 	clz	r3, r3
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f003 031f 	and.w	r3, r3, #31
 8004198:	2101      	movs	r1, #1
 800419a:	fa01 f303 	lsl.w	r3, r1, r3
 800419e:	4013      	ands	r3, r2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d197      	bne.n	80040d4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 81a1 	beq.w	80044fc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ba:	2300      	movs	r3, #0
 80041bc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041c0:	4b26      	ldr	r3, [pc, #152]	@ (800425c <HAL_RCC_OscConfig+0x934>)
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d116      	bne.n	80041fa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041cc:	4b23      	ldr	r3, [pc, #140]	@ (800425c <HAL_RCC_OscConfig+0x934>)
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	4a22      	ldr	r2, [pc, #136]	@ (800425c <HAL_RCC_OscConfig+0x934>)
 80041d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041d6:	61d3      	str	r3, [r2, #28]
 80041d8:	4b20      	ldr	r3, [pc, #128]	@ (800425c <HAL_RCC_OscConfig+0x934>)
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80041e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041e4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ee:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80041f2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80041f4:	2301      	movs	r3, #1
 80041f6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004264 <HAL_RCC_OscConfig+0x93c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d11a      	bne.n	800423c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004206:	4b17      	ldr	r3, [pc, #92]	@ (8004264 <HAL_RCC_OscConfig+0x93c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a16      	ldr	r2, [pc, #88]	@ (8004264 <HAL_RCC_OscConfig+0x93c>)
 800420c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004210:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004212:	f7fd ffed 	bl	80021f0 <HAL_GetTick>
 8004216:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421a:	e009      	b.n	8004230 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421c:	f7fd ffe8 	bl	80021f0 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b64      	cmp	r3, #100	@ 0x64
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e3b1      	b.n	8004994 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004230:	4b0c      	ldr	r3, [pc, #48]	@ (8004264 <HAL_RCC_OscConfig+0x93c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0ef      	beq.n	800421c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800423c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004240:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d10d      	bne.n	8004268 <HAL_RCC_OscConfig+0x940>
 800424c:	4b03      	ldr	r3, [pc, #12]	@ (800425c <HAL_RCC_OscConfig+0x934>)
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	4a02      	ldr	r2, [pc, #8]	@ (800425c <HAL_RCC_OscConfig+0x934>)
 8004252:	f043 0301 	orr.w	r3, r3, #1
 8004256:	6213      	str	r3, [r2, #32]
 8004258:	e03c      	b.n	80042d4 <HAL_RCC_OscConfig+0x9ac>
 800425a:	bf00      	nop
 800425c:	40021000 	.word	0x40021000
 8004260:	10908120 	.word	0x10908120
 8004264:	40007000 	.word	0x40007000
 8004268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800426c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10c      	bne.n	8004292 <HAL_RCC_OscConfig+0x96a>
 8004278:	4bc1      	ldr	r3, [pc, #772]	@ (8004580 <HAL_RCC_OscConfig+0xc58>)
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	4ac0      	ldr	r2, [pc, #768]	@ (8004580 <HAL_RCC_OscConfig+0xc58>)
 800427e:	f023 0301 	bic.w	r3, r3, #1
 8004282:	6213      	str	r3, [r2, #32]
 8004284:	4bbe      	ldr	r3, [pc, #760]	@ (8004580 <HAL_RCC_OscConfig+0xc58>)
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	4abd      	ldr	r2, [pc, #756]	@ (8004580 <HAL_RCC_OscConfig+0xc58>)
 800428a:	f023 0304 	bic.w	r3, r3, #4
 800428e:	6213      	str	r3, [r2, #32]
 8004290:	e020      	b.n	80042d4 <HAL_RCC_OscConfig+0x9ac>
 8004292:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004296:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	2b05      	cmp	r3, #5
 80042a0:	d10c      	bne.n	80042bc <HAL_RCC_OscConfig+0x994>
 80042a2:	4bb7      	ldr	r3, [pc, #732]	@ (8004580 <HAL_RCC_OscConfig+0xc58>)
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	4ab6      	ldr	r2, [pc, #728]	@ (8004580 <HAL_RCC_OscConfig+0xc58>)
 80042a8:	f043 0304 	orr.w	r3, r3, #4
 80042ac:	6213      	str	r3, [r2, #32]
 80042ae:	4bb4      	ldr	r3, [pc, #720]	@ (8004580 <HAL_RCC_OscConfig+0xc58>)
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	4ab3      	ldr	r2, [pc, #716]	@ (8004580 <HAL_RCC_OscConfig+0xc58>)
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	6213      	str	r3, [r2, #32]
 80042ba:	e00b      	b.n	80042d4 <HAL_RCC_OscConfig+0x9ac>
 80042bc:	4bb0      	ldr	r3, [pc, #704]	@ (8004580 <HAL_RCC_OscConfig+0xc58>)
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	4aaf      	ldr	r2, [pc, #700]	@ (8004580 <HAL_RCC_OscConfig+0xc58>)
 80042c2:	f023 0301 	bic.w	r3, r3, #1
 80042c6:	6213      	str	r3, [r2, #32]
 80042c8:	4bad      	ldr	r3, [pc, #692]	@ (8004580 <HAL_RCC_OscConfig+0xc58>)
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	4aac      	ldr	r2, [pc, #688]	@ (8004580 <HAL_RCC_OscConfig+0xc58>)
 80042ce:	f023 0304 	bic.w	r3, r3, #4
 80042d2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8081 	beq.w	80043e8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042e6:	f7fd ff83 	bl	80021f0 <HAL_GetTick>
 80042ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ee:	e00b      	b.n	8004308 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042f0:	f7fd ff7e 	bl	80021f0 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004300:	4293      	cmp	r3, r2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e345      	b.n	8004994 <HAL_RCC_OscConfig+0x106c>
 8004308:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800430c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004310:	2202      	movs	r2, #2
 8004312:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004318:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	fa93 f2a3 	rbit	r2, r3
 8004322:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004326:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004330:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004334:	2202      	movs	r2, #2
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800433c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	fa93 f2a3 	rbit	r2, r3
 8004346:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800434a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800434e:	601a      	str	r2, [r3, #0]
  return result;
 8004350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004354:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004358:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800435a:	fab3 f383 	clz	r3, r3
 800435e:	b2db      	uxtb	r3, r3
 8004360:	095b      	lsrs	r3, r3, #5
 8004362:	b2db      	uxtb	r3, r3
 8004364:	f043 0302 	orr.w	r3, r3, #2
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d102      	bne.n	8004374 <HAL_RCC_OscConfig+0xa4c>
 800436e:	4b84      	ldr	r3, [pc, #528]	@ (8004580 <HAL_RCC_OscConfig+0xc58>)
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	e013      	b.n	800439c <HAL_RCC_OscConfig+0xa74>
 8004374:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004378:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800437c:	2202      	movs	r2, #2
 800437e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004384:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	fa93 f2a3 	rbit	r2, r3
 800438e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004392:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	4b79      	ldr	r3, [pc, #484]	@ (8004580 <HAL_RCC_OscConfig+0xc58>)
 800439a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043a0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80043a4:	2102      	movs	r1, #2
 80043a6:	6011      	str	r1, [r2, #0]
 80043a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043ac:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80043b0:	6812      	ldr	r2, [r2, #0]
 80043b2:	fa92 f1a2 	rbit	r1, r2
 80043b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043ba:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80043be:	6011      	str	r1, [r2, #0]
  return result;
 80043c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043c4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80043c8:	6812      	ldr	r2, [r2, #0]
 80043ca:	fab2 f282 	clz	r2, r2
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	f002 021f 	and.w	r2, r2, #31
 80043da:	2101      	movs	r1, #1
 80043dc:	fa01 f202 	lsl.w	r2, r1, r2
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d084      	beq.n	80042f0 <HAL_RCC_OscConfig+0x9c8>
 80043e6:	e07f      	b.n	80044e8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e8:	f7fd ff02 	bl	80021f0 <HAL_GetTick>
 80043ec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f0:	e00b      	b.n	800440a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043f2:	f7fd fefd 	bl	80021f0 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e2c4      	b.n	8004994 <HAL_RCC_OscConfig+0x106c>
 800440a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800440e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004412:	2202      	movs	r2, #2
 8004414:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800441a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	fa93 f2a3 	rbit	r2, r3
 8004424:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004428:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004432:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004436:	2202      	movs	r2, #2
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800443e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	fa93 f2a3 	rbit	r2, r3
 8004448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800444c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004450:	601a      	str	r2, [r3, #0]
  return result;
 8004452:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004456:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800445a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800445c:	fab3 f383 	clz	r3, r3
 8004460:	b2db      	uxtb	r3, r3
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	b2db      	uxtb	r3, r3
 8004466:	f043 0302 	orr.w	r3, r3, #2
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d102      	bne.n	8004476 <HAL_RCC_OscConfig+0xb4e>
 8004470:	4b43      	ldr	r3, [pc, #268]	@ (8004580 <HAL_RCC_OscConfig+0xc58>)
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	e013      	b.n	800449e <HAL_RCC_OscConfig+0xb76>
 8004476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800447a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800447e:	2202      	movs	r2, #2
 8004480:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004482:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004486:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	fa93 f2a3 	rbit	r2, r3
 8004490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004494:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	4b39      	ldr	r3, [pc, #228]	@ (8004580 <HAL_RCC_OscConfig+0xc58>)
 800449c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044a2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80044a6:	2102      	movs	r1, #2
 80044a8:	6011      	str	r1, [r2, #0]
 80044aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044ae:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80044b2:	6812      	ldr	r2, [r2, #0]
 80044b4:	fa92 f1a2 	rbit	r1, r2
 80044b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044bc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80044c0:	6011      	str	r1, [r2, #0]
  return result;
 80044c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044c6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80044ca:	6812      	ldr	r2, [r2, #0]
 80044cc:	fab2 f282 	clz	r2, r2
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	f002 021f 	and.w	r2, r2, #31
 80044dc:	2101      	movs	r1, #1
 80044de:	fa01 f202 	lsl.w	r2, r1, r2
 80044e2:	4013      	ands	r3, r2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d184      	bne.n	80043f2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044e8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d105      	bne.n	80044fc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f0:	4b23      	ldr	r3, [pc, #140]	@ (8004580 <HAL_RCC_OscConfig+0xc58>)
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	4a22      	ldr	r2, [pc, #136]	@ (8004580 <HAL_RCC_OscConfig+0xc58>)
 80044f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044fa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004500:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 8242 	beq.w	8004992 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800450e:	4b1c      	ldr	r3, [pc, #112]	@ (8004580 <HAL_RCC_OscConfig+0xc58>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f003 030c 	and.w	r3, r3, #12
 8004516:	2b08      	cmp	r3, #8
 8004518:	f000 8213 	beq.w	8004942 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800451c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004520:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	2b02      	cmp	r3, #2
 800452a:	f040 8162 	bne.w	80047f2 <HAL_RCC_OscConfig+0xeca>
 800452e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004532:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004536:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800453a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004540:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	fa93 f2a3 	rbit	r2, r3
 800454a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800454e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004552:	601a      	str	r2, [r3, #0]
  return result;
 8004554:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004558:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800455c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800455e:	fab3 f383 	clz	r3, r3
 8004562:	b2db      	uxtb	r3, r3
 8004564:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004568:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	461a      	mov	r2, r3
 8004570:	2300      	movs	r3, #0
 8004572:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004574:	f7fd fe3c 	bl	80021f0 <HAL_GetTick>
 8004578:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800457c:	e00c      	b.n	8004598 <HAL_RCC_OscConfig+0xc70>
 800457e:	bf00      	nop
 8004580:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004584:	f7fd fe34 	bl	80021f0 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e1fd      	b.n	8004994 <HAL_RCC_OscConfig+0x106c>
 8004598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800459c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80045a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045aa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	fa93 f2a3 	rbit	r2, r3
 80045b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045b8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80045bc:	601a      	str	r2, [r3, #0]
  return result;
 80045be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045c2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80045c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045c8:	fab3 f383 	clz	r3, r3
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	095b      	lsrs	r3, r3, #5
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	f043 0301 	orr.w	r3, r3, #1
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d102      	bne.n	80045e2 <HAL_RCC_OscConfig+0xcba>
 80045dc:	4bb0      	ldr	r3, [pc, #704]	@ (80048a0 <HAL_RCC_OscConfig+0xf78>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	e027      	b.n	8004632 <HAL_RCC_OscConfig+0xd0a>
 80045e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045e6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80045ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045f4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	fa93 f2a3 	rbit	r2, r3
 80045fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004602:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800460c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004610:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800461a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	fa93 f2a3 	rbit	r2, r3
 8004624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004628:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	4b9c      	ldr	r3, [pc, #624]	@ (80048a0 <HAL_RCC_OscConfig+0xf78>)
 8004630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004632:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004636:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800463a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800463e:	6011      	str	r1, [r2, #0]
 8004640:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004644:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004648:	6812      	ldr	r2, [r2, #0]
 800464a:	fa92 f1a2 	rbit	r1, r2
 800464e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004652:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004656:	6011      	str	r1, [r2, #0]
  return result;
 8004658:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800465c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004660:	6812      	ldr	r2, [r2, #0]
 8004662:	fab2 f282 	clz	r2, r2
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	f042 0220 	orr.w	r2, r2, #32
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	f002 021f 	and.w	r2, r2, #31
 8004672:	2101      	movs	r1, #1
 8004674:	fa01 f202 	lsl.w	r2, r1, r2
 8004678:	4013      	ands	r3, r2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d182      	bne.n	8004584 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800467e:	4b88      	ldr	r3, [pc, #544]	@ (80048a0 <HAL_RCC_OscConfig+0xf78>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004686:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800468a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004696:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	430b      	orrs	r3, r1
 80046a0:	497f      	ldr	r1, [pc, #508]	@ (80048a0 <HAL_RCC_OscConfig+0xf78>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	604b      	str	r3, [r1, #4]
 80046a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046aa:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80046ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80046b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046b8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	fa93 f2a3 	rbit	r2, r3
 80046c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046c6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80046ca:	601a      	str	r2, [r3, #0]
  return result;
 80046cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046d0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80046d4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046d6:	fab3 f383 	clz	r3, r3
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80046e0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	461a      	mov	r2, r3
 80046e8:	2301      	movs	r3, #1
 80046ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ec:	f7fd fd80 	bl	80021f0 <HAL_GetTick>
 80046f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046f4:	e009      	b.n	800470a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f6:	f7fd fd7b 	bl	80021f0 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e144      	b.n	8004994 <HAL_RCC_OscConfig+0x106c>
 800470a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800470e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004712:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004716:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004718:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800471c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	fa93 f2a3 	rbit	r2, r3
 8004726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800472a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800472e:	601a      	str	r2, [r3, #0]
  return result;
 8004730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004734:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004738:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800473a:	fab3 f383 	clz	r3, r3
 800473e:	b2db      	uxtb	r3, r3
 8004740:	095b      	lsrs	r3, r3, #5
 8004742:	b2db      	uxtb	r3, r3
 8004744:	f043 0301 	orr.w	r3, r3, #1
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b01      	cmp	r3, #1
 800474c:	d102      	bne.n	8004754 <HAL_RCC_OscConfig+0xe2c>
 800474e:	4b54      	ldr	r3, [pc, #336]	@ (80048a0 <HAL_RCC_OscConfig+0xf78>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	e027      	b.n	80047a4 <HAL_RCC_OscConfig+0xe7c>
 8004754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004758:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800475c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004760:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004766:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	fa93 f2a3 	rbit	r2, r3
 8004770:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004774:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800477e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004782:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800478c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	fa93 f2a3 	rbit	r2, r3
 8004796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800479a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	4b3f      	ldr	r3, [pc, #252]	@ (80048a0 <HAL_RCC_OscConfig+0xf78>)
 80047a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047a8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80047ac:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80047b0:	6011      	str	r1, [r2, #0]
 80047b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047b6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80047ba:	6812      	ldr	r2, [r2, #0]
 80047bc:	fa92 f1a2 	rbit	r1, r2
 80047c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047c4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80047c8:	6011      	str	r1, [r2, #0]
  return result;
 80047ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047ce:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80047d2:	6812      	ldr	r2, [r2, #0]
 80047d4:	fab2 f282 	clz	r2, r2
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	f042 0220 	orr.w	r2, r2, #32
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	f002 021f 	and.w	r2, r2, #31
 80047e4:	2101      	movs	r1, #1
 80047e6:	fa01 f202 	lsl.w	r2, r1, r2
 80047ea:	4013      	ands	r3, r2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d082      	beq.n	80046f6 <HAL_RCC_OscConfig+0xdce>
 80047f0:	e0cf      	b.n	8004992 <HAL_RCC_OscConfig+0x106a>
 80047f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047f6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80047fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004804:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	fa93 f2a3 	rbit	r2, r3
 800480e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004812:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004816:	601a      	str	r2, [r3, #0]
  return result;
 8004818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800481c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004820:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004822:	fab3 f383 	clz	r3, r3
 8004826:	b2db      	uxtb	r3, r3
 8004828:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800482c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	461a      	mov	r2, r3
 8004834:	2300      	movs	r3, #0
 8004836:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004838:	f7fd fcda 	bl	80021f0 <HAL_GetTick>
 800483c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004840:	e009      	b.n	8004856 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004842:	f7fd fcd5 	bl	80021f0 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e09e      	b.n	8004994 <HAL_RCC_OscConfig+0x106c>
 8004856:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800485a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800485e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004862:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004864:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004868:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	fa93 f2a3 	rbit	r2, r3
 8004872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004876:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800487a:	601a      	str	r2, [r3, #0]
  return result;
 800487c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004880:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004884:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004886:	fab3 f383 	clz	r3, r3
 800488a:	b2db      	uxtb	r3, r3
 800488c:	095b      	lsrs	r3, r3, #5
 800488e:	b2db      	uxtb	r3, r3
 8004890:	f043 0301 	orr.w	r3, r3, #1
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b01      	cmp	r3, #1
 8004898:	d104      	bne.n	80048a4 <HAL_RCC_OscConfig+0xf7c>
 800489a:	4b01      	ldr	r3, [pc, #4]	@ (80048a0 <HAL_RCC_OscConfig+0xf78>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	e029      	b.n	80048f4 <HAL_RCC_OscConfig+0xfcc>
 80048a0:	40021000 	.word	0x40021000
 80048a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048a8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80048ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048b6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	fa93 f2a3 	rbit	r2, r3
 80048c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048c4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048ce:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80048d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048dc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	fa93 f2a3 	rbit	r2, r3
 80048e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048ea:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	4b2b      	ldr	r3, [pc, #172]	@ (80049a0 <HAL_RCC_OscConfig+0x1078>)
 80048f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80048f8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80048fc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004900:	6011      	str	r1, [r2, #0]
 8004902:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004906:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800490a:	6812      	ldr	r2, [r2, #0]
 800490c:	fa92 f1a2 	rbit	r1, r2
 8004910:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004914:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004918:	6011      	str	r1, [r2, #0]
  return result;
 800491a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800491e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004922:	6812      	ldr	r2, [r2, #0]
 8004924:	fab2 f282 	clz	r2, r2
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	f042 0220 	orr.w	r2, r2, #32
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	f002 021f 	and.w	r2, r2, #31
 8004934:	2101      	movs	r1, #1
 8004936:	fa01 f202 	lsl.w	r2, r1, r2
 800493a:	4013      	ands	r3, r2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d180      	bne.n	8004842 <HAL_RCC_OscConfig+0xf1a>
 8004940:	e027      	b.n	8004992 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004946:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e01e      	b.n	8004994 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004956:	4b12      	ldr	r3, [pc, #72]	@ (80049a0 <HAL_RCC_OscConfig+0x1078>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800495e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004962:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800496a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	429a      	cmp	r2, r3
 8004974:	d10b      	bne.n	800498e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004976:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800497a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800497e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004982:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800498a:	429a      	cmp	r2, r3
 800498c:	d001      	beq.n	8004992 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	40021000 	.word	0x40021000

080049a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b09e      	sub	sp, #120	@ 0x78
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e162      	b.n	8004c82 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049bc:	4b90      	ldr	r3, [pc, #576]	@ (8004c00 <HAL_RCC_ClockConfig+0x25c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d910      	bls.n	80049ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ca:	4b8d      	ldr	r3, [pc, #564]	@ (8004c00 <HAL_RCC_ClockConfig+0x25c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f023 0207 	bic.w	r2, r3, #7
 80049d2:	498b      	ldr	r1, [pc, #556]	@ (8004c00 <HAL_RCC_ClockConfig+0x25c>)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049da:	4b89      	ldr	r3, [pc, #548]	@ (8004c00 <HAL_RCC_ClockConfig+0x25c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d001      	beq.n	80049ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e14a      	b.n	8004c82 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d008      	beq.n	8004a0a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049f8:	4b82      	ldr	r3, [pc, #520]	@ (8004c04 <HAL_RCC_ClockConfig+0x260>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	497f      	ldr	r1, [pc, #508]	@ (8004c04 <HAL_RCC_ClockConfig+0x260>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 80dc 	beq.w	8004bd0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d13c      	bne.n	8004a9a <HAL_RCC_ClockConfig+0xf6>
 8004a20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a24:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a28:	fa93 f3a3 	rbit	r3, r3
 8004a2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004a2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a30:	fab3 f383 	clz	r3, r3
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	095b      	lsrs	r3, r3, #5
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	f043 0301 	orr.w	r3, r3, #1
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d102      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xa6>
 8004a44:	4b6f      	ldr	r3, [pc, #444]	@ (8004c04 <HAL_RCC_ClockConfig+0x260>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	e00f      	b.n	8004a6a <HAL_RCC_ClockConfig+0xc6>
 8004a4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a4e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a52:	fa93 f3a3 	rbit	r3, r3
 8004a56:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a60:	fa93 f3a3 	rbit	r3, r3
 8004a64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a66:	4b67      	ldr	r3, [pc, #412]	@ (8004c04 <HAL_RCC_ClockConfig+0x260>)
 8004a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004a6e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a72:	fa92 f2a2 	rbit	r2, r2
 8004a76:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004a78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004a7a:	fab2 f282 	clz	r2, r2
 8004a7e:	b2d2      	uxtb	r2, r2
 8004a80:	f042 0220 	orr.w	r2, r2, #32
 8004a84:	b2d2      	uxtb	r2, r2
 8004a86:	f002 021f 	and.w	r2, r2, #31
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a90:	4013      	ands	r3, r2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d17b      	bne.n	8004b8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e0f3      	b.n	8004c82 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d13c      	bne.n	8004b1c <HAL_RCC_ClockConfig+0x178>
 8004aa2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004aa6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004aaa:	fa93 f3a3 	rbit	r3, r3
 8004aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab2:	fab3 f383 	clz	r3, r3
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	095b      	lsrs	r3, r3, #5
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	f043 0301 	orr.w	r3, r3, #1
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d102      	bne.n	8004acc <HAL_RCC_ClockConfig+0x128>
 8004ac6:	4b4f      	ldr	r3, [pc, #316]	@ (8004c04 <HAL_RCC_ClockConfig+0x260>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	e00f      	b.n	8004aec <HAL_RCC_ClockConfig+0x148>
 8004acc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ad4:	fa93 f3a3 	rbit	r3, r3
 8004ad8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ada:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ade:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ae0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ae2:	fa93 f3a3 	rbit	r3, r3
 8004ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ae8:	4b46      	ldr	r3, [pc, #280]	@ (8004c04 <HAL_RCC_ClockConfig+0x260>)
 8004aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004af0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004af2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004af4:	fa92 f2a2 	rbit	r2, r2
 8004af8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004afa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004afc:	fab2 f282 	clz	r2, r2
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	f042 0220 	orr.w	r2, r2, #32
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	f002 021f 	and.w	r2, r2, #31
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b12:	4013      	ands	r3, r2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d13a      	bne.n	8004b8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0b2      	b.n	8004c82 <HAL_RCC_ClockConfig+0x2de>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b22:	fa93 f3a3 	rbit	r3, r3
 8004b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b2a:	fab3 f383 	clz	r3, r3
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	095b      	lsrs	r3, r3, #5
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	f043 0301 	orr.w	r3, r3, #1
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d102      	bne.n	8004b44 <HAL_RCC_ClockConfig+0x1a0>
 8004b3e:	4b31      	ldr	r3, [pc, #196]	@ (8004c04 <HAL_RCC_ClockConfig+0x260>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	e00d      	b.n	8004b60 <HAL_RCC_ClockConfig+0x1bc>
 8004b44:	2302      	movs	r3, #2
 8004b46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b4a:	fa93 f3a3 	rbit	r3, r3
 8004b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b50:	2302      	movs	r3, #2
 8004b52:	623b      	str	r3, [r7, #32]
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	fa93 f3a3 	rbit	r3, r3
 8004b5a:	61fb      	str	r3, [r7, #28]
 8004b5c:	4b29      	ldr	r3, [pc, #164]	@ (8004c04 <HAL_RCC_ClockConfig+0x260>)
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b60:	2202      	movs	r2, #2
 8004b62:	61ba      	str	r2, [r7, #24]
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	fa92 f2a2 	rbit	r2, r2
 8004b6a:	617a      	str	r2, [r7, #20]
  return result;
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	fab2 f282 	clz	r2, r2
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	f042 0220 	orr.w	r2, r2, #32
 8004b78:	b2d2      	uxtb	r2, r2
 8004b7a:	f002 021f 	and.w	r2, r2, #31
 8004b7e:	2101      	movs	r1, #1
 8004b80:	fa01 f202 	lsl.w	r2, r1, r2
 8004b84:	4013      	ands	r3, r2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e079      	b.n	8004c82 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8004c04 <HAL_RCC_ClockConfig+0x260>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f023 0203 	bic.w	r2, r3, #3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	491a      	ldr	r1, [pc, #104]	@ (8004c04 <HAL_RCC_ClockConfig+0x260>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ba0:	f7fd fb26 	bl	80021f0 <HAL_GetTick>
 8004ba4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ba6:	e00a      	b.n	8004bbe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba8:	f7fd fb22 	bl	80021f0 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e061      	b.n	8004c82 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bbe:	4b11      	ldr	r3, [pc, #68]	@ (8004c04 <HAL_RCC_ClockConfig+0x260>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f003 020c 	and.w	r2, r3, #12
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d1eb      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c00 <HAL_RCC_ClockConfig+0x25c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d214      	bcs.n	8004c08 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bde:	4b08      	ldr	r3, [pc, #32]	@ (8004c00 <HAL_RCC_ClockConfig+0x25c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f023 0207 	bic.w	r2, r3, #7
 8004be6:	4906      	ldr	r1, [pc, #24]	@ (8004c00 <HAL_RCC_ClockConfig+0x25c>)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bee:	4b04      	ldr	r3, [pc, #16]	@ (8004c00 <HAL_RCC_ClockConfig+0x25c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d005      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e040      	b.n	8004c82 <HAL_RCC_ClockConfig+0x2de>
 8004c00:	40022000 	.word	0x40022000
 8004c04:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d008      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c14:	4b1d      	ldr	r3, [pc, #116]	@ (8004c8c <HAL_RCC_ClockConfig+0x2e8>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	491a      	ldr	r1, [pc, #104]	@ (8004c8c <HAL_RCC_ClockConfig+0x2e8>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d009      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c32:	4b16      	ldr	r3, [pc, #88]	@ (8004c8c <HAL_RCC_ClockConfig+0x2e8>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	4912      	ldr	r1, [pc, #72]	@ (8004c8c <HAL_RCC_ClockConfig+0x2e8>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004c46:	f000 f829 	bl	8004c9c <HAL_RCC_GetSysClockFreq>
 8004c4a:	4601      	mov	r1, r0
 8004c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8004c8c <HAL_RCC_ClockConfig+0x2e8>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c54:	22f0      	movs	r2, #240	@ 0xf0
 8004c56:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	fa92 f2a2 	rbit	r2, r2
 8004c5e:	60fa      	str	r2, [r7, #12]
  return result;
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	fab2 f282 	clz	r2, r2
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	40d3      	lsrs	r3, r2
 8004c6a:	4a09      	ldr	r2, [pc, #36]	@ (8004c90 <HAL_RCC_ClockConfig+0x2ec>)
 8004c6c:	5cd3      	ldrb	r3, [r2, r3]
 8004c6e:	fa21 f303 	lsr.w	r3, r1, r3
 8004c72:	4a08      	ldr	r2, [pc, #32]	@ (8004c94 <HAL_RCC_ClockConfig+0x2f0>)
 8004c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004c76:	4b08      	ldr	r3, [pc, #32]	@ (8004c98 <HAL_RCC_ClockConfig+0x2f4>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fd fa74 	bl	8002168 <HAL_InitTick>
  
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3778      	adds	r7, #120	@ 0x78
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	08006bdc 	.word	0x08006bdc
 8004c94:	20000000 	.word	0x20000000
 8004c98:	20000004 	.word	0x20000004

08004c9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60bb      	str	r3, [r7, #8]
 8004caa:	2300      	movs	r3, #0
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8004d30 <HAL_RCC_GetSysClockFreq+0x94>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f003 030c 	and.w	r3, r3, #12
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d002      	beq.n	8004ccc <HAL_RCC_GetSysClockFreq+0x30>
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d003      	beq.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x36>
 8004cca:	e026      	b.n	8004d1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ccc:	4b19      	ldr	r3, [pc, #100]	@ (8004d34 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cce:	613b      	str	r3, [r7, #16]
      break;
 8004cd0:	e026      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	0c9b      	lsrs	r3, r3, #18
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	4a17      	ldr	r2, [pc, #92]	@ (8004d38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004cdc:	5cd3      	ldrb	r3, [r2, r3]
 8004cde:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004ce0:	4b13      	ldr	r3, [pc, #76]	@ (8004d30 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce4:	f003 030f 	and.w	r3, r3, #15
 8004ce8:	4a14      	ldr	r2, [pc, #80]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004cea:	5cd3      	ldrb	r3, [r2, r3]
 8004cec:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d008      	beq.n	8004d0a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8004d34 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	fb02 f303 	mul.w	r3, r2, r3
 8004d06:	617b      	str	r3, [r7, #20]
 8004d08:	e004      	b.n	8004d14 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a0c      	ldr	r2, [pc, #48]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d0e:	fb02 f303 	mul.w	r3, r2, r3
 8004d12:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	613b      	str	r3, [r7, #16]
      break;
 8004d18:	e002      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d1a:	4b06      	ldr	r3, [pc, #24]	@ (8004d34 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d1c:	613b      	str	r3, [r7, #16]
      break;
 8004d1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d20:	693b      	ldr	r3, [r7, #16]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40021000 	.word	0x40021000
 8004d34:	007a1200 	.word	0x007a1200
 8004d38:	08006bf4 	.word	0x08006bf4
 8004d3c:	08006c04 	.word	0x08006c04
 8004d40:	003d0900 	.word	0x003d0900

08004d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d48:	4b03      	ldr	r3, [pc, #12]	@ (8004d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	20000000 	.word	0x20000000

08004d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004d62:	f7ff ffef 	bl	8004d44 <HAL_RCC_GetHCLKFreq>
 8004d66:	4601      	mov	r1, r0
 8004d68:	4b0b      	ldr	r3, [pc, #44]	@ (8004d98 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d70:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004d74:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	fa92 f2a2 	rbit	r2, r2
 8004d7c:	603a      	str	r2, [r7, #0]
  return result;
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	fab2 f282 	clz	r2, r2
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	40d3      	lsrs	r3, r2
 8004d88:	4a04      	ldr	r2, [pc, #16]	@ (8004d9c <HAL_RCC_GetPCLK1Freq+0x40>)
 8004d8a:	5cd3      	ldrb	r3, [r2, r3]
 8004d8c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004d90:	4618      	mov	r0, r3
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	08006bec 	.word	0x08006bec

08004da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004da6:	f7ff ffcd 	bl	8004d44 <HAL_RCC_GetHCLKFreq>
 8004daa:	4601      	mov	r1, r0
 8004dac:	4b0b      	ldr	r3, [pc, #44]	@ (8004ddc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004db4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004db8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	fa92 f2a2 	rbit	r2, r2
 8004dc0:	603a      	str	r2, [r7, #0]
  return result;
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	fab2 f282 	clz	r2, r2
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	40d3      	lsrs	r3, r2
 8004dcc:	4a04      	ldr	r2, [pc, #16]	@ (8004de0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004dce:	5cd3      	ldrb	r3, [r2, r3]
 8004dd0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	08006bec 	.word	0x08006bec

08004de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b092      	sub	sp, #72	@ 0x48
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004df4:	2300      	movs	r3, #0
 8004df6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 80d4 	beq.w	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e08:	4b4e      	ldr	r3, [pc, #312]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10e      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e14:	4b4b      	ldr	r3, [pc, #300]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	4a4a      	ldr	r2, [pc, #296]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e1e:	61d3      	str	r3, [r2, #28]
 8004e20:	4b48      	ldr	r3, [pc, #288]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e32:	4b45      	ldr	r3, [pc, #276]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d118      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e3e:	4b42      	ldr	r3, [pc, #264]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a41      	ldr	r2, [pc, #260]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e48:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e4a:	f7fd f9d1 	bl	80021f0 <HAL_GetTick>
 8004e4e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e50:	e008      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e52:	f7fd f9cd 	bl	80021f0 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b64      	cmp	r3, #100	@ 0x64
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e12d      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e64:	4b38      	ldr	r3, [pc, #224]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d0f0      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e70:	4b34      	ldr	r3, [pc, #208]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 8084 	beq.w	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e8a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d07c      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e90:	4b2c      	ldr	r3, [pc, #176]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004e9e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea2:	fa93 f3a3 	rbit	r3, r3
 8004ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eaa:	fab3 f383 	clz	r3, r3
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4b26      	ldr	r3, [pc, #152]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004eb4:	4413      	add	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	461a      	mov	r2, r3
 8004eba:	2301      	movs	r3, #1
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec6:	fa93 f3a3 	rbit	r3, r3
 8004eca:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ece:	fab3 f383 	clz	r3, r3
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ed8:	4413      	add	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	461a      	mov	r2, r3
 8004ede:	2300      	movs	r3, #0
 8004ee0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ee2:	4a18      	ldr	r2, [pc, #96]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ee6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d04b      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef2:	f7fd f97d 	bl	80021f0 <HAL_GetTick>
 8004ef6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef8:	e00a      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004efa:	f7fd f979 	bl	80021f0 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e0d7      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8004f10:	2302      	movs	r3, #2
 8004f12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f16:	fa93 f3a3 	rbit	r3, r3
 8004f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	623b      	str	r3, [r7, #32]
 8004f20:	6a3b      	ldr	r3, [r7, #32]
 8004f22:	fa93 f3a3 	rbit	r3, r3
 8004f26:	61fb      	str	r3, [r7, #28]
  return result;
 8004f28:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f2a:	fab3 f383 	clz	r3, r3
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	095b      	lsrs	r3, r3, #5
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	f043 0302 	orr.w	r3, r3, #2
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d108      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004f3e:	4b01      	ldr	r3, [pc, #4]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	e00d      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004f44:	40021000 	.word	0x40021000
 8004f48:	40007000 	.word	0x40007000
 8004f4c:	10908100 	.word	0x10908100
 8004f50:	2302      	movs	r3, #2
 8004f52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	fa93 f3a3 	rbit	r3, r3
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	4b5a      	ldr	r3, [pc, #360]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f60:	2202      	movs	r2, #2
 8004f62:	613a      	str	r2, [r7, #16]
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	fa92 f2a2 	rbit	r2, r2
 8004f6a:	60fa      	str	r2, [r7, #12]
  return result;
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	fab2 f282 	clz	r2, r2
 8004f72:	b2d2      	uxtb	r2, r2
 8004f74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f78:	b2d2      	uxtb	r2, r2
 8004f7a:	f002 021f 	and.w	r2, r2, #31
 8004f7e:	2101      	movs	r1, #1
 8004f80:	fa01 f202 	lsl.w	r2, r1, r2
 8004f84:	4013      	ands	r3, r2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0b7      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004f8a:	4b4f      	ldr	r3, [pc, #316]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	494c      	ldr	r1, [pc, #304]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f9c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d105      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fa4:	4b48      	ldr	r3, [pc, #288]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	4a47      	ldr	r2, [pc, #284]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004faa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d008      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fbc:	4b42      	ldr	r3, [pc, #264]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc0:	f023 0203 	bic.w	r2, r3, #3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	493f      	ldr	r1, [pc, #252]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d008      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fda:	4b3b      	ldr	r3, [pc, #236]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fde:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	4938      	ldr	r1, [pc, #224]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d008      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ff8:	4b33      	ldr	r3, [pc, #204]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	4930      	ldr	r1, [pc, #192]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005006:	4313      	orrs	r3, r2
 8005008:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d008      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005016:	4b2c      	ldr	r3, [pc, #176]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501a:	f023 0210 	bic.w	r2, r3, #16
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	4929      	ldr	r1, [pc, #164]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005024:	4313      	orrs	r3, r2
 8005026:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d008      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005034:	4b24      	ldr	r3, [pc, #144]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005040:	4921      	ldr	r1, [pc, #132]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005042:	4313      	orrs	r3, r2
 8005044:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	d008      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005052:	4b1d      	ldr	r3, [pc, #116]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005056:	f023 0220 	bic.w	r2, r3, #32
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	491a      	ldr	r1, [pc, #104]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005060:	4313      	orrs	r3, r2
 8005062:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800506c:	2b00      	cmp	r3, #0
 800506e:	d008      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005070:	4b15      	ldr	r3, [pc, #84]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	4912      	ldr	r1, [pc, #72]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800507e:	4313      	orrs	r3, r2
 8005080:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800508a:	2b00      	cmp	r3, #0
 800508c:	d008      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 800508e:	4b0e      	ldr	r3, [pc, #56]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	490b      	ldr	r1, [pc, #44]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800509c:	4313      	orrs	r3, r2
 800509e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d008      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050ac:	4b06      	ldr	r3, [pc, #24]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80050ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b8:	4903      	ldr	r1, [pc, #12]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3748      	adds	r7, #72	@ 0x48
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40021000 	.word	0x40021000

080050cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e09d      	b.n	800521a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d108      	bne.n	80050f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050ee:	d009      	beq.n	8005104 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	61da      	str	r2, [r3, #28]
 80050f6:	e005      	b.n	8005104 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d106      	bne.n	8005124 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7fc f8b6 	bl	8001290 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800513a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005144:	d902      	bls.n	800514c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	e002      	b.n	8005152 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800514c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005150:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800515a:	d007      	beq.n	800516c <HAL_SPI_Init+0xa0>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005164:	d002      	beq.n	800516c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800517c:	431a      	orrs	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051a4:	431a      	orrs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ae:	ea42 0103 	orr.w	r1, r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	0c1b      	lsrs	r3, r3, #16
 80051c8:	f003 0204 	and.w	r2, r3, #4
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d0:	f003 0310 	and.w	r3, r3, #16
 80051d4:	431a      	orrs	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051da:	f003 0308 	and.w	r3, r3, #8
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80051e8:	ea42 0103 	orr.w	r1, r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69da      	ldr	r2, [r3, #28]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005208:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b082      	sub	sp, #8
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e041      	b.n	80052b8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d106      	bne.n	800524e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7fc fbe5 	bl	8001a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2202      	movs	r2, #2
 8005252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	3304      	adds	r3, #4
 800525e:	4619      	mov	r1, r3
 8005260:	4610      	mov	r0, r2
 8005262:	f000 fbbd 	bl	80059e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e041      	b.n	8005356 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fc fc9a 	bl	8001c20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4619      	mov	r1, r3
 80052fe:	4610      	mov	r0, r2
 8005300:	f000 fb6e 	bl	80059e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d109      	bne.n	8005384 <HAL_TIM_PWM_Start+0x24>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b01      	cmp	r3, #1
 800537a:	bf14      	ite	ne
 800537c:	2301      	movne	r3, #1
 800537e:	2300      	moveq	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	e022      	b.n	80053ca <HAL_TIM_PWM_Start+0x6a>
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	2b04      	cmp	r3, #4
 8005388:	d109      	bne.n	800539e <HAL_TIM_PWM_Start+0x3e>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b01      	cmp	r3, #1
 8005394:	bf14      	ite	ne
 8005396:	2301      	movne	r3, #1
 8005398:	2300      	moveq	r3, #0
 800539a:	b2db      	uxtb	r3, r3
 800539c:	e015      	b.n	80053ca <HAL_TIM_PWM_Start+0x6a>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d109      	bne.n	80053b8 <HAL_TIM_PWM_Start+0x58>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	bf14      	ite	ne
 80053b0:	2301      	movne	r3, #1
 80053b2:	2300      	moveq	r3, #0
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	e008      	b.n	80053ca <HAL_TIM_PWM_Start+0x6a>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	bf14      	ite	ne
 80053c4:	2301      	movne	r3, #1
 80053c6:	2300      	moveq	r3, #0
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e07c      	b.n	80054cc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d104      	bne.n	80053e2 <HAL_TIM_PWM_Start+0x82>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053e0:	e013      	b.n	800540a <HAL_TIM_PWM_Start+0xaa>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d104      	bne.n	80053f2 <HAL_TIM_PWM_Start+0x92>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053f0:	e00b      	b.n	800540a <HAL_TIM_PWM_Start+0xaa>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d104      	bne.n	8005402 <HAL_TIM_PWM_Start+0xa2>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005400:	e003      	b.n	800540a <HAL_TIM_PWM_Start+0xaa>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2202      	movs	r2, #2
 8005406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2201      	movs	r2, #1
 8005410:	6839      	ldr	r1, [r7, #0]
 8005412:	4618      	mov	r0, r3
 8005414:	f000 fea2 	bl	800615c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a2d      	ldr	r2, [pc, #180]	@ (80054d4 <HAL_TIM_PWM_Start+0x174>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d009      	beq.n	8005436 <HAL_TIM_PWM_Start+0xd6>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a2c      	ldr	r2, [pc, #176]	@ (80054d8 <HAL_TIM_PWM_Start+0x178>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d004      	beq.n	8005436 <HAL_TIM_PWM_Start+0xd6>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a2a      	ldr	r2, [pc, #168]	@ (80054dc <HAL_TIM_PWM_Start+0x17c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d101      	bne.n	800543a <HAL_TIM_PWM_Start+0xda>
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <HAL_TIM_PWM_Start+0xdc>
 800543a:	2300      	movs	r3, #0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d007      	beq.n	8005450 <HAL_TIM_PWM_Start+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800544e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005458:	d01d      	beq.n	8005496 <HAL_TIM_PWM_Start+0x136>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a20      	ldr	r2, [pc, #128]	@ (80054e0 <HAL_TIM_PWM_Start+0x180>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d018      	beq.n	8005496 <HAL_TIM_PWM_Start+0x136>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a1e      	ldr	r2, [pc, #120]	@ (80054e4 <HAL_TIM_PWM_Start+0x184>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d013      	beq.n	8005496 <HAL_TIM_PWM_Start+0x136>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a1d      	ldr	r2, [pc, #116]	@ (80054e8 <HAL_TIM_PWM_Start+0x188>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d00e      	beq.n	8005496 <HAL_TIM_PWM_Start+0x136>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a1b      	ldr	r2, [pc, #108]	@ (80054ec <HAL_TIM_PWM_Start+0x18c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d009      	beq.n	8005496 <HAL_TIM_PWM_Start+0x136>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a13      	ldr	r2, [pc, #76]	@ (80054d4 <HAL_TIM_PWM_Start+0x174>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d004      	beq.n	8005496 <HAL_TIM_PWM_Start+0x136>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a17      	ldr	r2, [pc, #92]	@ (80054f0 <HAL_TIM_PWM_Start+0x190>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d111      	bne.n	80054ba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b06      	cmp	r3, #6
 80054a6:	d010      	beq.n	80054ca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0201 	orr.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b8:	e007      	b.n	80054ca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f042 0201 	orr.w	r2, r2, #1
 80054c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40014000 	.word	0x40014000
 80054d8:	40014400 	.word	0x40014400
 80054dc:	40014800 	.word	0x40014800
 80054e0:	40000400 	.word	0x40000400
 80054e4:	40000800 	.word	0x40000800
 80054e8:	40000c00 	.word	0x40000c00
 80054ec:	40001800 	.word	0x40001800
 80054f0:	40015c00 	.word	0x40015c00

080054f4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e041      	b.n	800558a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d106      	bne.n	8005520 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7fc fb2c 	bl	8001b78 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3304      	adds	r3, #4
 8005530:	4619      	mov	r1, r3
 8005532:	4610      	mov	r0, r2
 8005534:	f000 fa54 	bl	80059e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b086      	sub	sp, #24
 8005596:	af00      	add	r7, sp, #0
 8005598:	60f8      	str	r0, [r7, #12]
 800559a:	60b9      	str	r1, [r7, #8]
 800559c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e088      	b.n	80056c2 <HAL_TIM_IC_ConfigChannel+0x130>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d11b      	bne.n	80055f6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80055ce:	f000 fc07 	bl	8005de0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	699a      	ldr	r2, [r3, #24]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 020c 	bic.w	r2, r2, #12
 80055e0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6999      	ldr	r1, [r3, #24]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	430a      	orrs	r2, r1
 80055f2:	619a      	str	r2, [r3, #24]
 80055f4:	e060      	b.n	80056b8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b04      	cmp	r3, #4
 80055fa:	d11c      	bne.n	8005636 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800560c:	f000 fc85 	bl	8005f1a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699a      	ldr	r2, [r3, #24]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800561e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6999      	ldr	r1, [r3, #24]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	021a      	lsls	r2, r3, #8
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	619a      	str	r2, [r3, #24]
 8005634:	e040      	b.n	80056b8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b08      	cmp	r3, #8
 800563a:	d11b      	bne.n	8005674 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800564c:	f000 fcd2 	bl	8005ff4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	69da      	ldr	r2, [r3, #28]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 020c 	bic.w	r2, r2, #12
 800565e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69d9      	ldr	r1, [r3, #28]
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	689a      	ldr	r2, [r3, #8]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	61da      	str	r2, [r3, #28]
 8005672:	e021      	b.n	80056b8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b0c      	cmp	r3, #12
 8005678:	d11c      	bne.n	80056b4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800568a:	f000 fcef 	bl	800606c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69da      	ldr	r2, [r3, #28]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800569c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69d9      	ldr	r1, [r3, #28]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	021a      	lsls	r2, r3, #8
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	61da      	str	r2, [r3, #28]
 80056b2:	e001      	b.n	80056b8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3718      	adds	r7, #24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056d8:	2300      	movs	r3, #0
 80056da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d101      	bne.n	80056ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056e6:	2302      	movs	r3, #2
 80056e8:	e0ae      	b.n	8005848 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b0c      	cmp	r3, #12
 80056f6:	f200 809f 	bhi.w	8005838 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80056fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005700 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005700:	08005735 	.word	0x08005735
 8005704:	08005839 	.word	0x08005839
 8005708:	08005839 	.word	0x08005839
 800570c:	08005839 	.word	0x08005839
 8005710:	08005775 	.word	0x08005775
 8005714:	08005839 	.word	0x08005839
 8005718:	08005839 	.word	0x08005839
 800571c:	08005839 	.word	0x08005839
 8005720:	080057b7 	.word	0x080057b7
 8005724:	08005839 	.word	0x08005839
 8005728:	08005839 	.word	0x08005839
 800572c:	08005839 	.word	0x08005839
 8005730:	080057f7 	.word	0x080057f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68b9      	ldr	r1, [r7, #8]
 800573a:	4618      	mov	r0, r3
 800573c:	f000 f9f6 	bl	8005b2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699a      	ldr	r2, [r3, #24]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0208 	orr.w	r2, r2, #8
 800574e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699a      	ldr	r2, [r3, #24]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0204 	bic.w	r2, r2, #4
 800575e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6999      	ldr	r1, [r3, #24]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	691a      	ldr	r2, [r3, #16]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	619a      	str	r2, [r3, #24]
      break;
 8005772:	e064      	b.n	800583e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	4618      	mov	r0, r3
 800577c:	f000 fa50 	bl	8005c20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	699a      	ldr	r2, [r3, #24]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800578e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	699a      	ldr	r2, [r3, #24]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800579e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6999      	ldr	r1, [r3, #24]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	021a      	lsls	r2, r3, #8
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	430a      	orrs	r2, r1
 80057b2:	619a      	str	r2, [r3, #24]
      break;
 80057b4:	e043      	b.n	800583e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68b9      	ldr	r1, [r7, #8]
 80057bc:	4618      	mov	r0, r3
 80057be:	f000 fa91 	bl	8005ce4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	69da      	ldr	r2, [r3, #28]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f042 0208 	orr.w	r2, r2, #8
 80057d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69da      	ldr	r2, [r3, #28]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 0204 	bic.w	r2, r2, #4
 80057e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	69d9      	ldr	r1, [r3, #28]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	691a      	ldr	r2, [r3, #16]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	61da      	str	r2, [r3, #28]
      break;
 80057f4:	e023      	b.n	800583e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68b9      	ldr	r1, [r7, #8]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 faaf 	bl	8005d60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69da      	ldr	r2, [r3, #28]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69da      	ldr	r2, [r3, #28]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69d9      	ldr	r1, [r3, #28]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	021a      	lsls	r2, r3, #8
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	61da      	str	r2, [r3, #28]
      break;
 8005836:	e002      	b.n	800583e <HAL_TIM_PWM_ConfigChannel+0x172>
      break;
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	75fb      	strb	r3, [r7, #23]
      break;
 800583c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005846:	7dfb      	ldrb	r3, [r7, #23]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005864:	2b01      	cmp	r3, #1
 8005866:	d101      	bne.n	800586c <HAL_TIM_ConfigClockSource+0x1c>
 8005868:	2302      	movs	r3, #2
 800586a:	e0b4      	b.n	80059d6 <HAL_TIM_ConfigClockSource+0x186>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800588a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005892:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058a4:	d03e      	beq.n	8005924 <HAL_TIM_ConfigClockSource+0xd4>
 80058a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058aa:	f200 8087 	bhi.w	80059bc <HAL_TIM_ConfigClockSource+0x16c>
 80058ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058b2:	f000 8086 	beq.w	80059c2 <HAL_TIM_ConfigClockSource+0x172>
 80058b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ba:	d87f      	bhi.n	80059bc <HAL_TIM_ConfigClockSource+0x16c>
 80058bc:	2b70      	cmp	r3, #112	@ 0x70
 80058be:	d01a      	beq.n	80058f6 <HAL_TIM_ConfigClockSource+0xa6>
 80058c0:	2b70      	cmp	r3, #112	@ 0x70
 80058c2:	d87b      	bhi.n	80059bc <HAL_TIM_ConfigClockSource+0x16c>
 80058c4:	2b60      	cmp	r3, #96	@ 0x60
 80058c6:	d050      	beq.n	800596a <HAL_TIM_ConfigClockSource+0x11a>
 80058c8:	2b60      	cmp	r3, #96	@ 0x60
 80058ca:	d877      	bhi.n	80059bc <HAL_TIM_ConfigClockSource+0x16c>
 80058cc:	2b50      	cmp	r3, #80	@ 0x50
 80058ce:	d03c      	beq.n	800594a <HAL_TIM_ConfigClockSource+0xfa>
 80058d0:	2b50      	cmp	r3, #80	@ 0x50
 80058d2:	d873      	bhi.n	80059bc <HAL_TIM_ConfigClockSource+0x16c>
 80058d4:	2b40      	cmp	r3, #64	@ 0x40
 80058d6:	d058      	beq.n	800598a <HAL_TIM_ConfigClockSource+0x13a>
 80058d8:	2b40      	cmp	r3, #64	@ 0x40
 80058da:	d86f      	bhi.n	80059bc <HAL_TIM_ConfigClockSource+0x16c>
 80058dc:	2b30      	cmp	r3, #48	@ 0x30
 80058de:	d064      	beq.n	80059aa <HAL_TIM_ConfigClockSource+0x15a>
 80058e0:	2b30      	cmp	r3, #48	@ 0x30
 80058e2:	d86b      	bhi.n	80059bc <HAL_TIM_ConfigClockSource+0x16c>
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	d060      	beq.n	80059aa <HAL_TIM_ConfigClockSource+0x15a>
 80058e8:	2b20      	cmp	r3, #32
 80058ea:	d867      	bhi.n	80059bc <HAL_TIM_ConfigClockSource+0x16c>
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d05c      	beq.n	80059aa <HAL_TIM_ConfigClockSource+0x15a>
 80058f0:	2b10      	cmp	r3, #16
 80058f2:	d05a      	beq.n	80059aa <HAL_TIM_ConfigClockSource+0x15a>
 80058f4:	e062      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005906:	f000 fc09 	bl	800611c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005918:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	609a      	str	r2, [r3, #8]
      break;
 8005922:	e04f      	b.n	80059c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005934:	f000 fbf2 	bl	800611c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005946:	609a      	str	r2, [r3, #8]
      break;
 8005948:	e03c      	b.n	80059c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005956:	461a      	mov	r2, r3
 8005958:	f000 fab0 	bl	8005ebc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2150      	movs	r1, #80	@ 0x50
 8005962:	4618      	mov	r0, r3
 8005964:	f000 fbbf 	bl	80060e6 <TIM_ITRx_SetConfig>
      break;
 8005968:	e02c      	b.n	80059c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005976:	461a      	mov	r2, r3
 8005978:	f000 fb0c 	bl	8005f94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2160      	movs	r1, #96	@ 0x60
 8005982:	4618      	mov	r0, r3
 8005984:	f000 fbaf 	bl	80060e6 <TIM_ITRx_SetConfig>
      break;
 8005988:	e01c      	b.n	80059c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005996:	461a      	mov	r2, r3
 8005998:	f000 fa90 	bl	8005ebc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2140      	movs	r1, #64	@ 0x40
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 fb9f 	bl	80060e6 <TIM_ITRx_SetConfig>
      break;
 80059a8:	e00c      	b.n	80059c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4619      	mov	r1, r3
 80059b4:	4610      	mov	r0, r2
 80059b6:	f000 fb96 	bl	80060e6 <TIM_ITRx_SetConfig>
      break;
 80059ba:	e003      	b.n	80059c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	73fb      	strb	r3, [r7, #15]
      break;
 80059c0:	e000      	b.n	80059c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
	...

080059e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059f6:	d00f      	beq.n	8005a18 <TIM_Base_SetConfig+0x38>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a42      	ldr	r2, [pc, #264]	@ (8005b04 <TIM_Base_SetConfig+0x124>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d00b      	beq.n	8005a18 <TIM_Base_SetConfig+0x38>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a41      	ldr	r2, [pc, #260]	@ (8005b08 <TIM_Base_SetConfig+0x128>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d007      	beq.n	8005a18 <TIM_Base_SetConfig+0x38>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a40      	ldr	r2, [pc, #256]	@ (8005b0c <TIM_Base_SetConfig+0x12c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d003      	beq.n	8005a18 <TIM_Base_SetConfig+0x38>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a3f      	ldr	r2, [pc, #252]	@ (8005b10 <TIM_Base_SetConfig+0x130>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d108      	bne.n	8005a2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a30:	d027      	beq.n	8005a82 <TIM_Base_SetConfig+0xa2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a33      	ldr	r2, [pc, #204]	@ (8005b04 <TIM_Base_SetConfig+0x124>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d023      	beq.n	8005a82 <TIM_Base_SetConfig+0xa2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a32      	ldr	r2, [pc, #200]	@ (8005b08 <TIM_Base_SetConfig+0x128>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d01f      	beq.n	8005a82 <TIM_Base_SetConfig+0xa2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a31      	ldr	r2, [pc, #196]	@ (8005b0c <TIM_Base_SetConfig+0x12c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d01b      	beq.n	8005a82 <TIM_Base_SetConfig+0xa2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a31      	ldr	r2, [pc, #196]	@ (8005b14 <TIM_Base_SetConfig+0x134>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d017      	beq.n	8005a82 <TIM_Base_SetConfig+0xa2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a30      	ldr	r2, [pc, #192]	@ (8005b18 <TIM_Base_SetConfig+0x138>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d013      	beq.n	8005a82 <TIM_Base_SetConfig+0xa2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a2f      	ldr	r2, [pc, #188]	@ (8005b1c <TIM_Base_SetConfig+0x13c>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d00f      	beq.n	8005a82 <TIM_Base_SetConfig+0xa2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a2e      	ldr	r2, [pc, #184]	@ (8005b20 <TIM_Base_SetConfig+0x140>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d00b      	beq.n	8005a82 <TIM_Base_SetConfig+0xa2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a2d      	ldr	r2, [pc, #180]	@ (8005b24 <TIM_Base_SetConfig+0x144>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d007      	beq.n	8005a82 <TIM_Base_SetConfig+0xa2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a2c      	ldr	r2, [pc, #176]	@ (8005b28 <TIM_Base_SetConfig+0x148>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d003      	beq.n	8005a82 <TIM_Base_SetConfig+0xa2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a24      	ldr	r2, [pc, #144]	@ (8005b10 <TIM_Base_SetConfig+0x130>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d108      	bne.n	8005a94 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	689a      	ldr	r2, [r3, #8]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a19      	ldr	r2, [pc, #100]	@ (8005b20 <TIM_Base_SetConfig+0x140>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d007      	beq.n	8005ad0 <TIM_Base_SetConfig+0xf0>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a18      	ldr	r2, [pc, #96]	@ (8005b24 <TIM_Base_SetConfig+0x144>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_Base_SetConfig+0xf0>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a17      	ldr	r2, [pc, #92]	@ (8005b28 <TIM_Base_SetConfig+0x148>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d103      	bne.n	8005ad8 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d105      	bne.n	8005af6 <TIM_Base_SetConfig+0x116>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f023 0201 	bic.w	r2, r3, #1
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	611a      	str	r2, [r3, #16]
  }
}
 8005af6:	bf00      	nop
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	40000400 	.word	0x40000400
 8005b08:	40000800 	.word	0x40000800
 8005b0c:	40000c00 	.word	0x40000c00
 8005b10:	40015c00 	.word	0x40015c00
 8005b14:	40001800 	.word	0x40001800
 8005b18:	40001c00 	.word	0x40001c00
 8005b1c:	40002000 	.word	0x40002000
 8005b20:	40014000 	.word	0x40014000
 8005b24:	40014400 	.word	0x40014400
 8005b28:	40014800 	.word	0x40014800

08005b2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	f023 0201 	bic.w	r2, r3, #1
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 0303 	bic.w	r3, r3, #3
 8005b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f023 0302 	bic.w	r3, r3, #2
 8005b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a24      	ldr	r2, [pc, #144]	@ (8005c14 <TIM_OC1_SetConfig+0xe8>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d007      	beq.n	8005b98 <TIM_OC1_SetConfig+0x6c>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a23      	ldr	r2, [pc, #140]	@ (8005c18 <TIM_OC1_SetConfig+0xec>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d003      	beq.n	8005b98 <TIM_OC1_SetConfig+0x6c>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a22      	ldr	r2, [pc, #136]	@ (8005c1c <TIM_OC1_SetConfig+0xf0>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d10c      	bne.n	8005bb2 <TIM_OC1_SetConfig+0x86>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f023 0308 	bic.w	r3, r3, #8
 8005b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f023 0304 	bic.w	r3, r3, #4
 8005bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a17      	ldr	r2, [pc, #92]	@ (8005c14 <TIM_OC1_SetConfig+0xe8>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d007      	beq.n	8005bca <TIM_OC1_SetConfig+0x9e>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a16      	ldr	r2, [pc, #88]	@ (8005c18 <TIM_OC1_SetConfig+0xec>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d003      	beq.n	8005bca <TIM_OC1_SetConfig+0x9e>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a15      	ldr	r2, [pc, #84]	@ (8005c1c <TIM_OC1_SetConfig+0xf0>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d111      	bne.n	8005bee <TIM_OC1_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	621a      	str	r2, [r3, #32]
}
 8005c08:	bf00      	nop
 8005c0a:	371c      	adds	r7, #28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	40014000 	.word	0x40014000
 8005c18:	40014400 	.word	0x40014400
 8005c1c:	40014800 	.word	0x40014800

08005c20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	f023 0210 	bic.w	r2, r3, #16
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	021b      	lsls	r3, r3, #8
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	f023 0320 	bic.w	r3, r3, #32
 8005c6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a17      	ldr	r2, [pc, #92]	@ (8005cd8 <TIM_OC2_SetConfig+0xb8>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d007      	beq.n	8005c90 <TIM_OC2_SetConfig+0x70>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a16      	ldr	r2, [pc, #88]	@ (8005cdc <TIM_OC2_SetConfig+0xbc>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d003      	beq.n	8005c90 <TIM_OC2_SetConfig+0x70>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a15      	ldr	r2, [pc, #84]	@ (8005ce0 <TIM_OC2_SetConfig+0xc0>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d10f      	bne.n	8005cb0 <TIM_OC2_SetConfig+0x90>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c96:	617b      	str	r3, [r7, #20]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	621a      	str	r2, [r3, #32]
}
 8005cca:	bf00      	nop
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	40014000 	.word	0x40014000
 8005cdc:	40014400 	.word	0x40014400
 8005ce0:	40014800 	.word	0x40014800

08005ce4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 0303 	bic.w	r3, r3, #3
 8005d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	021b      	lsls	r3, r3, #8
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	621a      	str	r2, [r3, #32]
}
 8005d54:	bf00      	nop
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	021b      	lsls	r3, r3, #8
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005daa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	031b      	lsls	r3, r3, #12
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	621a      	str	r2, [r3, #32]
}
 8005dd2:	bf00      	nop
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
	...

08005de0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	f023 0201 	bic.w	r2, r3, #1
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e0c:	d017      	beq.n	8005e3e <TIM_TI1_SetConfig+0x5e>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4a24      	ldr	r2, [pc, #144]	@ (8005ea4 <TIM_TI1_SetConfig+0xc4>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d013      	beq.n	8005e3e <TIM_TI1_SetConfig+0x5e>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4a23      	ldr	r2, [pc, #140]	@ (8005ea8 <TIM_TI1_SetConfig+0xc8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00f      	beq.n	8005e3e <TIM_TI1_SetConfig+0x5e>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4a22      	ldr	r2, [pc, #136]	@ (8005eac <TIM_TI1_SetConfig+0xcc>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d00b      	beq.n	8005e3e <TIM_TI1_SetConfig+0x5e>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4a21      	ldr	r2, [pc, #132]	@ (8005eb0 <TIM_TI1_SetConfig+0xd0>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d007      	beq.n	8005e3e <TIM_TI1_SetConfig+0x5e>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4a20      	ldr	r2, [pc, #128]	@ (8005eb4 <TIM_TI1_SetConfig+0xd4>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d003      	beq.n	8005e3e <TIM_TI1_SetConfig+0x5e>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	4a1f      	ldr	r2, [pc, #124]	@ (8005eb8 <TIM_TI1_SetConfig+0xd8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d101      	bne.n	8005e42 <TIM_TI1_SetConfig+0x62>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e000      	b.n	8005e44 <TIM_TI1_SetConfig+0x64>
 8005e42:	2300      	movs	r3, #0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d008      	beq.n	8005e5a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f023 0303 	bic.w	r3, r3, #3
 8005e4e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]
 8005e58:	e003      	b.n	8005e62 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f043 0301 	orr.w	r3, r3, #1
 8005e60:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	011b      	lsls	r3, r3, #4
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f023 030a 	bic.w	r3, r3, #10
 8005e7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f003 030a 	and.w	r3, r3, #10
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	621a      	str	r2, [r3, #32]
}
 8005e96:	bf00      	nop
 8005e98:	371c      	adds	r7, #28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	40000400 	.word	0x40000400
 8005ea8:	40000800 	.word	0x40000800
 8005eac:	40000c00 	.word	0x40000c00
 8005eb0:	40001800 	.word	0x40001800
 8005eb4:	40014000 	.word	0x40014000
 8005eb8:	40015c00 	.word	0x40015c00

08005ebc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	f023 0201 	bic.w	r2, r3, #1
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	011b      	lsls	r3, r3, #4
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f023 030a 	bic.w	r3, r3, #10
 8005ef8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	621a      	str	r2, [r3, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b087      	sub	sp, #28
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	60f8      	str	r0, [r7, #12]
 8005f22:	60b9      	str	r1, [r7, #8]
 8005f24:	607a      	str	r2, [r7, #4]
 8005f26:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	f023 0210 	bic.w	r2, r3, #16
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	021b      	lsls	r3, r3, #8
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	031b      	lsls	r3, r3, #12
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f6c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	011b      	lsls	r3, r3, #4
 8005f72:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	621a      	str	r2, [r3, #32]
}
 8005f88:	bf00      	nop
 8005f8a:	371c      	adds	r7, #28
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6a1b      	ldr	r3, [r3, #32]
 8005fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	f023 0210 	bic.w	r2, r3, #16
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	031b      	lsls	r3, r3, #12
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005fd0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	011b      	lsls	r3, r3, #4
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	621a      	str	r2, [r3, #32]
}
 8005fe8:	bf00      	nop
 8005fea:	371c      	adds	r7, #28
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	69db      	ldr	r3, [r3, #28]
 8006018:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f023 0303 	bic.w	r3, r3, #3
 8006020:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4313      	orrs	r3, r2
 8006028:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006030:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	011b      	lsls	r3, r3, #4
 8006036:	b2db      	uxtb	r3, r3
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	4313      	orrs	r3, r2
 800603c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006044:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	021b      	lsls	r3, r3, #8
 800604a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	4313      	orrs	r3, r2
 8006052:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	621a      	str	r2, [r3, #32]
}
 8006060:	bf00      	nop
 8006062:	371c      	adds	r7, #28
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6a1b      	ldr	r3, [r3, #32]
 8006084:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	69db      	ldr	r3, [r3, #28]
 8006090:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006098:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	021b      	lsls	r3, r3, #8
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060aa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	031b      	lsls	r3, r3, #12
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80060be:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	031b      	lsls	r3, r3, #12
 80060c4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	621a      	str	r2, [r3, #32]
}
 80060da:	bf00      	nop
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b085      	sub	sp, #20
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
 80060ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4313      	orrs	r3, r2
 8006104:	f043 0307 	orr.w	r3, r3, #7
 8006108:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	609a      	str	r2, [r3, #8]
}
 8006110:	bf00      	nop
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006136:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	021a      	lsls	r2, r3, #8
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	431a      	orrs	r2, r3
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	4313      	orrs	r3, r2
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	4313      	orrs	r3, r2
 8006148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	609a      	str	r2, [r3, #8]
}
 8006150:	bf00      	nop
 8006152:	371c      	adds	r7, #28
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f003 031f 	and.w	r3, r3, #31
 800616e:	2201      	movs	r2, #1
 8006170:	fa02 f303 	lsl.w	r3, r2, r3
 8006174:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a1a      	ldr	r2, [r3, #32]
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	43db      	mvns	r3, r3
 800617e:	401a      	ands	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a1a      	ldr	r2, [r3, #32]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	f003 031f 	and.w	r3, r3, #31
 800618e:	6879      	ldr	r1, [r7, #4]
 8006190:	fa01 f303 	lsl.w	r3, r1, r3
 8006194:	431a      	orrs	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	621a      	str	r2, [r3, #32]
}
 800619a:	bf00      	nop
 800619c:	371c      	adds	r7, #28
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr
	...

080061a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061bc:	2302      	movs	r3, #2
 80061be:	e055      	b.n	800626c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006202:	d01d      	beq.n	8006240 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a1b      	ldr	r2, [pc, #108]	@ (8006278 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d018      	beq.n	8006240 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a1a      	ldr	r2, [pc, #104]	@ (800627c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d013      	beq.n	8006240 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a18      	ldr	r2, [pc, #96]	@ (8006280 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d00e      	beq.n	8006240 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a17      	ldr	r2, [pc, #92]	@ (8006284 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d009      	beq.n	8006240 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a15      	ldr	r2, [pc, #84]	@ (8006288 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d004      	beq.n	8006240 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a14      	ldr	r2, [pc, #80]	@ (800628c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d10c      	bne.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006246:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	4313      	orrs	r3, r2
 8006250:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	40000400 	.word	0x40000400
 800627c:	40000800 	.word	0x40000800
 8006280:	40000c00 	.word	0x40000c00
 8006284:	40001800 	.word	0x40001800
 8006288:	40014000 	.word	0x40014000
 800628c:	40015c00 	.word	0x40015c00

08006290 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d101      	bne.n	80062ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80062a8:	2302      	movs	r3, #2
 80062aa:	e03d      	b.n	8006328 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	4313      	orrs	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e040      	b.n	80063c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800634a:	2b00      	cmp	r3, #0
 800634c:	d106      	bne.n	800635c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7fb fdb8 	bl	8001ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2224      	movs	r2, #36	@ 0x24
 8006360:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 0201 	bic.w	r2, r2, #1
 8006370:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f9a2 	bl	80066c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f825 	bl	80063d0 <UART_SetConfig>
 8006386:	4603      	mov	r3, r0
 8006388:	2b01      	cmp	r3, #1
 800638a:	d101      	bne.n	8006390 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e01b      	b.n	80063c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800639e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689a      	ldr	r2, [r3, #8]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f042 0201 	orr.w	r2, r2, #1
 80063be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fa21 	bl	8006808 <UART_CheckIdleState>
 80063c6:	4603      	mov	r3, r0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063d8:	2300      	movs	r3, #0
 80063da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689a      	ldr	r2, [r3, #8]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	431a      	orrs	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	431a      	orrs	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	69db      	ldr	r3, [r3, #28]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80063fe:	f023 030c 	bic.w	r3, r3, #12
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	6812      	ldr	r2, [r2, #0]
 8006406:	6979      	ldr	r1, [r7, #20]
 8006408:	430b      	orrs	r3, r1
 800640a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68da      	ldr	r2, [r3, #12]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	430a      	orrs	r2, r1
 8006420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a1b      	ldr	r3, [r3, #32]
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	4313      	orrs	r3, r2
 8006430:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	430a      	orrs	r2, r1
 8006444:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a99      	ldr	r2, [pc, #612]	@ (80066b0 <UART_SetConfig+0x2e0>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d120      	bne.n	8006492 <UART_SetConfig+0xc2>
 8006450:	4b98      	ldr	r3, [pc, #608]	@ (80066b4 <UART_SetConfig+0x2e4>)
 8006452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006454:	f003 0303 	and.w	r3, r3, #3
 8006458:	2b03      	cmp	r3, #3
 800645a:	d817      	bhi.n	800648c <UART_SetConfig+0xbc>
 800645c:	a201      	add	r2, pc, #4	@ (adr r2, 8006464 <UART_SetConfig+0x94>)
 800645e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006462:	bf00      	nop
 8006464:	08006475 	.word	0x08006475
 8006468:	08006481 	.word	0x08006481
 800646c:	08006487 	.word	0x08006487
 8006470:	0800647b 	.word	0x0800647b
 8006474:	2301      	movs	r3, #1
 8006476:	77fb      	strb	r3, [r7, #31]
 8006478:	e061      	b.n	800653e <UART_SetConfig+0x16e>
 800647a:	2302      	movs	r3, #2
 800647c:	77fb      	strb	r3, [r7, #31]
 800647e:	e05e      	b.n	800653e <UART_SetConfig+0x16e>
 8006480:	2304      	movs	r3, #4
 8006482:	77fb      	strb	r3, [r7, #31]
 8006484:	e05b      	b.n	800653e <UART_SetConfig+0x16e>
 8006486:	2308      	movs	r3, #8
 8006488:	77fb      	strb	r3, [r7, #31]
 800648a:	e058      	b.n	800653e <UART_SetConfig+0x16e>
 800648c:	2310      	movs	r3, #16
 800648e:	77fb      	strb	r3, [r7, #31]
 8006490:	e055      	b.n	800653e <UART_SetConfig+0x16e>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a88      	ldr	r2, [pc, #544]	@ (80066b8 <UART_SetConfig+0x2e8>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d124      	bne.n	80064e6 <UART_SetConfig+0x116>
 800649c:	4b85      	ldr	r3, [pc, #532]	@ (80066b4 <UART_SetConfig+0x2e4>)
 800649e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80064a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064a8:	d011      	beq.n	80064ce <UART_SetConfig+0xfe>
 80064aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80064ae:	d817      	bhi.n	80064e0 <UART_SetConfig+0x110>
 80064b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064b4:	d011      	beq.n	80064da <UART_SetConfig+0x10a>
 80064b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064ba:	d811      	bhi.n	80064e0 <UART_SetConfig+0x110>
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <UART_SetConfig+0xf8>
 80064c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064c4:	d006      	beq.n	80064d4 <UART_SetConfig+0x104>
 80064c6:	e00b      	b.n	80064e0 <UART_SetConfig+0x110>
 80064c8:	2300      	movs	r3, #0
 80064ca:	77fb      	strb	r3, [r7, #31]
 80064cc:	e037      	b.n	800653e <UART_SetConfig+0x16e>
 80064ce:	2302      	movs	r3, #2
 80064d0:	77fb      	strb	r3, [r7, #31]
 80064d2:	e034      	b.n	800653e <UART_SetConfig+0x16e>
 80064d4:	2304      	movs	r3, #4
 80064d6:	77fb      	strb	r3, [r7, #31]
 80064d8:	e031      	b.n	800653e <UART_SetConfig+0x16e>
 80064da:	2308      	movs	r3, #8
 80064dc:	77fb      	strb	r3, [r7, #31]
 80064de:	e02e      	b.n	800653e <UART_SetConfig+0x16e>
 80064e0:	2310      	movs	r3, #16
 80064e2:	77fb      	strb	r3, [r7, #31]
 80064e4:	e02b      	b.n	800653e <UART_SetConfig+0x16e>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a74      	ldr	r2, [pc, #464]	@ (80066bc <UART_SetConfig+0x2ec>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d124      	bne.n	800653a <UART_SetConfig+0x16a>
 80064f0:	4b70      	ldr	r3, [pc, #448]	@ (80066b4 <UART_SetConfig+0x2e4>)
 80064f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064f4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80064f8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80064fc:	d011      	beq.n	8006522 <UART_SetConfig+0x152>
 80064fe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006502:	d817      	bhi.n	8006534 <UART_SetConfig+0x164>
 8006504:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006508:	d011      	beq.n	800652e <UART_SetConfig+0x15e>
 800650a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800650e:	d811      	bhi.n	8006534 <UART_SetConfig+0x164>
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <UART_SetConfig+0x14c>
 8006514:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006518:	d006      	beq.n	8006528 <UART_SetConfig+0x158>
 800651a:	e00b      	b.n	8006534 <UART_SetConfig+0x164>
 800651c:	2300      	movs	r3, #0
 800651e:	77fb      	strb	r3, [r7, #31]
 8006520:	e00d      	b.n	800653e <UART_SetConfig+0x16e>
 8006522:	2302      	movs	r3, #2
 8006524:	77fb      	strb	r3, [r7, #31]
 8006526:	e00a      	b.n	800653e <UART_SetConfig+0x16e>
 8006528:	2304      	movs	r3, #4
 800652a:	77fb      	strb	r3, [r7, #31]
 800652c:	e007      	b.n	800653e <UART_SetConfig+0x16e>
 800652e:	2308      	movs	r3, #8
 8006530:	77fb      	strb	r3, [r7, #31]
 8006532:	e004      	b.n	800653e <UART_SetConfig+0x16e>
 8006534:	2310      	movs	r3, #16
 8006536:	77fb      	strb	r3, [r7, #31]
 8006538:	e001      	b.n	800653e <UART_SetConfig+0x16e>
 800653a:	2310      	movs	r3, #16
 800653c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006546:	d15a      	bne.n	80065fe <UART_SetConfig+0x22e>
  {
    switch (clocksource)
 8006548:	7ffb      	ldrb	r3, [r7, #31]
 800654a:	2b08      	cmp	r3, #8
 800654c:	d827      	bhi.n	800659e <UART_SetConfig+0x1ce>
 800654e:	a201      	add	r2, pc, #4	@ (adr r2, 8006554 <UART_SetConfig+0x184>)
 8006550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006554:	08006579 	.word	0x08006579
 8006558:	08006581 	.word	0x08006581
 800655c:	08006589 	.word	0x08006589
 8006560:	0800659f 	.word	0x0800659f
 8006564:	0800658f 	.word	0x0800658f
 8006568:	0800659f 	.word	0x0800659f
 800656c:	0800659f 	.word	0x0800659f
 8006570:	0800659f 	.word	0x0800659f
 8006574:	08006597 	.word	0x08006597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006578:	f7fe fbf0 	bl	8004d5c <HAL_RCC_GetPCLK1Freq>
 800657c:	61b8      	str	r0, [r7, #24]
        break;
 800657e:	e013      	b.n	80065a8 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006580:	f7fe fc0e 	bl	8004da0 <HAL_RCC_GetPCLK2Freq>
 8006584:	61b8      	str	r0, [r7, #24]
        break;
 8006586:	e00f      	b.n	80065a8 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006588:	4b4d      	ldr	r3, [pc, #308]	@ (80066c0 <UART_SetConfig+0x2f0>)
 800658a:	61bb      	str	r3, [r7, #24]
        break;
 800658c:	e00c      	b.n	80065a8 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800658e:	f7fe fb85 	bl	8004c9c <HAL_RCC_GetSysClockFreq>
 8006592:	61b8      	str	r0, [r7, #24]
        break;
 8006594:	e008      	b.n	80065a8 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800659a:	61bb      	str	r3, [r7, #24]
        break;
 800659c:	e004      	b.n	80065a8 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	77bb      	strb	r3, [r7, #30]
        break;
 80065a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d074      	beq.n	8006698 <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	005a      	lsls	r2, r3, #1
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	085b      	lsrs	r3, r3, #1
 80065b8:	441a      	add	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	2b0f      	cmp	r3, #15
 80065c8:	d916      	bls.n	80065f8 <UART_SetConfig+0x228>
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065d0:	d212      	bcs.n	80065f8 <UART_SetConfig+0x228>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	f023 030f 	bic.w	r3, r3, #15
 80065da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	085b      	lsrs	r3, r3, #1
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	f003 0307 	and.w	r3, r3, #7
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	89fb      	ldrh	r3, [r7, #14]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	89fa      	ldrh	r2, [r7, #14]
 80065f4:	60da      	str	r2, [r3, #12]
 80065f6:	e04f      	b.n	8006698 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	77bb      	strb	r3, [r7, #30]
 80065fc:	e04c      	b.n	8006698 <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065fe:	7ffb      	ldrb	r3, [r7, #31]
 8006600:	2b08      	cmp	r3, #8
 8006602:	d828      	bhi.n	8006656 <UART_SetConfig+0x286>
 8006604:	a201      	add	r2, pc, #4	@ (adr r2, 800660c <UART_SetConfig+0x23c>)
 8006606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660a:	bf00      	nop
 800660c:	08006631 	.word	0x08006631
 8006610:	08006639 	.word	0x08006639
 8006614:	08006641 	.word	0x08006641
 8006618:	08006657 	.word	0x08006657
 800661c:	08006647 	.word	0x08006647
 8006620:	08006657 	.word	0x08006657
 8006624:	08006657 	.word	0x08006657
 8006628:	08006657 	.word	0x08006657
 800662c:	0800664f 	.word	0x0800664f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006630:	f7fe fb94 	bl	8004d5c <HAL_RCC_GetPCLK1Freq>
 8006634:	61b8      	str	r0, [r7, #24]
        break;
 8006636:	e013      	b.n	8006660 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006638:	f7fe fbb2 	bl	8004da0 <HAL_RCC_GetPCLK2Freq>
 800663c:	61b8      	str	r0, [r7, #24]
        break;
 800663e:	e00f      	b.n	8006660 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006640:	4b1f      	ldr	r3, [pc, #124]	@ (80066c0 <UART_SetConfig+0x2f0>)
 8006642:	61bb      	str	r3, [r7, #24]
        break;
 8006644:	e00c      	b.n	8006660 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006646:	f7fe fb29 	bl	8004c9c <HAL_RCC_GetSysClockFreq>
 800664a:	61b8      	str	r0, [r7, #24]
        break;
 800664c:	e008      	b.n	8006660 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800664e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006652:	61bb      	str	r3, [r7, #24]
        break;
 8006654:	e004      	b.n	8006660 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	77bb      	strb	r3, [r7, #30]
        break;
 800665e:	bf00      	nop
    }

    if (pclk != 0U)
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d018      	beq.n	8006698 <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	085a      	lsrs	r2, r3, #1
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	441a      	add	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	fbb2 f3f3 	udiv	r3, r2, r3
 8006678:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	2b0f      	cmp	r3, #15
 800667e:	d909      	bls.n	8006694 <UART_SetConfig+0x2c4>
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006686:	d205      	bcs.n	8006694 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	b29a      	uxth	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	60da      	str	r2, [r3, #12]
 8006692:	e001      	b.n	8006698 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80066a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3720      	adds	r7, #32
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	40013800 	.word	0x40013800
 80066b4:	40021000 	.word	0x40021000
 80066b8:	40004400 	.word	0x40004400
 80066bc:	40004800 	.word	0x40004800
 80066c0:	007a1200 	.word	0x007a1200

080066c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d0:	f003 0308 	and.w	r3, r3, #8
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00a      	beq.n	80066ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00a      	beq.n	8006732 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006736:	f003 0304 	and.w	r3, r3, #4
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00a      	beq.n	8006754 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	430a      	orrs	r2, r1
 8006752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006758:	f003 0310 	and.w	r3, r3, #16
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00a      	beq.n	8006776 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677a:	f003 0320 	and.w	r3, r3, #32
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00a      	beq.n	8006798 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d01a      	beq.n	80067da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067c2:	d10a      	bne.n	80067da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	605a      	str	r2, [r3, #4]
  }
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b098      	sub	sp, #96	@ 0x60
 800680c:	af02      	add	r7, sp, #8
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006818:	f7fb fcea 	bl	80021f0 <HAL_GetTick>
 800681c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0308 	and.w	r3, r3, #8
 8006828:	2b08      	cmp	r3, #8
 800682a:	d12e      	bne.n	800688a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800682c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006834:	2200      	movs	r2, #0
 8006836:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f88c 	bl	8006958 <UART_WaitOnFlagUntilTimeout>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d021      	beq.n	800688a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684e:	e853 3f00 	ldrex	r3, [r3]
 8006852:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006856:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800685a:	653b      	str	r3, [r7, #80]	@ 0x50
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	461a      	mov	r2, r3
 8006862:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006864:	647b      	str	r3, [r7, #68]	@ 0x44
 8006866:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006868:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800686a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800686c:	e841 2300 	strex	r3, r2, [r1]
 8006870:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1e6      	bne.n	8006846 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2220      	movs	r2, #32
 800687c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e062      	b.n	8006950 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b04      	cmp	r3, #4
 8006896:	d149      	bne.n	800692c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006898:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068a0:	2200      	movs	r2, #0
 80068a2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f856 	bl	8006958 <UART_WaitOnFlagUntilTimeout>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d03c      	beq.n	800692c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ba:	e853 3f00 	ldrex	r3, [r3]
 80068be:	623b      	str	r3, [r7, #32]
   return(result);
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	461a      	mov	r2, r3
 80068ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80068d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068d8:	e841 2300 	strex	r3, r2, [r1]
 80068dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1e6      	bne.n	80068b2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3308      	adds	r3, #8
 80068ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	e853 3f00 	ldrex	r3, [r3]
 80068f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0301 	bic.w	r3, r3, #1
 80068fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3308      	adds	r3, #8
 8006902:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006904:	61fa      	str	r2, [r7, #28]
 8006906:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006908:	69b9      	ldr	r1, [r7, #24]
 800690a:	69fa      	ldr	r2, [r7, #28]
 800690c:	e841 2300 	strex	r3, r2, [r1]
 8006910:	617b      	str	r3, [r7, #20]
   return(result);
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1e5      	bne.n	80068e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2220      	movs	r2, #32
 800691c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e011      	b.n	8006950 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2220      	movs	r2, #32
 8006930:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2220      	movs	r2, #32
 8006936:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3758      	adds	r7, #88	@ 0x58
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	603b      	str	r3, [r7, #0]
 8006964:	4613      	mov	r3, r2
 8006966:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006968:	e04f      	b.n	8006a0a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006970:	d04b      	beq.n	8006a0a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006972:	f7fb fc3d 	bl	80021f0 <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	429a      	cmp	r2, r3
 8006980:	d302      	bcc.n	8006988 <UART_WaitOnFlagUntilTimeout+0x30>
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d101      	bne.n	800698c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e04e      	b.n	8006a2a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0304 	and.w	r3, r3, #4
 8006996:	2b00      	cmp	r3, #0
 8006998:	d037      	beq.n	8006a0a <UART_WaitOnFlagUntilTimeout+0xb2>
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2b80      	cmp	r3, #128	@ 0x80
 800699e:	d034      	beq.n	8006a0a <UART_WaitOnFlagUntilTimeout+0xb2>
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2b40      	cmp	r3, #64	@ 0x40
 80069a4:	d031      	beq.n	8006a0a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	69db      	ldr	r3, [r3, #28]
 80069ac:	f003 0308 	and.w	r3, r3, #8
 80069b0:	2b08      	cmp	r3, #8
 80069b2:	d110      	bne.n	80069d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2208      	movs	r2, #8
 80069ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 f838 	bl	8006a32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2208      	movs	r2, #8
 80069c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e029      	b.n	8006a2a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069e4:	d111      	bne.n	8006a0a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 f81e 	bl	8006a32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2220      	movs	r2, #32
 80069fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e00f      	b.n	8006a2a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	69da      	ldr	r2, [r3, #28]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	4013      	ands	r3, r2
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	bf0c      	ite	eq
 8006a1a:	2301      	moveq	r3, #1
 8006a1c:	2300      	movne	r3, #0
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	461a      	mov	r2, r3
 8006a22:	79fb      	ldrb	r3, [r7, #7]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d0a0      	beq.n	800696a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b095      	sub	sp, #84	@ 0x54
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a42:	e853 3f00 	ldrex	r3, [r3]
 8006a46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	461a      	mov	r2, r3
 8006a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a58:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a5a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a60:	e841 2300 	strex	r3, r2, [r1]
 8006a64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e6      	bne.n	8006a3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3308      	adds	r3, #8
 8006a72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	e853 3f00 	ldrex	r3, [r3]
 8006a7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	f023 0301 	bic.w	r3, r3, #1
 8006a82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3308      	adds	r3, #8
 8006a8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a94:	e841 2300 	strex	r3, r2, [r1]
 8006a98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1e5      	bne.n	8006a6c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d118      	bne.n	8006ada <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	e853 3f00 	ldrex	r3, [r3]
 8006ab4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	f023 0310 	bic.w	r3, r3, #16
 8006abc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ac6:	61bb      	str	r3, [r7, #24]
 8006ac8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aca:	6979      	ldr	r1, [r7, #20]
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	e841 2300 	strex	r3, r2, [r1]
 8006ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1e6      	bne.n	8006aa8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2220      	movs	r2, #32
 8006ade:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006aee:	bf00      	nop
 8006af0:	3754      	adds	r7, #84	@ 0x54
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b085      	sub	sp, #20
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006b02:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006b06:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	43db      	mvns	r3, r3
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	4013      	ands	r3, r2
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	1d3b      	adds	r3, r7, #4
 8006b3a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3714      	adds	r7, #20
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <memset>:
 8006b6c:	4402      	add	r2, r0
 8006b6e:	4603      	mov	r3, r0
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d100      	bne.n	8006b76 <memset+0xa>
 8006b74:	4770      	bx	lr
 8006b76:	f803 1b01 	strb.w	r1, [r3], #1
 8006b7a:	e7f9      	b.n	8006b70 <memset+0x4>

08006b7c <__libc_init_array>:
 8006b7c:	b570      	push	{r4, r5, r6, lr}
 8006b7e:	4d0d      	ldr	r5, [pc, #52]	@ (8006bb4 <__libc_init_array+0x38>)
 8006b80:	4c0d      	ldr	r4, [pc, #52]	@ (8006bb8 <__libc_init_array+0x3c>)
 8006b82:	1b64      	subs	r4, r4, r5
 8006b84:	10a4      	asrs	r4, r4, #2
 8006b86:	2600      	movs	r6, #0
 8006b88:	42a6      	cmp	r6, r4
 8006b8a:	d109      	bne.n	8006ba0 <__libc_init_array+0x24>
 8006b8c:	4d0b      	ldr	r5, [pc, #44]	@ (8006bbc <__libc_init_array+0x40>)
 8006b8e:	4c0c      	ldr	r4, [pc, #48]	@ (8006bc0 <__libc_init_array+0x44>)
 8006b90:	f000 f818 	bl	8006bc4 <_init>
 8006b94:	1b64      	subs	r4, r4, r5
 8006b96:	10a4      	asrs	r4, r4, #2
 8006b98:	2600      	movs	r6, #0
 8006b9a:	42a6      	cmp	r6, r4
 8006b9c:	d105      	bne.n	8006baa <__libc_init_array+0x2e>
 8006b9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ba4:	4798      	blx	r3
 8006ba6:	3601      	adds	r6, #1
 8006ba8:	e7ee      	b.n	8006b88 <__libc_init_array+0xc>
 8006baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bae:	4798      	blx	r3
 8006bb0:	3601      	adds	r6, #1
 8006bb2:	e7f2      	b.n	8006b9a <__libc_init_array+0x1e>
 8006bb4:	08006c14 	.word	0x08006c14
 8006bb8:	08006c14 	.word	0x08006c14
 8006bbc:	08006c14 	.word	0x08006c14
 8006bc0:	08006c18 	.word	0x08006c18

08006bc4 <_init>:
 8006bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc6:	bf00      	nop
 8006bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bca:	bc08      	pop	{r3}
 8006bcc:	469e      	mov	lr, r3
 8006bce:	4770      	bx	lr

08006bd0 <_fini>:
 8006bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd2:	bf00      	nop
 8006bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bd6:	bc08      	pop	{r3}
 8006bd8:	469e      	mov	lr, r3
 8006bda:	4770      	bx	lr
