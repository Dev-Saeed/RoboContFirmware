
RoboContFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005024  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080051ac  080051ac  000061ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051dc  080051dc  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  080051dc  080051dc  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051dc  080051dc  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080051dc  080051dc  000061dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051e4  080051e4  000061e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080051e8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  2000000c  080051f4  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  080051f4  000074d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001425c  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003929  00000000  00000000  0001b298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  0001ebc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d0d  00000000  00000000  0001fd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ff7e  00000000  00000000  00020a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b69  00000000  00000000  0004098b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afca4  00000000  00000000  000574f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107198  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045e0  00000000  00000000  001071dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0010b7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005194 	.word	0x08005194

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005194 	.word	0x08005194

080001c8 <_ZN7EncoderC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftfm>:
#include <RoboContFirmware/LowLevel/encoder.hpp>

Encoder::Encoder(TIM_HandleTypeDef* timer_ic, uint32_t ic_channel, GPIO_TypeDef* port_b, uint16_t pin_b,
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6178      	str	r0, [r7, #20]
 80001d0:	6139      	str	r1, [r7, #16]
 80001d2:	60fa      	str	r2, [r7, #12]
 80001d4:	60bb      	str	r3, [r7, #8]
 80001d6:	ed87 0a01 	vstr	s0, [r7, #4]
                 float wheel_diameter, uint32_t pulses_per_revolution) {
    this->htim = timer_ic;
 80001da:	697b      	ldr	r3, [r7, #20]
 80001dc:	693a      	ldr	r2, [r7, #16]
 80001de:	601a      	str	r2, [r3, #0]
    this->ic_channel = ic_channel;
 80001e0:	697b      	ldr	r3, [r7, #20]
 80001e2:	68fa      	ldr	r2, [r7, #12]
 80001e4:	605a      	str	r2, [r3, #4]
    this->gpio_port_b = port_b;
 80001e6:	697b      	ldr	r3, [r7, #20]
 80001e8:	68ba      	ldr	r2, [r7, #8]
 80001ea:	609a      	str	r2, [r3, #8]
    this->gpio_pin_b = pin_b;
 80001ec:	697b      	ldr	r3, [r7, #20]
 80001ee:	8c3a      	ldrh	r2, [r7, #32]
 80001f0:	819a      	strh	r2, [r3, #12]
    this->wheel_diameter = wheel_diameter;
 80001f2:	697b      	ldr	r3, [r7, #20]
 80001f4:	687a      	ldr	r2, [r7, #4]
 80001f6:	611a      	str	r2, [r3, #16]
    this->pulses_per_rev = pulses_per_revolution;
 80001f8:	697b      	ldr	r3, [r7, #20]
 80001fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80001fc:	615a      	str	r2, [r3, #20]
    this->last_capture = 0;
 80001fe:	697b      	ldr	r3, [r7, #20]
 8000200:	2200      	movs	r2, #0
 8000202:	619a      	str	r2, [r3, #24]
    this->speed_mps = 0.0f;
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	f04f 0200 	mov.w	r2, #0
 800020a:	61da      	str	r2, [r3, #28]
    this->distance_m = 0.0f;
 800020c:	697b      	ldr	r3, [r7, #20]
 800020e:	f04f 0200 	mov.w	r2, #0
 8000212:	621a      	str	r2, [r3, #32]

    HAL_TIM_IC_Start_IT(htim, ic_channel);
 8000214:	697b      	ldr	r3, [r7, #20]
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	68f9      	ldr	r1, [r7, #12]
 800021a:	4618      	mov	r0, r3
 800021c:	f003 ffb4 	bl	8004188 <HAL_TIM_IC_Start_IT>
}
 8000220:	697b      	ldr	r3, [r7, #20]
 8000222:	4618      	mov	r0, r3
 8000224:	3718      	adds	r7, #24
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}

0800022a <_ZNK7Encoder8getSpeedEv>:
    }

    last_capture = capture_value;
}

float Encoder::getSpeed() const {
 800022a:	b480      	push	{r7}
 800022c:	b083      	sub	sp, #12
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
    return speed_mps;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	69db      	ldr	r3, [r3, #28]
 8000236:	ee07 3a90 	vmov	s15, r3
}
 800023a:	eeb0 0a67 	vmov.f32	s0, s15
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr

08000248 <_ZN5MotorC1EP17TIM_HandleTypeDefmS1_mfff>:
#include <RoboContFirmware/LowLevel/motor.hpp>

Motor::Motor(TIM_HandleTypeDef* pwm_timer1, uint32_t pwm_channel1,
 8000248:	b580      	push	{r7, lr}
 800024a:	b088      	sub	sp, #32
 800024c:	af00      	add	r7, sp, #0
 800024e:	61f8      	str	r0, [r7, #28]
 8000250:	61b9      	str	r1, [r7, #24]
 8000252:	617a      	str	r2, [r7, #20]
 8000254:	613b      	str	r3, [r7, #16]
 8000256:	ed87 0a03 	vstr	s0, [r7, #12]
 800025a:	edc7 0a02 	vstr	s1, [r7, #8]
 800025e:	ed87 1a01 	vstr	s2, [r7, #4]
             TIM_HandleTypeDef* pwm_timer2, uint32_t pwm_channel2,
             float wheel_diameter, float max_speed_mps, float max_pwm) {
    this->htim_pwm1 = pwm_timer1;
 8000262:	69fb      	ldr	r3, [r7, #28]
 8000264:	69ba      	ldr	r2, [r7, #24]
 8000266:	601a      	str	r2, [r3, #0]
    this->channel_pwm1 = pwm_channel1;
 8000268:	69fb      	ldr	r3, [r7, #28]
 800026a:	697a      	ldr	r2, [r7, #20]
 800026c:	605a      	str	r2, [r3, #4]
    this->htim_pwm2 = pwm_timer2;
 800026e:	69fb      	ldr	r3, [r7, #28]
 8000270:	693a      	ldr	r2, [r7, #16]
 8000272:	609a      	str	r2, [r3, #8]
    this->channel_pwm2 = pwm_channel2;
 8000274:	69fb      	ldr	r3, [r7, #28]
 8000276:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000278:	60da      	str	r2, [r3, #12]

    this->wheel_diameter = wheel_diameter;
 800027a:	69fb      	ldr	r3, [r7, #28]
 800027c:	68fa      	ldr	r2, [r7, #12]
 800027e:	611a      	str	r2, [r3, #16]
    this->max_speed_mps = max_speed_mps;
 8000280:	69fb      	ldr	r3, [r7, #28]
 8000282:	68ba      	ldr	r2, [r7, #8]
 8000284:	615a      	str	r2, [r3, #20]
    this->max_pwm = max_pwm;
 8000286:	69fb      	ldr	r3, [r7, #28]
 8000288:	687a      	ldr	r2, [r7, #4]
 800028a:	619a      	str	r2, [r3, #24]

    pid_kp = 1.0f;
 800028c:	69fb      	ldr	r3, [r7, #28]
 800028e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000292:	61da      	str	r2, [r3, #28]
    pid_ki = 0.0f;
 8000294:	69fb      	ldr	r3, [r7, #28]
 8000296:	f04f 0200 	mov.w	r2, #0
 800029a:	621a      	str	r2, [r3, #32]
    pid_kd = 0.0f;
 800029c:	69fb      	ldr	r3, [r7, #28]
 800029e:	f04f 0200 	mov.w	r2, #0
 80002a2:	625a      	str	r2, [r3, #36]	@ 0x24
    pid_integral = 0.0f;
 80002a4:	69fb      	ldr	r3, [r7, #28]
 80002a6:	f04f 0200 	mov.w	r2, #0
 80002aa:	629a      	str	r2, [r3, #40]	@ 0x28
    pid_previous_error = 0.0f;
 80002ac:	69fb      	ldr	r3, [r7, #28]
 80002ae:	f04f 0200 	mov.w	r2, #0
 80002b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    target_speed_mps = 0.0f;
 80002b4:	69fb      	ldr	r3, [r7, #28]
 80002b6:	f04f 0200 	mov.w	r2, #0
 80002ba:	631a      	str	r2, [r3, #48]	@ 0x30

    HAL_TIM_PWM_Start(htim_pwm1, channel_pwm1);
 80002bc:	69fb      	ldr	r3, [r7, #28]
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	69fb      	ldr	r3, [r7, #28]
 80002c2:	685b      	ldr	r3, [r3, #4]
 80002c4:	4619      	mov	r1, r3
 80002c6:	4610      	mov	r0, r2
 80002c8:	f003 fe44 	bl	8003f54 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htim_pwm2, channel_pwm2);
 80002cc:	69fb      	ldr	r3, [r7, #28]
 80002ce:	689a      	ldr	r2, [r3, #8]
 80002d0:	69fb      	ldr	r3, [r7, #28]
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	4619      	mov	r1, r3
 80002d6:	4610      	mov	r0, r2
 80002d8:	f003 fe3c 	bl	8003f54 <HAL_TIM_PWM_Start>
}
 80002dc:	69fb      	ldr	r3, [r7, #28]
 80002de:	4618      	mov	r0, r3
 80002e0:	3720      	adds	r7, #32
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}

080002e6 <_ZN5Motor6setPIDEfff>:

void Motor::setPID(float kp, float ki, float kd) {
 80002e6:	b480      	push	{r7}
 80002e8:	b085      	sub	sp, #20
 80002ea:	af00      	add	r7, sp, #0
 80002ec:	60f8      	str	r0, [r7, #12]
 80002ee:	ed87 0a02 	vstr	s0, [r7, #8]
 80002f2:	edc7 0a01 	vstr	s1, [r7, #4]
 80002f6:	ed87 1a00 	vstr	s2, [r7]
    pid_kp = kp;
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	68ba      	ldr	r2, [r7, #8]
 80002fe:	61da      	str	r2, [r3, #28]
    pid_ki = ki;
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	687a      	ldr	r2, [r7, #4]
 8000304:	621a      	str	r2, [r3, #32]
    pid_kd = kd;
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	683a      	ldr	r2, [r7, #0]
 800030a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800030c:	bf00      	nop
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <_ZN5Motor14setTargetSpeedEf>:

void Motor::setTargetSpeed(float target_speed) {
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	ed87 0a00 	vstr	s0, [r7]
    if (target_speed > max_speed_mps) target_speed = max_speed_mps;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	edd3 7a05 	vldr	s15, [r3, #20]
 800032a:	ed97 7a00 	vldr	s14, [r7]
 800032e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000336:	dd02      	ble.n	800033e <_ZN5Motor14setTargetSpeedEf+0x26>
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	603b      	str	r3, [r7, #0]
    if (target_speed < -max_speed_mps) target_speed = -max_speed_mps;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	edd3 7a05 	vldr	s15, [r3, #20]
 8000344:	eef1 7a67 	vneg.f32	s15, s15
 8000348:	ed97 7a00 	vldr	s14, [r7]
 800034c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000354:	d506      	bpl.n	8000364 <_ZN5Motor14setTargetSpeedEf+0x4c>
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	edd3 7a05 	vldr	s15, [r3, #20]
 800035c:	eef1 7a67 	vneg.f32	s15, s15
 8000360:	edc7 7a00 	vstr	s15, [r7]
    target_speed_mps = target_speed;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	683a      	ldr	r2, [r7, #0]
 8000368:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800036a:	bf00      	nop
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr

08000376 <_ZN5Motor9updatePWMEff>:

void Motor::updatePWM(float current_speed, float dt) {
 8000376:	b480      	push	{r7}
 8000378:	b089      	sub	sp, #36	@ 0x24
 800037a:	af00      	add	r7, sp, #0
 800037c:	60f8      	str	r0, [r7, #12]
 800037e:	ed87 0a02 	vstr	s0, [r7, #8]
 8000382:	edc7 0a01 	vstr	s1, [r7, #4]
    float error = target_speed_mps - current_speed;
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800038c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000390:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000394:	edc7 7a06 	vstr	s15, [r7, #24]
    pid_integral += error * dt;
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800039e:	edd7 6a06 	vldr	s13, [r7, #24]
 80003a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80003a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80003aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    float derivative = (error - pid_previous_error) / dt;
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80003ba:	ed97 7a06 	vldr	s14, [r7, #24]
 80003be:	ee77 6a67 	vsub.f32	s13, s14, s15
 80003c2:	ed97 7a01 	vldr	s14, [r7, #4]
 80003c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80003ca:	edc7 7a05 	vstr	s15, [r7, #20]
    float output = pid_kp * error + pid_ki * pid_integral + pid_kd * derivative;
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	ed93 7a07 	vldr	s14, [r3, #28]
 80003d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80003d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	edd3 6a08 	vldr	s13, [r3, #32]
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80003e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80003ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80003f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80003fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80003fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000402:	edc7 7a04 	vstr	s15, [r7, #16]
    pid_previous_error = error;
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	69ba      	ldr	r2, [r7, #24]
 800040a:	62da      	str	r2, [r3, #44]	@ 0x2c

    float pwm_value = (output / max_speed_mps) * max_pwm;
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000412:	edd7 6a04 	vldr	s13, [r7, #16]
 8000416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	edd3 7a06 	vldr	s15, [r3, #24]
 8000420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000424:	edc7 7a07 	vstr	s15, [r7, #28]
    if (pwm_value > max_pwm) pwm_value = max_pwm;
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	edd3 7a06 	vldr	s15, [r3, #24]
 800042e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000432:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800043a:	dd02      	ble.n	8000442 <_ZN5Motor9updatePWMEff+0xcc>
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	61fb      	str	r3, [r7, #28]
    if (pwm_value < -max_pwm) pwm_value = -max_pwm;
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	edd3 7a06 	vldr	s15, [r3, #24]
 8000448:	eef1 7a67 	vneg.f32	s15, s15
 800044c:	ed97 7a07 	vldr	s14, [r7, #28]
 8000450:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000458:	d506      	bpl.n	8000468 <_ZN5Motor9updatePWMEff+0xf2>
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	edd3 7a06 	vldr	s15, [r3, #24]
 8000460:	eef1 7a67 	vneg.f32	s15, s15
 8000464:	edc7 7a07 	vstr	s15, [r7, #28]

    if (pwm_value >= 0) {
 8000468:	edd7 7a07 	vldr	s15, [r7, #28]
 800046c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000474:	db5a      	blt.n	800052c <_ZN5Motor9updatePWMEff+0x1b6>
        __HAL_TIM_SET_COMPARE(htim_pwm1, channel_pwm1, (uint32_t)pwm_value);
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d10a      	bne.n	8000494 <_ZN5Motor9updatePWMEff+0x11e>
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	edd7 7a07 	vldr	s15, [r7, #28]
 8000488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800048c:	ee17 2a90 	vmov	r2, s15
 8000490:	635a      	str	r2, [r3, #52]	@ 0x34
 8000492:	e027      	b.n	80004e4 <_ZN5Motor9updatePWMEff+0x16e>
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	2b04      	cmp	r3, #4
 800049a:	d10a      	bne.n	80004b2 <_ZN5Motor9updatePWMEff+0x13c>
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80004a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80004aa:	ee17 2a90 	vmov	r2, s15
 80004ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80004b0:	e018      	b.n	80004e4 <_ZN5Motor9updatePWMEff+0x16e>
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	2b08      	cmp	r3, #8
 80004b8:	d10a      	bne.n	80004d0 <_ZN5Motor9updatePWMEff+0x15a>
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80004c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80004c8:	ee17 2a90 	vmov	r2, s15
 80004cc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80004ce:	e009      	b.n	80004e4 <_ZN5Motor9updatePWMEff+0x16e>
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80004da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80004de:	ee17 2a90 	vmov	r2, s15
 80004e2:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htim_pwm2, channel_pwm2, 0);
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	68db      	ldr	r3, [r3, #12]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d105      	bne.n	80004f8 <_ZN5Motor9updatePWMEff+0x182>
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2200      	movs	r2, #0
 80004f4:	635a      	str	r2, [r3, #52]	@ 0x34
    } else {
        __HAL_TIM_SET_COMPARE(htim_pwm1, channel_pwm1, 0);
        __HAL_TIM_SET_COMPARE(htim_pwm2, channel_pwm2, (uint32_t)(-pwm_value));
    }
}
 80004f6:	e07b      	b.n	80005f0 <_ZN5Motor9updatePWMEff+0x27a>
        __HAL_TIM_SET_COMPARE(htim_pwm2, channel_pwm2, 0);
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	2b04      	cmp	r3, #4
 80004fe:	d105      	bne.n	800050c <_ZN5Motor9updatePWMEff+0x196>
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	689b      	ldr	r3, [r3, #8]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2200      	movs	r2, #0
 8000508:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800050a:	e071      	b.n	80005f0 <_ZN5Motor9updatePWMEff+0x27a>
        __HAL_TIM_SET_COMPARE(htim_pwm2, channel_pwm2, 0);
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	2b08      	cmp	r3, #8
 8000512:	d105      	bne.n	8000520 <_ZN5Motor9updatePWMEff+0x1aa>
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	689b      	ldr	r3, [r3, #8]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2200      	movs	r2, #0
 800051c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800051e:	e067      	b.n	80005f0 <_ZN5Motor9updatePWMEff+0x27a>
        __HAL_TIM_SET_COMPARE(htim_pwm2, channel_pwm2, 0);
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2200      	movs	r2, #0
 8000528:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800052a:	e061      	b.n	80005f0 <_ZN5Motor9updatePWMEff+0x27a>
        __HAL_TIM_SET_COMPARE(htim_pwm1, channel_pwm1, 0);
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d105      	bne.n	8000540 <_ZN5Motor9updatePWMEff+0x1ca>
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2200      	movs	r2, #0
 800053c:	635a      	str	r2, [r3, #52]	@ 0x34
 800053e:	e018      	b.n	8000572 <_ZN5Motor9updatePWMEff+0x1fc>
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	2b04      	cmp	r3, #4
 8000546:	d105      	bne.n	8000554 <_ZN5Motor9updatePWMEff+0x1de>
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2200      	movs	r2, #0
 8000550:	639a      	str	r2, [r3, #56]	@ 0x38
 8000552:	e00e      	b.n	8000572 <_ZN5Motor9updatePWMEff+0x1fc>
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	2b08      	cmp	r3, #8
 800055a:	d105      	bne.n	8000568 <_ZN5Motor9updatePWMEff+0x1f2>
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2200      	movs	r2, #0
 8000564:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000566:	e004      	b.n	8000572 <_ZN5Motor9updatePWMEff+0x1fc>
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2200      	movs	r2, #0
 8000570:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htim_pwm2, channel_pwm2, (uint32_t)(-pwm_value));
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	68db      	ldr	r3, [r3, #12]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d10c      	bne.n	8000594 <_ZN5Motor9updatePWMEff+0x21e>
 800057a:	edd7 7a07 	vldr	s15, [r7, #28]
 800057e:	eef1 7a67 	vneg.f32	s15, s15
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800058c:	ee17 2a90 	vmov	r2, s15
 8000590:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000592:	e02d      	b.n	80005f0 <_ZN5Motor9updatePWMEff+0x27a>
        __HAL_TIM_SET_COMPARE(htim_pwm2, channel_pwm2, (uint32_t)(-pwm_value));
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	68db      	ldr	r3, [r3, #12]
 8000598:	2b04      	cmp	r3, #4
 800059a:	d10c      	bne.n	80005b6 <_ZN5Motor9updatePWMEff+0x240>
 800059c:	edd7 7a07 	vldr	s15, [r7, #28]
 80005a0:	eef1 7a67 	vneg.f32	s15, s15
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005ae:	ee17 2a90 	vmov	r2, s15
 80005b2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80005b4:	e01c      	b.n	80005f0 <_ZN5Motor9updatePWMEff+0x27a>
        __HAL_TIM_SET_COMPARE(htim_pwm2, channel_pwm2, (uint32_t)(-pwm_value));
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	68db      	ldr	r3, [r3, #12]
 80005ba:	2b08      	cmp	r3, #8
 80005bc:	d10c      	bne.n	80005d8 <_ZN5Motor9updatePWMEff+0x262>
 80005be:	edd7 7a07 	vldr	s15, [r7, #28]
 80005c2:	eef1 7a67 	vneg.f32	s15, s15
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005d0:	ee17 2a90 	vmov	r2, s15
 80005d4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80005d6:	e00b      	b.n	80005f0 <_ZN5Motor9updatePWMEff+0x27a>
        __HAL_TIM_SET_COMPARE(htim_pwm2, channel_pwm2, (uint32_t)(-pwm_value));
 80005d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80005dc:	eef1 7a67 	vneg.f32	s15, s15
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005ea:	ee17 2a90 	vmov	r2, s15
 80005ee:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80005f0:	bf00      	nop
 80005f2:	3724      	adds	r7, #36	@ 0x24
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <_ZNK5Motor14getMaxSpeedMpsEv>:

float Motor::getMaxSpeedMps() const {
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
    return max_speed_mps;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	ee07 3a90 	vmov	s15, r3
}
 800060c:	eeb0 0a67 	vmov.f32	s0, s15
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <_ZN15MotorControllerC1Ef>:
#include <RoboContFirmware/MidLevel/motor_controller.hpp>

MotorController::MotorController(float timer_frequency) {
 800061a:	b480      	push	{r7}
 800061c:	b083      	sub	sp, #12
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
 8000622:	ed87 0a00 	vstr	s0, [r7]
    motorCount = 0;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2200      	movs	r2, #0
 800062a:	f883 2020 	strb.w	r2, [r3, #32]
    timerFreq = timer_frequency;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4618      	mov	r0, r3
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr

08000642 <_ZN15MotorController8addMotorEP5MotorP7Encoder>:

void MotorController::addMotor(Motor* motor, Encoder* encoder) {
 8000642:	b480      	push	{r7}
 8000644:	b085      	sub	sp, #20
 8000646:	af00      	add	r7, sp, #0
 8000648:	60f8      	str	r0, [r7, #12]
 800064a:	60b9      	str	r1, [r7, #8]
 800064c:	607a      	str	r2, [r7, #4]
    if (motorCount < MAX_MOTORS) {
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000654:	2b03      	cmp	r3, #3
 8000656:	d817      	bhi.n	8000688 <_ZN15MotorController8addMotorEP5MotorP7Encoder+0x46>
        motorUnits[motorCount].motor = motor;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800065e:	4619      	mov	r1, r3
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	68ba      	ldr	r2, [r7, #8]
 8000664:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        motorUnits[motorCount].encoder = encoder;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	00db      	lsls	r3, r3, #3
 8000672:	4413      	add	r3, r2
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	605a      	str	r2, [r3, #4]
        motorCount++;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800067e:	3301      	adds	r3, #1
 8000680:	b2da      	uxtb	r2, r3
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	f883 2020 	strb.w	r2, [r3, #32]
    }
}
 8000688:	bf00      	nop
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <_ZN15MotorController9updateAllEf>:
            motorUnits[i].encoder->updateFromCapture(capture_value, timerFreq);
        }
    }
}

void MotorController::updateAll(float dt) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	ed87 0a00 	vstr	s0, [r7]
    for (uint8_t i = 0; i < motorCount; i++) {
 80006a0:	2300      	movs	r3, #0
 80006a2:	73fb      	strb	r3, [r7, #15]
 80006a4:	e017      	b.n	80006d6 <_ZN15MotorController9updateAllEf+0x42>
        float currentSpeed = motorUnits[i].encoder->getSpeed();
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	4413      	add	r3, r2
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff fdba 	bl	800022a <_ZNK7Encoder8getSpeedEv>
 80006b6:	ed87 0a02 	vstr	s0, [r7, #8]
        motorUnits[i].motor->updatePWM(currentSpeed, dt);
 80006ba:	7bfa      	ldrb	r2, [r7, #15]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80006c2:	edd7 0a00 	vldr	s1, [r7]
 80006c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff fe53 	bl	8000376 <_ZN5Motor9updatePWMEff>
    for (uint8_t i = 0; i < motorCount; i++) {
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	3301      	adds	r3, #1
 80006d4:	73fb      	strb	r3, [r7, #15]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006dc:	7bfa      	ldrb	r2, [r7, #15]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d3e1      	bcc.n	80006a6 <_ZN15MotorController9updateAllEf+0x12>
    }
}
 80006e2:	bf00      	nop
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006fc:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <MX_ADC1_Init+0x74>)
 80006fe:	4a19      	ldr	r2, [pc, #100]	@ (8000764 <MX_ADC1_Init+0x78>)
 8000700:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000702:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <MX_ADC1_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000708:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <MX_ADC1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800070e:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_ADC1_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000714:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <MX_ADC1_Init+0x74>)
 8000716:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800071a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800071c:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <MX_ADC1_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000722:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <MX_ADC1_Init+0x74>)
 8000724:	2201      	movs	r2, #1
 8000726:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000728:	480d      	ldr	r0, [pc, #52]	@ (8000760 <MX_ADC1_Init+0x74>)
 800072a:	f001 f937 	bl	800199c <HAL_ADC_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000734:	f000 fbf4 	bl	8000f20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000738:	2304      	movs	r3, #4
 800073a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800073c:	2301      	movs	r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	4619      	mov	r1, r3
 8000748:	4805      	ldr	r0, [pc, #20]	@ (8000760 <MX_ADC1_Init+0x74>)
 800074a:	f001 f9ff 	bl	8001b4c <HAL_ADC_ConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000754:	f000 fbe4 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000028 	.word	0x20000028
 8000764:	40012400 	.word	0x40012400

08000768 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	@ 0x28
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a15      	ldr	r2, [pc, #84]	@ (80007dc <HAL_ADC_MspInit+0x74>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d124      	bne.n	80007d4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <HAL_ADC_MspInit+0x78>)
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	4a14      	ldr	r2, [pc, #80]	@ (80007e0 <HAL_ADC_MspInit+0x78>)
 8000790:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000794:	6193      	str	r3, [r2, #24]
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <HAL_ADC_MspInit+0x78>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <HAL_ADC_MspInit+0x78>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	4a0e      	ldr	r2, [pc, #56]	@ (80007e0 <HAL_ADC_MspInit+0x78>)
 80007a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007ac:	6153      	str	r3, [r2, #20]
 80007ae:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <HAL_ADC_MspInit+0x78>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007ba:	23f0      	movs	r3, #240	@ 0xf0
 80007bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007be:	2303      	movs	r3, #3
 80007c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d0:	f001 fd3c 	bl	800224c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007d4:	bf00      	nop
 80007d6:	3728      	adds	r7, #40	@ 0x28
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40012400 	.word	0x40012400
 80007e0:	40021000 	.word	0x40021000

080007e4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80007e8:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <MX_CAN_Init+0x60>)
 80007ea:	4a17      	ldr	r2, [pc, #92]	@ (8000848 <MX_CAN_Init+0x64>)
 80007ec:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80007ee:	4b15      	ldr	r3, [pc, #84]	@ (8000844 <MX_CAN_Init+0x60>)
 80007f0:	2210      	movs	r2, #16
 80007f2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80007f4:	4b13      	ldr	r3, [pc, #76]	@ (8000844 <MX_CAN_Init+0x60>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007fa:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <MX_CAN_Init+0x60>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000800:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <MX_CAN_Init+0x60>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000806:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_CAN_Init+0x60>)
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800080c:	4b0d      	ldr	r3, [pc, #52]	@ (8000844 <MX_CAN_Init+0x60>)
 800080e:	2200      	movs	r2, #0
 8000810:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000812:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_CAN_Init+0x60>)
 8000814:	2200      	movs	r2, #0
 8000816:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000818:	4b0a      	ldr	r3, [pc, #40]	@ (8000844 <MX_CAN_Init+0x60>)
 800081a:	2200      	movs	r2, #0
 800081c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_CAN_Init+0x60>)
 8000820:	2200      	movs	r2, #0
 8000822:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000824:	4b07      	ldr	r3, [pc, #28]	@ (8000844 <MX_CAN_Init+0x60>)
 8000826:	2200      	movs	r2, #0
 8000828:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_CAN_Init+0x60>)
 800082c:	2200      	movs	r2, #0
 800082e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	@ (8000844 <MX_CAN_Init+0x60>)
 8000832:	f001 fabc 	bl	8001dae <HAL_CAN_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800083c:	f000 fb70 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000058 	.word	0x20000058
 8000848:	40006400 	.word	0x40006400

0800084c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	@ 0x28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a17      	ldr	r2, [pc, #92]	@ (80008c8 <HAL_CAN_MspInit+0x7c>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d128      	bne.n	80008c0 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800086e:	4b17      	ldr	r3, [pc, #92]	@ (80008cc <HAL_CAN_MspInit+0x80>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	4a16      	ldr	r2, [pc, #88]	@ (80008cc <HAL_CAN_MspInit+0x80>)
 8000874:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000878:	61d3      	str	r3, [r2, #28]
 800087a:	4b14      	ldr	r3, [pc, #80]	@ (80008cc <HAL_CAN_MspInit+0x80>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	4b11      	ldr	r3, [pc, #68]	@ (80008cc <HAL_CAN_MspInit+0x80>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	4a10      	ldr	r2, [pc, #64]	@ (80008cc <HAL_CAN_MspInit+0x80>)
 800088c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000890:	6153      	str	r3, [r2, #20]
 8000892:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <HAL_CAN_MspInit+0x80>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800089e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80008b0:	2309      	movs	r3, #9
 80008b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <HAL_CAN_MspInit+0x84>)
 80008bc:	f001 fcc6 	bl	800224c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	@ 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40006400 	.word	0x40006400
 80008cc:	40021000 	.word	0x40021000
 80008d0:	48000400 	.word	0x48000400

080008d4 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DAC_HandleTypeDef hdac2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80008e4:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <MX_DAC1_Init+0x64>)
 80008e6:	4a15      	ldr	r2, [pc, #84]	@ (800093c <MX_DAC1_Init+0x68>)
 80008e8:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80008ea:	4813      	ldr	r0, [pc, #76]	@ (8000938 <MX_DAC1_Init+0x64>)
 80008ec:	f001 fc3f 	bl	800216e <HAL_DAC_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 80008f6:	f000 fb13 	bl	8000f20 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2200      	movs	r2, #0
 8000906:	4619      	mov	r1, r3
 8000908:	480b      	ldr	r0, [pc, #44]	@ (8000938 <MX_DAC1_Init+0x64>)
 800090a:	f001 fc52 	bl	80021b2 <HAL_DAC_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000914:	f000 fb04 	bl	8000f20 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2210      	movs	r2, #16
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	@ (8000938 <MX_DAC1_Init+0x64>)
 8000920:	f001 fc47 	bl	80021b2 <HAL_DAC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_DAC1_Init+0x5a>
  {
    Error_Handler();
 800092a:	f000 faf9 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000080 	.word	0x20000080
 800093c:	40007400 	.word	0x40007400

08000940 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000950:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <MX_DAC2_Init+0x4c>)
 8000952:	4a0f      	ldr	r2, [pc, #60]	@ (8000990 <MX_DAC2_Init+0x50>)
 8000954:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000956:	480d      	ldr	r0, [pc, #52]	@ (800098c <MX_DAC2_Init+0x4c>)
 8000958:	f001 fc09 	bl	800216e <HAL_DAC_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_DAC2_Init+0x26>
  {
    Error_Handler();
 8000962:	f000 fadd 	bl	8000f20 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2200      	movs	r2, #0
 8000972:	4619      	mov	r1, r3
 8000974:	4805      	ldr	r0, [pc, #20]	@ (800098c <MX_DAC2_Init+0x4c>)
 8000976:	f001 fc1c 	bl	80021b2 <HAL_DAC_ConfigChannel>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_DAC2_Init+0x44>
  {
    Error_Handler();
 8000980:	f000 face 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000094 	.word	0x20000094
 8000990:	40009800 	.word	0x40009800

08000994 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08c      	sub	sp, #48	@ 0x30
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a2b      	ldr	r2, [pc, #172]	@ (8000a60 <HAL_DAC_MspInit+0xcc>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d125      	bne.n	8000a02 <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80009b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000a64 <HAL_DAC_MspInit+0xd0>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	4a2a      	ldr	r2, [pc, #168]	@ (8000a64 <HAL_DAC_MspInit+0xd0>)
 80009bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80009c0:	61d3      	str	r3, [r2, #28]
 80009c2:	4b28      	ldr	r3, [pc, #160]	@ (8000a64 <HAL_DAC_MspInit+0xd0>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80009ca:	61bb      	str	r3, [r7, #24]
 80009cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b25      	ldr	r3, [pc, #148]	@ (8000a64 <HAL_DAC_MspInit+0xd0>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	4a24      	ldr	r2, [pc, #144]	@ (8000a64 <HAL_DAC_MspInit+0xd0>)
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d8:	6153      	str	r3, [r2, #20]
 80009da:	4b22      	ldr	r3, [pc, #136]	@ (8000a64 <HAL_DAC_MspInit+0xd0>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009e6:	2330      	movs	r3, #48	@ 0x30
 80009e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ea:	2303      	movs	r3, #3
 80009ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009fc:	f001 fc26 	bl	800224c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8000a00:	e029      	b.n	8000a56 <HAL_DAC_MspInit+0xc2>
  else if(dacHandle->Instance==DAC2)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a18      	ldr	r2, [pc, #96]	@ (8000a68 <HAL_DAC_MspInit+0xd4>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d124      	bne.n	8000a56 <HAL_DAC_MspInit+0xc2>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8000a0c:	4b15      	ldr	r3, [pc, #84]	@ (8000a64 <HAL_DAC_MspInit+0xd0>)
 8000a0e:	69db      	ldr	r3, [r3, #28]
 8000a10:	4a14      	ldr	r2, [pc, #80]	@ (8000a64 <HAL_DAC_MspInit+0xd0>)
 8000a12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a16:	61d3      	str	r3, [r2, #28]
 8000a18:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <HAL_DAC_MspInit+0xd0>)
 8000a1a:	69db      	ldr	r3, [r3, #28]
 8000a1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a24:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <HAL_DAC_MspInit+0xd0>)
 8000a26:	695b      	ldr	r3, [r3, #20]
 8000a28:	4a0e      	ldr	r2, [pc, #56]	@ (8000a64 <HAL_DAC_MspInit+0xd0>)
 8000a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a2e:	6153      	str	r3, [r2, #20]
 8000a30:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <HAL_DAC_MspInit+0xd0>)
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a3c:	2340      	movs	r3, #64	@ 0x40
 8000a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a40:	2303      	movs	r3, #3
 8000a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a52:	f001 fbfb 	bl	800224c <HAL_GPIO_Init>
}
 8000a56:	bf00      	nop
 8000a58:	3730      	adds	r7, #48	@ 0x30
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40007400 	.word	0x40007400
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40009800 	.word	0x40009800

08000a6c <MX_GPIO_Init>:
     PB5   ------> S_TIM17_CH1
     PB6   ------> I2C1_SCL
     PB7   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08c      	sub	sp, #48	@ 0x30
 8000a70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	4ba2      	ldr	r3, [pc, #648]	@ (8000d0c <MX_GPIO_Init+0x2a0>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	4aa1      	ldr	r2, [pc, #644]	@ (8000d0c <MX_GPIO_Init+0x2a0>)
 8000a88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a8c:	6153      	str	r3, [r2, #20]
 8000a8e:	4b9f      	ldr	r3, [pc, #636]	@ (8000d0c <MX_GPIO_Init+0x2a0>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a96:	61bb      	str	r3, [r7, #24]
 8000a98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a9a:	4b9c      	ldr	r3, [pc, #624]	@ (8000d0c <MX_GPIO_Init+0x2a0>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	4a9b      	ldr	r2, [pc, #620]	@ (8000d0c <MX_GPIO_Init+0x2a0>)
 8000aa0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000aa4:	6153      	str	r3, [r2, #20]
 8000aa6:	4b99      	ldr	r3, [pc, #612]	@ (8000d0c <MX_GPIO_Init+0x2a0>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	4b96      	ldr	r3, [pc, #600]	@ (8000d0c <MX_GPIO_Init+0x2a0>)
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	4a95      	ldr	r2, [pc, #596]	@ (8000d0c <MX_GPIO_Init+0x2a0>)
 8000ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000abc:	6153      	str	r3, [r2, #20]
 8000abe:	4b93      	ldr	r3, [pc, #588]	@ (8000d0c <MX_GPIO_Init+0x2a0>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	4b90      	ldr	r3, [pc, #576]	@ (8000d0c <MX_GPIO_Init+0x2a0>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	4a8f      	ldr	r2, [pc, #572]	@ (8000d0c <MX_GPIO_Init+0x2a0>)
 8000ad0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ad4:	6153      	str	r3, [r2, #20]
 8000ad6:	4b8d      	ldr	r3, [pc, #564]	@ (8000d0c <MX_GPIO_Init+0x2a0>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ae2:	4b8a      	ldr	r3, [pc, #552]	@ (8000d0c <MX_GPIO_Init+0x2a0>)
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	4a89      	ldr	r2, [pc, #548]	@ (8000d0c <MX_GPIO_Init+0x2a0>)
 8000ae8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000aec:	6153      	str	r3, [r2, #20]
 8000aee:	4b87      	ldr	r3, [pc, #540]	@ (8000d0c <MX_GPIO_Init+0x2a0>)
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	4b84      	ldr	r3, [pc, #528]	@ (8000d0c <MX_GPIO_Init+0x2a0>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	4a83      	ldr	r2, [pc, #524]	@ (8000d0c <MX_GPIO_Init+0x2a0>)
 8000b00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000b04:	6153      	str	r3, [r2, #20]
 8000b06:	4b81      	ldr	r3, [pc, #516]	@ (8000d0c <MX_GPIO_Init+0x2a0>)
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000b18:	487d      	ldr	r0, [pc, #500]	@ (8000d10 <MX_GPIO_Init+0x2a4>)
 8000b1a:	f001 fd11 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_2, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000b24:	487b      	ldr	r0, [pc, #492]	@ (8000d14 <MX_GPIO_Init+0x2a8>)
 8000b26:	f001 fd0b 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b34:	f001 fd04 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b38:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	4619      	mov	r1, r3
 8000b50:	486f      	ldr	r0, [pc, #444]	@ (8000d10 <MX_GPIO_Init+0x2a4>)
 8000b52:	f001 fb7b 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = encoder1_B_Pin;
 8000b56:	2320      	movs	r3, #32
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(encoder1_B_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	4619      	mov	r1, r3
 8000b68:	4869      	ldr	r0, [pc, #420]	@ (8000d10 <MX_GPIO_Init+0x2a4>)
 8000b6a:	f001 fb6f 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = encoder2_B_Pin;
 8000b6e:	2304      	movs	r3, #4
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(encoder2_B_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4865      	ldr	r0, [pc, #404]	@ (8000d18 <MX_GPIO_Init+0x2ac>)
 8000b82:	f001 fb63 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = encoder3_B_Pin|encoder4_B_Pin;
 8000b86:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4860      	ldr	r0, [pc, #384]	@ (8000d1c <MX_GPIO_Init+0x2b0>)
 8000b9c:	f001 fb56 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ba0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4858      	ldr	r0, [pc, #352]	@ (8000d18 <MX_GPIO_Init+0x2ac>)
 8000bb8:	f001 fb48 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_2;
 8000bbc:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	484f      	ldr	r0, [pc, #316]	@ (8000d14 <MX_GPIO_Init+0x2a8>)
 8000bd6:	f001 fb39 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000bda:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bec:	2305      	movs	r3, #5
 8000bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4846      	ldr	r0, [pc, #280]	@ (8000d10 <MX_GPIO_Init+0x2a4>)
 8000bf8:	f001 fb28 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8000bfc:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c18:	f001 fb18 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c1c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c2e:	2307      	movs	r3, #7
 8000c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c3c:	f001 fb06 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c40:	23c0      	movs	r3, #192	@ 0xc0
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c44:	2312      	movs	r3, #18
 8000c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c50:	2304      	movs	r3, #4
 8000c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4831      	ldr	r0, [pc, #196]	@ (8000d20 <MX_GPIO_Init+0x2b4>)
 8000c5c:	f001 faf6 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c60:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c72:	2307      	movs	r3, #7
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4824      	ldr	r0, [pc, #144]	@ (8000d10 <MX_GPIO_Init+0x2a4>)
 8000c7e:	f001 fae5 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM19;
 8000c94:	2302      	movs	r3, #2
 8000c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	481c      	ldr	r0, [pc, #112]	@ (8000d10 <MX_GPIO_Init+0x2a4>)
 8000ca0:	f001 fad4 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000ca4:	2318      	movs	r3, #24
 8000ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cb4:	2307      	movs	r3, #7
 8000cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4816      	ldr	r0, [pc, #88]	@ (8000d18 <MX_GPIO_Init+0x2ac>)
 8000cc0:	f001 fac4 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cc4:	2320      	movs	r3, #32
 8000cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8000cd4:	230a      	movs	r3, #10
 8000cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480e      	ldr	r0, [pc, #56]	@ (8000d18 <MX_GPIO_Init+0x2ac>)
 8000ce0:	f001 fab4 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ce4:	23c0      	movs	r3, #192	@ 0xc0
 8000ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce8:	2312      	movs	r3, #18
 8000cea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4806      	ldr	r0, [pc, #24]	@ (8000d18 <MX_GPIO_Init+0x2ac>)
 8000d00:	f001 faa4 	bl	800224c <HAL_GPIO_Init>

}
 8000d04:	bf00      	nop
 8000d06:	3730      	adds	r7, #48	@ 0x30
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	48000800 	.word	0x48000800
 8000d14:	48000c00 	.word	0x48000c00
 8000d18:	48000400 	.word	0x48000400
 8000d1c:	48001000 	.word	0x48001000
 8000d20:	48001400 	.word	0x48001400

08000d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b094      	sub	sp, #80	@ 0x50
 8000d28:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2a:	f000 fdad 	bl	8001888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2e:	f000 f889 	bl	8000e44 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d32:	f7ff fe9b 	bl	8000a6c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d36:	f7ff fcd9 	bl	80006ec <MX_ADC1_Init>
  MX_CAN_Init();
 8000d3a:	f7ff fd53 	bl	80007e4 <MX_CAN_Init>
  MX_DAC1_Init();
 8000d3e:	f7ff fdc9 	bl	80008d4 <MX_DAC1_Init>
  MX_DAC2_Init();
 8000d42:	f7ff fdfd 	bl	8000940 <MX_DAC2_Init>
  MX_TIM2_Init();
 8000d46:	f000 f9f1 	bl	800112c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d4a:	f000 fa85 	bl	8001258 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000d4e:	f000 fae1 	bl	8001314 <MX_TIM5_Init>
  MX_TIM13_Init();
 8000d52:	f000 fb77 	bl	8001444 <MX_TIM13_Init>
  MX_USB_PCD_Init();
 8000d56:	f000 fd07 	bl	8001768 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  // Create motor object for TIM5 CH1 and CH2
  Motor testMotor(&htim5, TIM_CHANNEL_1, &htim5, TIM_CHANNEL_2, 0.1f, 1.5f, 1000.0f);
 8000d5a:	1d38      	adds	r0, r7, #4
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 8000e30 <main+0x10c>
 8000d64:	eef7 0a08 	vmov.f32	s1, #120	@ 0x3fc00000  1.5
 8000d68:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8000e34 <main+0x110>
 8000d6c:	4b32      	ldr	r3, [pc, #200]	@ (8000e38 <main+0x114>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	4931      	ldr	r1, [pc, #196]	@ (8000e38 <main+0x114>)
 8000d72:	f7ff fa69 	bl	8000248 <_ZN5MotorC1EP17TIM_HandleTypeDefmS1_mfff>

  float target_speed = 0.0f;
 8000d76:	f04f 0300 	mov.w	r3, #0
 8000d7a:	647b      	str	r3, [r7, #68]	@ 0x44
  float step = 0.05f; // Speed increment step
 8000d7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e3c <main+0x118>)
 8000d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  bool increasing = true;
 8000d80:	2301      	movs	r3, #1
 8000d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  test_motor_with_encoder();
 8000d86:	f000 f937 	bl	8000ff8 <_Z23test_motor_with_encoderv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      // Set motor target speed
      testMotor.setTargetSpeed(target_speed);
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fac1 	bl	8000318 <_ZN5Motor14setTargetSpeedEf>

      // Simulate measured speed as zero for testing (replace later with encoder feedback)
      float simulated_speed = 0.0f;
 8000d96:	f04f 0300 	mov.w	r3, #0
 8000d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      testMotor.updatePWM(simulated_speed, 0.01f);
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8000e40 <main+0x11c>
 8000da2:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fae5 	bl	8000376 <_ZN5Motor9updatePWMEff>

      HAL_Delay(100);
 8000dac:	2064      	movs	r0, #100	@ 0x64
 8000dae:	f000 fdd1 	bl	8001954 <HAL_Delay>

      // Increase or decrease speed with safe access to max speed
      if (increasing)
 8000db2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d023      	beq.n	8000e02 <main+0xde>
      {
          target_speed += step;
 8000dba:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000dbe:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dc6:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
          if (target_speed >= testMotor.getMaxSpeedMps())
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fc15 	bl	80005fc <_ZNK5Motor14getMaxSpeedMpsEv>
 8000dd2:	eeb0 7a40 	vmov.f32	s14, s0
 8000dd6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000dda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de2:	bfac      	ite	ge
 8000de4:	2301      	movge	r3, #1
 8000de6:	2300      	movlt	r3, #0
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0cd      	beq.n	8000d8a <main+0x66>
          {
              target_speed = testMotor.getMaxSpeedMps();
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fc03 	bl	80005fc <_ZNK5Motor14getMaxSpeedMpsEv>
 8000df6:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
              increasing = false;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8000e00:	e7c3      	b.n	8000d8a <main+0x66>
          }
      }
      else
      {
          target_speed -= step;
 8000e02:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000e06:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e0e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
          if (target_speed <= 0.0f)
 8000e12:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000e16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e1e:	d805      	bhi.n	8000e2c <main+0x108>
          {
              target_speed = 0.0f;
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	647b      	str	r3, [r7, #68]	@ 0x44
              increasing = true;
 8000e26:	2301      	movs	r3, #1
 8000e28:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43


      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
  }
 8000e2c:	e7ad      	b.n	8000d8a <main+0x66>
 8000e2e:	bf00      	nop
 8000e30:	447a0000 	.word	0x447a0000
 8000e34:	3dcccccd 	.word	0x3dcccccd
 8000e38:	20000168 	.word	0x20000168
 8000e3c:	3d4ccccd 	.word	0x3d4ccccd
 8000e40:	3c23d70a 	.word	0x3c23d70a

08000e44 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b09a      	sub	sp, #104	@ 0x68
 8000e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e4e:	2228      	movs	r2, #40	@ 0x28
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f004 f971 	bl	800513a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e68:	463b      	mov	r3, r7
 8000e6a:	222c      	movs	r2, #44	@ 0x2c
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f004 f963 	bl	800513a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e74:	2301      	movs	r3, #1
 8000e76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e7c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e82:	2301      	movs	r3, #1
 8000e84:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e86:	2302      	movs	r3, #2
 8000e88:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e8e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000e90:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e94:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e96:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f001 fc30 	bl	8002700 <HAL_RCC_OscConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	bf14      	ite	ne
 8000ea6:	2301      	movne	r3, #1
 8000ea8:	2300      	moveq	r3, #0
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000eb0:	f000 f836 	bl	8000f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb4:	230f      	movs	r3, #15
 8000eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ec0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000eca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ece:	2101      	movs	r1, #1
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f002 fc53 	bl	800377c <HAL_RCC_ClockConfig>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	bf14      	ite	ne
 8000edc:	2301      	movne	r3, #1
 8000ede:	2300      	moveq	r3, #0
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8000ee6:	f000 f81b 	bl	8000f20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC1;
 8000eea:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <_Z18SystemClock_Configv+0xd8>)
 8000eec:	603b      	str	r3, [r7, #0]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000eee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PCLK2_DIV2;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef8:	463b      	mov	r3, r7
 8000efa:	4618      	mov	r0, r3
 8000efc:	f002 fe0e 	bl	8003b1c <HAL_RCCEx_PeriphCLKConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	bf14      	ite	ne
 8000f06:	2301      	movne	r3, #1
 8000f08:	2300      	moveq	r3, #0
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <_Z18SystemClock_Configv+0xd0>
  {
    Error_Handler();
 8000f10:	f000 f806 	bl	8000f20 <Error_Handler>
  }
}
 8000f14:	bf00      	nop
 8000f16:	3768      	adds	r7, #104	@ 0x68
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	00020080 	.word	0x00020080

08000f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f24:	b672      	cpsid	i
}
 8000f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <Error_Handler+0x8>

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <HAL_MspInit+0x44>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	4a0e      	ldr	r2, [pc, #56]	@ (8000f70 <HAL_MspInit+0x44>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6193      	str	r3, [r2, #24]
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <HAL_MspInit+0x44>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <HAL_MspInit+0x44>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	4a08      	ldr	r2, [pc, #32]	@ (8000f70 <HAL_MspInit+0x44>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f54:	61d3      	str	r3, [r2, #28]
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_MspInit+0x44>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <NMI_Handler+0x4>

08000f7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fca:	f000 fca3 	bl	8001914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <SystemInit+0x20>)
 8000fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fde:	4a05      	ldr	r2, [pc, #20]	@ (8000ff4 <SystemInit+0x20>)
 8000fe0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fe4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <_Z23test_motor_with_encoderv>:
    }
}

// Test function: Motor with encoder closed-loop control
void test_motor_with_encoder()
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b0a0      	sub	sp, #128	@ 0x80
 8000ffc:	af02      	add	r7, sp, #8
    // Parameters (adjust as needed)
    const float WHEEL_DIAMETER = 0.1f;
 8000ffe:	4b31      	ldr	r3, [pc, #196]	@ (80010c4 <_Z23test_motor_with_encoderv+0xcc>)
 8001000:	673b      	str	r3, [r7, #112]	@ 0x70
    const float MAX_SPEED_MPS = 1.0f;
 8001002:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001006:	66fb      	str	r3, [r7, #108]	@ 0x6c
    const float MAX_PWM = 1000.0f;
 8001008:	4b2f      	ldr	r3, [pc, #188]	@ (80010c8 <_Z23test_motor_with_encoderv+0xd0>)
 800100a:	66bb      	str	r3, [r7, #104]	@ 0x68
    const uint32_t ENCODER_PPR = 1000;
 800100c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001010:	667b      	str	r3, [r7, #100]	@ 0x64

    // Create motor & encoder
    Motor motor(&htim5, TIM_CHANNEL_1, &htim5, TIM_CHANNEL_2, WHEEL_DIAMETER, MAX_SPEED_MPS, MAX_PWM);
 8001012:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001016:	2304      	movs	r3, #4
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	ed9f 1a2c 	vldr	s2, [pc, #176]	@ 80010cc <_Z23test_motor_with_encoderv+0xd4>
 800101e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001022:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 80010d0 <_Z23test_motor_with_encoderv+0xd8>
 8001026:	4b2b      	ldr	r3, [pc, #172]	@ (80010d4 <_Z23test_motor_with_encoderv+0xdc>)
 8001028:	2200      	movs	r2, #0
 800102a:	492a      	ldr	r1, [pc, #168]	@ (80010d4 <_Z23test_motor_with_encoderv+0xdc>)
 800102c:	f7ff f90c 	bl	8000248 <_ZN5MotorC1EP17TIM_HandleTypeDefmS1_mfff>
    motor.setPID(2.0f, 0.5f, 0.1f); // Tune these values
 8001030:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001034:	ed9f 1a26 	vldr	s2, [pc, #152]	@ 80010d0 <_Z23test_motor_with_encoderv+0xd8>
 8001038:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 800103c:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff f950 	bl	80002e6 <_ZN5Motor6setPIDEfff>

    Encoder encoder(&htim2, TIM_CHANNEL_1, GPIOC, GPIO_PIN_5, WHEEL_DIAMETER, ENCODER_PPR);
 8001046:	1d38      	adds	r0, r7, #4
 8001048:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	2320      	movs	r3, #32
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80010d0 <_Z23test_motor_with_encoderv+0xd8>
 8001056:	4b20      	ldr	r3, [pc, #128]	@ (80010d8 <_Z23test_motor_with_encoderv+0xe0>)
 8001058:	2200      	movs	r2, #0
 800105a:	4920      	ldr	r1, [pc, #128]	@ (80010dc <_Z23test_motor_with_encoderv+0xe4>)
 800105c:	f7ff f8b4 	bl	80001c8 <_ZN7EncoderC1EP17TIM_HandleTypeDefmP12GPIO_TypeDeftfm>

    // Add to controller
    motorController.addMotor(&motor, &encoder);
 8001060:	1d3a      	adds	r2, r7, #4
 8001062:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001066:	4619      	mov	r1, r3
 8001068:	481d      	ldr	r0, [pc, #116]	@ (80010e0 <_Z23test_motor_with_encoderv+0xe8>)
 800106a:	f7ff faea 	bl	8000642 <_ZN15MotorController8addMotorEP5MotorP7Encoder>

    // Set a target speed for testing
    motor.setTargetSpeed(0.5f);
 800106e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001072:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff f94e 	bl	8000318 <_ZN5Motor14setTargetSpeedEf>

    uint32_t last_tick = HAL_GetTick();
 800107c:	f000 fc5e 	bl	800193c <HAL_GetTick>
 8001080:	6778      	str	r0, [r7, #116]	@ 0x74
    while (1)
    {
        uint32_t current_tick = HAL_GetTick();
 8001082:	f000 fc5b 	bl	800193c <HAL_GetTick>
 8001086:	6638      	str	r0, [r7, #96]	@ 0x60
        float dt = (current_tick - last_tick) / 1000.0f;
 8001088:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800108a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	ee07 3a90 	vmov	s15, r3
 8001092:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001096:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80010cc <_Z23test_motor_with_encoderv+0xd4>
 800109a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800109e:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
        if (dt >= 0.01f)
 80010a2:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80010a6:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80010e4 <_Z23test_motor_with_encoderv+0xec>
 80010aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b2:	db06      	blt.n	80010c2 <_Z23test_motor_with_encoderv+0xca>
        {
            motorController.updateAll(dt);
 80010b4:	ed97 0a17 	vldr	s0, [r7, #92]	@ 0x5c
 80010b8:	4809      	ldr	r0, [pc, #36]	@ (80010e0 <_Z23test_motor_with_encoderv+0xe8>)
 80010ba:	f7ff faeb 	bl	8000694 <_ZN15MotorController9updateAllEf>
            last_tick = current_tick;
 80010be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010c0:	677b      	str	r3, [r7, #116]	@ 0x74
        }
    }
 80010c2:	e7de      	b.n	8001082 <_Z23test_motor_with_encoderv+0x8a>
 80010c4:	3dcccccd 	.word	0x3dcccccd
 80010c8:	447a0000 	.word	0x447a0000
 80010cc:	447a0000 	.word	0x447a0000
 80010d0:	3dcccccd 	.word	0x3dcccccd
 80010d4:	20000168 	.word	0x20000168
 80010d8:	48000800 	.word	0x48000800
 80010dc:	200000d0 	.word	0x200000d0
 80010e0:	200000a8 	.word	0x200000a8
 80010e4:	3c23d70a 	.word	0x3c23d70a

080010e8 <_Z41__static_initialization_and_destruction_0ii>:
}
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d109      	bne.n	800110c <_Z41__static_initialization_and_destruction_0ii+0x24>
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010fe:	4293      	cmp	r3, r2
 8001100:	d104      	bne.n	800110c <_Z41__static_initialization_and_destruction_0ii+0x24>
MotorController motorController(10000.0f); // Example freq: 10kHz
 8001102:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8001114 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8001106:	4804      	ldr	r0, [pc, #16]	@ (8001118 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001108:	f7ff fa87 	bl	800061a <_ZN15MotorControllerC1Ef>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	461c4000 	.word	0x461c4000
 8001118:	200000a8 	.word	0x200000a8

0800111c <_GLOBAL__sub_I_motorController>:
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
 8001120:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001124:	2001      	movs	r0, #1
 8001126:	f7ff ffdf 	bl	80010e8 <_Z41__static_initialization_and_destruction_0ii>
 800112a:	bd80      	pop	{r7, pc}

0800112c <MX_TIM2_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08e      	sub	sp, #56	@ 0x38
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001132:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001140:	f107 0320 	add.w	r3, r7, #32
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
 8001158:	615a      	str	r2, [r3, #20]
 800115a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800115c:	4b3d      	ldr	r3, [pc, #244]	@ (8001254 <MX_TIM2_Init+0x128>)
 800115e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001162:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8001164:	4b3b      	ldr	r3, [pc, #236]	@ (8001254 <MX_TIM2_Init+0x128>)
 8001166:	222f      	movs	r2, #47	@ 0x2f
 8001168:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116a:	4b3a      	ldr	r3, [pc, #232]	@ (8001254 <MX_TIM2_Init+0x128>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001170:	4b38      	ldr	r3, [pc, #224]	@ (8001254 <MX_TIM2_Init+0x128>)
 8001172:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001176:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001178:	4b36      	ldr	r3, [pc, #216]	@ (8001254 <MX_TIM2_Init+0x128>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117e:	4b35      	ldr	r3, [pc, #212]	@ (8001254 <MX_TIM2_Init+0x128>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001184:	4833      	ldr	r0, [pc, #204]	@ (8001254 <MX_TIM2_Init+0x128>)
 8001186:	f002 fe3d 	bl	8003e04 <HAL_TIM_Base_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001190:	f7ff fec6 	bl	8000f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001194:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001198:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800119a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800119e:	4619      	mov	r1, r3
 80011a0:	482c      	ldr	r0, [pc, #176]	@ (8001254 <MX_TIM2_Init+0x128>)
 80011a2:	f003 fa71 	bl	8004688 <HAL_TIM_ConfigClockSource>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80011ac:	f7ff feb8 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011b0:	4828      	ldr	r0, [pc, #160]	@ (8001254 <MX_TIM2_Init+0x128>)
 80011b2:	f002 fe76 	bl	8003ea2 <HAL_TIM_PWM_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80011bc:	f7ff feb0 	bl	8000f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c0:	2300      	movs	r3, #0
 80011c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011c8:	f107 0320 	add.w	r3, r7, #32
 80011cc:	4619      	mov	r1, r3
 80011ce:	4821      	ldr	r0, [pc, #132]	@ (8001254 <MX_TIM2_Init+0x128>)
 80011d0:	f003 ff06 	bl	8004fe0 <HAL_TIMEx_MasterConfigSynchronization>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80011da:	f7ff fea1 	bl	8000f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011de:	2360      	movs	r3, #96	@ 0x60
 80011e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2200      	movs	r2, #0
 80011f2:	4619      	mov	r1, r3
 80011f4:	4817      	ldr	r0, [pc, #92]	@ (8001254 <MX_TIM2_Init+0x128>)
 80011f6:	f003 f985 	bl	8004504 <HAL_TIM_PWM_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001200:	f7ff fe8e 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	2204      	movs	r2, #4
 8001208:	4619      	mov	r1, r3
 800120a:	4812      	ldr	r0, [pc, #72]	@ (8001254 <MX_TIM2_Init+0x128>)
 800120c:	f003 f97a 	bl	8004504 <HAL_TIM_PWM_ConfigChannel>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001216:	f7ff fe83 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	2208      	movs	r2, #8
 800121e:	4619      	mov	r1, r3
 8001220:	480c      	ldr	r0, [pc, #48]	@ (8001254 <MX_TIM2_Init+0x128>)
 8001222:	f003 f96f 	bl	8004504 <HAL_TIM_PWM_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800122c:	f7ff fe78 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	220c      	movs	r2, #12
 8001234:	4619      	mov	r1, r3
 8001236:	4807      	ldr	r0, [pc, #28]	@ (8001254 <MX_TIM2_Init+0x128>)
 8001238:	f003 f964 	bl	8004504 <HAL_TIM_PWM_ConfigChannel>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8001242:	f7ff fe6d 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001246:	4803      	ldr	r0, [pc, #12]	@ (8001254 <MX_TIM2_Init+0x128>)
 8001248:	f000 fa34 	bl	80016b4 <HAL_TIM_MspPostInit>

}
 800124c:	bf00      	nop
 800124e:	3738      	adds	r7, #56	@ 0x38
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200000d0 	.word	0x200000d0

08001258 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125e:	f107 0310 	add.w	r3, r7, #16
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001268:	463b      	mov	r3, r7
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001274:	4b25      	ldr	r3, [pc, #148]	@ (800130c <MX_TIM3_Init+0xb4>)
 8001276:	4a26      	ldr	r2, [pc, #152]	@ (8001310 <MX_TIM3_Init+0xb8>)
 8001278:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800127a:	4b24      	ldr	r3, [pc, #144]	@ (800130c <MX_TIM3_Init+0xb4>)
 800127c:	2200      	movs	r2, #0
 800127e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001280:	4b22      	ldr	r3, [pc, #136]	@ (800130c <MX_TIM3_Init+0xb4>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001286:	4b21      	ldr	r3, [pc, #132]	@ (800130c <MX_TIM3_Init+0xb4>)
 8001288:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800128c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128e:	4b1f      	ldr	r3, [pc, #124]	@ (800130c <MX_TIM3_Init+0xb4>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001294:	4b1d      	ldr	r3, [pc, #116]	@ (800130c <MX_TIM3_Init+0xb4>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800129a:	481c      	ldr	r0, [pc, #112]	@ (800130c <MX_TIM3_Init+0xb4>)
 800129c:	f002 ff24 	bl	80040e8 <HAL_TIM_IC_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80012a6:	f7ff fe3b 	bl	8000f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012b2:	f107 0310 	add.w	r3, r7, #16
 80012b6:	4619      	mov	r1, r3
 80012b8:	4814      	ldr	r0, [pc, #80]	@ (800130c <MX_TIM3_Init+0xb4>)
 80012ba:	f003 fe91 	bl	8004fe0 <HAL_TIMEx_MasterConfigSynchronization>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012c4:	f7ff fe2c 	bl	8000f20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012c8:	2300      	movs	r3, #0
 80012ca:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012cc:	2301      	movs	r3, #1
 80012ce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80012d8:	463b      	mov	r3, r7
 80012da:	2204      	movs	r2, #4
 80012dc:	4619      	mov	r1, r3
 80012de:	480b      	ldr	r0, [pc, #44]	@ (800130c <MX_TIM3_Init+0xb4>)
 80012e0:	f003 f874 	bl	80043cc <HAL_TIM_IC_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80012ea:	f7ff fe19 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80012ee:	463b      	mov	r3, r7
 80012f0:	220c      	movs	r2, #12
 80012f2:	4619      	mov	r1, r3
 80012f4:	4805      	ldr	r0, [pc, #20]	@ (800130c <MX_TIM3_Init+0xb4>)
 80012f6:	f003 f869 	bl	80043cc <HAL_TIM_IC_ConfigChannel>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8001300:	f7ff fe0e 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	2000011c 	.word	0x2000011c
 8001310:	40000400 	.word	0x40000400

08001314 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08e      	sub	sp, #56	@ 0x38
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001328:	f107 0320 	add.w	r3, r7, #32
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
 8001340:	615a      	str	r2, [r3, #20]
 8001342:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001344:	4b3d      	ldr	r3, [pc, #244]	@ (800143c <MX_TIM5_Init+0x128>)
 8001346:	4a3e      	ldr	r2, [pc, #248]	@ (8001440 <MX_TIM5_Init+0x12c>)
 8001348:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 48-1;
 800134a:	4b3c      	ldr	r3, [pc, #240]	@ (800143c <MX_TIM5_Init+0x128>)
 800134c:	222f      	movs	r2, #47	@ 0x2f
 800134e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001350:	4b3a      	ldr	r3, [pc, #232]	@ (800143c <MX_TIM5_Init+0x128>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8001356:	4b39      	ldr	r3, [pc, #228]	@ (800143c <MX_TIM5_Init+0x128>)
 8001358:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800135c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135e:	4b37      	ldr	r3, [pc, #220]	@ (800143c <MX_TIM5_Init+0x128>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001364:	4b35      	ldr	r3, [pc, #212]	@ (800143c <MX_TIM5_Init+0x128>)
 8001366:	2200      	movs	r2, #0
 8001368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800136a:	4834      	ldr	r0, [pc, #208]	@ (800143c <MX_TIM5_Init+0x128>)
 800136c:	f002 fd4a 	bl	8003e04 <HAL_TIM_Base_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001376:	f7ff fdd3 	bl	8000f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800137a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800137e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001380:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001384:	4619      	mov	r1, r3
 8001386:	482d      	ldr	r0, [pc, #180]	@ (800143c <MX_TIM5_Init+0x128>)
 8001388:	f003 f97e 	bl	8004688 <HAL_TIM_ConfigClockSource>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001392:	f7ff fdc5 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001396:	4829      	ldr	r0, [pc, #164]	@ (800143c <MX_TIM5_Init+0x128>)
 8001398:	f002 fd83 	bl	8003ea2 <HAL_TIM_PWM_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80013a2:	f7ff fdbd 	bl	8000f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013ae:	f107 0320 	add.w	r3, r7, #32
 80013b2:	4619      	mov	r1, r3
 80013b4:	4821      	ldr	r0, [pc, #132]	@ (800143c <MX_TIM5_Init+0x128>)
 80013b6:	f003 fe13 	bl	8004fe0 <HAL_TIMEx_MasterConfigSynchronization>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80013c0:	f7ff fdae 	bl	8000f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c4:	2360      	movs	r3, #96	@ 0x60
 80013c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2200      	movs	r2, #0
 80013d8:	4619      	mov	r1, r3
 80013da:	4818      	ldr	r0, [pc, #96]	@ (800143c <MX_TIM5_Init+0x128>)
 80013dc:	f003 f892 	bl	8004504 <HAL_TIM_PWM_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80013e6:	f7ff fd9b 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2204      	movs	r2, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	4812      	ldr	r0, [pc, #72]	@ (800143c <MX_TIM5_Init+0x128>)
 80013f2:	f003 f887 	bl	8004504 <HAL_TIM_PWM_ConfigChannel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 80013fc:	f7ff fd90 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2208      	movs	r2, #8
 8001404:	4619      	mov	r1, r3
 8001406:	480d      	ldr	r0, [pc, #52]	@ (800143c <MX_TIM5_Init+0x128>)
 8001408:	f003 f87c 	bl	8004504 <HAL_TIM_PWM_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM5_Init+0x102>
  {
    Error_Handler();
 8001412:	f7ff fd85 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	220c      	movs	r2, #12
 800141a:	4619      	mov	r1, r3
 800141c:	4807      	ldr	r0, [pc, #28]	@ (800143c <MX_TIM5_Init+0x128>)
 800141e:	f003 f871 	bl	8004504 <HAL_TIM_PWM_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM5_Init+0x118>
  {
    Error_Handler();
 8001428:	f7ff fd7a 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800142c:	4803      	ldr	r0, [pc, #12]	@ (800143c <MX_TIM5_Init+0x128>)
 800142e:	f000 f941 	bl	80016b4 <HAL_TIM_MspPostInit>

}
 8001432:	bf00      	nop
 8001434:	3738      	adds	r7, #56	@ 0x38
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000168 	.word	0x20000168
 8001440:	40000c00 	.word	0x40000c00

08001444 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800144a:	463b      	mov	r3, r7
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001456:	4b1d      	ldr	r3, [pc, #116]	@ (80014cc <MX_TIM13_Init+0x88>)
 8001458:	4a1d      	ldr	r2, [pc, #116]	@ (80014d0 <MX_TIM13_Init+0x8c>)
 800145a:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800145c:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <MX_TIM13_Init+0x88>)
 800145e:	2200      	movs	r2, #0
 8001460:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001462:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <MX_TIM13_Init+0x88>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001468:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <MX_TIM13_Init+0x88>)
 800146a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800146e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001470:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <MX_TIM13_Init+0x88>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001476:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <MX_TIM13_Init+0x88>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800147c:	4813      	ldr	r0, [pc, #76]	@ (80014cc <MX_TIM13_Init+0x88>)
 800147e:	f002 fcc1 	bl	8003e04 <HAL_TIM_Base_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM13_Init+0x48>
  {
    Error_Handler();
 8001488:	f7ff fd4a 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 800148c:	480f      	ldr	r0, [pc, #60]	@ (80014cc <MX_TIM13_Init+0x88>)
 800148e:	f002 fe2b 	bl	80040e8 <HAL_TIM_IC_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM13_Init+0x58>
  {
    Error_Handler();
 8001498:	f7ff fd42 	bl	8000f20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800149c:	2300      	movs	r3, #0
 800149e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014a0:	2301      	movs	r3, #1
 80014a2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014ac:	463b      	mov	r3, r7
 80014ae:	2200      	movs	r2, #0
 80014b0:	4619      	mov	r1, r3
 80014b2:	4806      	ldr	r0, [pc, #24]	@ (80014cc <MX_TIM13_Init+0x88>)
 80014b4:	f002 ff8a 	bl	80043cc <HAL_TIM_IC_ConfigChannel>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM13_Init+0x7e>
  {
    Error_Handler();
 80014be:	f7ff fd2f 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200001b4 	.word	0x200001b4
 80014d0:	40001c00 	.word	0x40001c00

080014d4 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM15_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08e      	sub	sp, #56	@ 0x38
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014f4:	d10c      	bne.n	8001510 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014f6:	4b3f      	ldr	r3, [pc, #252]	@ (80015f4 <HAL_TIM_Base_MspInit+0x120>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	4a3e      	ldr	r2, [pc, #248]	@ (80015f4 <HAL_TIM_Base_MspInit+0x120>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	61d3      	str	r3, [r2, #28]
 8001502:	4b3c      	ldr	r3, [pc, #240]	@ (80015f4 <HAL_TIM_Base_MspInit+0x120>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	623b      	str	r3, [r7, #32]
 800150c:	6a3b      	ldr	r3, [r7, #32]

  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800150e:	e06d      	b.n	80015ec <HAL_TIM_Base_MspInit+0x118>
  else if(tim_baseHandle->Instance==TIM5)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a38      	ldr	r2, [pc, #224]	@ (80015f8 <HAL_TIM_Base_MspInit+0x124>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d10c      	bne.n	8001534 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800151a:	4b36      	ldr	r3, [pc, #216]	@ (80015f4 <HAL_TIM_Base_MspInit+0x120>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	4a35      	ldr	r2, [pc, #212]	@ (80015f4 <HAL_TIM_Base_MspInit+0x120>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	61d3      	str	r3, [r2, #28]
 8001526:	4b33      	ldr	r3, [pc, #204]	@ (80015f4 <HAL_TIM_Base_MspInit+0x120>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	61fb      	str	r3, [r7, #28]
 8001530:	69fb      	ldr	r3, [r7, #28]
}
 8001532:	e05b      	b.n	80015ec <HAL_TIM_Base_MspInit+0x118>
  else if(tim_baseHandle->Instance==TIM13)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a30      	ldr	r2, [pc, #192]	@ (80015fc <HAL_TIM_Base_MspInit+0x128>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d128      	bne.n	8001590 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800153e:	4b2d      	ldr	r3, [pc, #180]	@ (80015f4 <HAL_TIM_Base_MspInit+0x120>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	4a2c      	ldr	r2, [pc, #176]	@ (80015f4 <HAL_TIM_Base_MspInit+0x120>)
 8001544:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001548:	61d3      	str	r3, [r2, #28]
 800154a:	4b2a      	ldr	r3, [pc, #168]	@ (80015f4 <HAL_TIM_Base_MspInit+0x120>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001552:	61bb      	str	r3, [r7, #24]
 8001554:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001556:	4b27      	ldr	r3, [pc, #156]	@ (80015f4 <HAL_TIM_Base_MspInit+0x120>)
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	4a26      	ldr	r2, [pc, #152]	@ (80015f4 <HAL_TIM_Base_MspInit+0x120>)
 800155c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001560:	6153      	str	r3, [r2, #20]
 8001562:	4b24      	ldr	r3, [pc, #144]	@ (80015f4 <HAL_TIM_Base_MspInit+0x120>)
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = encoder1_A_Pin;
 800156e:	2310      	movs	r3, #16
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM13;
 800157e:	2302      	movs	r3, #2
 8001580:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(encoder1_A_GPIO_Port, &GPIO_InitStruct);
 8001582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001586:	4619      	mov	r1, r3
 8001588:	481d      	ldr	r0, [pc, #116]	@ (8001600 <HAL_TIM_Base_MspInit+0x12c>)
 800158a:	f000 fe5f 	bl	800224c <HAL_GPIO_Init>
}
 800158e:	e02d      	b.n	80015ec <HAL_TIM_Base_MspInit+0x118>
  else if(tim_baseHandle->Instance==TIM15)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a1b      	ldr	r2, [pc, #108]	@ (8001604 <HAL_TIM_Base_MspInit+0x130>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d128      	bne.n	80015ec <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800159a:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <HAL_TIM_Base_MspInit+0x120>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	4a15      	ldr	r2, [pc, #84]	@ (80015f4 <HAL_TIM_Base_MspInit+0x120>)
 80015a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015a4:	6193      	str	r3, [r2, #24]
 80015a6:	4b13      	ldr	r3, [pc, #76]	@ (80015f4 <HAL_TIM_Base_MspInit+0x120>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <HAL_TIM_Base_MspInit+0x120>)
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	4a0f      	ldr	r2, [pc, #60]	@ (80015f4 <HAL_TIM_Base_MspInit+0x120>)
 80015b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015bc:	6153      	str	r3, [r2, #20]
 80015be:	4b0d      	ldr	r3, [pc, #52]	@ (80015f4 <HAL_TIM_Base_MspInit+0x120>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = encoder4_A_Pin;
 80015ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80015dc:	2301      	movs	r3, #1
 80015de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(encoder4_A_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e4:	4619      	mov	r1, r3
 80015e6:	4808      	ldr	r0, [pc, #32]	@ (8001608 <HAL_TIM_Base_MspInit+0x134>)
 80015e8:	f000 fe30 	bl	800224c <HAL_GPIO_Init>
}
 80015ec:	bf00      	nop
 80015ee:	3738      	adds	r7, #56	@ 0x38
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40000c00 	.word	0x40000c00
 80015fc:	40001c00 	.word	0x40001c00
 8001600:	48000800 	.word	0x48000800
 8001604:	40014000 	.word	0x40014000
 8001608:	48000400 	.word	0x48000400

0800160c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	@ 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a1f      	ldr	r2, [pc, #124]	@ (80016a8 <HAL_TIM_IC_MspInit+0x9c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d137      	bne.n	800169e <HAL_TIM_IC_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800162e:	4b1f      	ldr	r3, [pc, #124]	@ (80016ac <HAL_TIM_IC_MspInit+0xa0>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	4a1e      	ldr	r2, [pc, #120]	@ (80016ac <HAL_TIM_IC_MspInit+0xa0>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	61d3      	str	r3, [r2, #28]
 800163a:	4b1c      	ldr	r3, [pc, #112]	@ (80016ac <HAL_TIM_IC_MspInit+0xa0>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001646:	4b19      	ldr	r3, [pc, #100]	@ (80016ac <HAL_TIM_IC_MspInit+0xa0>)
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	4a18      	ldr	r2, [pc, #96]	@ (80016ac <HAL_TIM_IC_MspInit+0xa0>)
 800164c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001650:	6153      	str	r3, [r2, #20]
 8001652:	4b16      	ldr	r3, [pc, #88]	@ (80016ac <HAL_TIM_IC_MspInit+0xa0>)
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH2
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = encoder2_A_Pin;
 800165e:	2301      	movs	r3, #1
 8001660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 800166e:	230a      	movs	r3, #10
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(encoder2_A_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	480d      	ldr	r0, [pc, #52]	@ (80016b0 <HAL_TIM_IC_MspInit+0xa4>)
 800167a:	f000 fde7 	bl	800224c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = encoder3_A_Pin;
 800167e:	2302      	movs	r3, #2
 8001680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800168e:	2302      	movs	r3, #2
 8001690:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(encoder3_A_GPIO_Port, &GPIO_InitStruct);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	4805      	ldr	r0, [pc, #20]	@ (80016b0 <HAL_TIM_IC_MspInit+0xa4>)
 800169a:	f000 fdd7 	bl	800224c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800169e:	bf00      	nop
 80016a0:	3728      	adds	r7, #40	@ 0x28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40000400 	.word	0x40000400
 80016ac:	40021000 	.word	0x40021000
 80016b0:	48000400 	.word	0x48000400

080016b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	@ 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016d4:	d11d      	bne.n	8001712 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	4b21      	ldr	r3, [pc, #132]	@ (800175c <HAL_TIM_MspPostInit+0xa8>)
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	4a20      	ldr	r2, [pc, #128]	@ (800175c <HAL_TIM_MspPostInit+0xa8>)
 80016dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e0:	6153      	str	r3, [r2, #20]
 80016e2:	4b1e      	ldr	r3, [pc, #120]	@ (800175c <HAL_TIM_MspPostInit+0xa8>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = motor3_A_Pin|motor3_B_Pin|motor4_A_Pin|motor4_AA3_Pin;
 80016ee:	230f      	movs	r3, #15
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016fe:	2301      	movs	r3, #1
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800170c:	f000 fd9e 	bl	800224c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001710:	e020      	b.n	8001754 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM5)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a12      	ldr	r2, [pc, #72]	@ (8001760 <HAL_TIM_MspPostInit+0xac>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d11b      	bne.n	8001754 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800171c:	4b0f      	ldr	r3, [pc, #60]	@ (800175c <HAL_TIM_MspPostInit+0xa8>)
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	4a0e      	ldr	r2, [pc, #56]	@ (800175c <HAL_TIM_MspPostInit+0xa8>)
 8001722:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001726:	6153      	str	r3, [r2, #20]
 8001728:	4b0c      	ldr	r3, [pc, #48]	@ (800175c <HAL_TIM_MspPostInit+0xa8>)
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = motor1_A_Pin|motor1_B_Pin|motor2_A_Pin|motor2_B_Pin;
 8001734:	230f      	movs	r3, #15
 8001736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001744:	2302      	movs	r3, #2
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	4619      	mov	r1, r3
 800174e:	4805      	ldr	r0, [pc, #20]	@ (8001764 <HAL_TIM_MspPostInit+0xb0>)
 8001750:	f000 fd7c 	bl	800224c <HAL_GPIO_Init>
}
 8001754:	bf00      	nop
 8001756:	3728      	adds	r7, #40	@ 0x28
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40021000 	.word	0x40021000
 8001760:	40000c00 	.word	0x40000c00
 8001764:	48000800 	.word	0x48000800

08001768 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800176c:	4b0d      	ldr	r3, [pc, #52]	@ (80017a4 <MX_USB_PCD_Init+0x3c>)
 800176e:	4a0e      	ldr	r2, [pc, #56]	@ (80017a8 <MX_USB_PCD_Init+0x40>)
 8001770:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001772:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <MX_USB_PCD_Init+0x3c>)
 8001774:	2208      	movs	r2, #8
 8001776:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001778:	4b0a      	ldr	r3, [pc, #40]	@ (80017a4 <MX_USB_PCD_Init+0x3c>)
 800177a:	2202      	movs	r2, #2
 800177c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800177e:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <MX_USB_PCD_Init+0x3c>)
 8001780:	2202      	movs	r2, #2
 8001782:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001784:	4b07      	ldr	r3, [pc, #28]	@ (80017a4 <MX_USB_PCD_Init+0x3c>)
 8001786:	2200      	movs	r2, #0
 8001788:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800178a:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <MX_USB_PCD_Init+0x3c>)
 800178c:	2200      	movs	r2, #0
 800178e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001790:	4804      	ldr	r0, [pc, #16]	@ (80017a4 <MX_USB_PCD_Init+0x3c>)
 8001792:	f000 feed 	bl	8002570 <HAL_PCD_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800179c:	f7ff fbc0 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000200 	.word	0x20000200
 80017a8:	40005c00 	.word	0x40005c00

080017ac <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	@ 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a18      	ldr	r2, [pc, #96]	@ (800182c <HAL_PCD_MspInit+0x80>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d129      	bne.n	8001822 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	4b18      	ldr	r3, [pc, #96]	@ (8001830 <HAL_PCD_MspInit+0x84>)
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	4a17      	ldr	r2, [pc, #92]	@ (8001830 <HAL_PCD_MspInit+0x84>)
 80017d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017d8:	6153      	str	r3, [r2, #20]
 80017da:	4b15      	ldr	r3, [pc, #84]	@ (8001830 <HAL_PCD_MspInit+0x84>)
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80017e6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80017ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f4:	2303      	movs	r3, #3
 80017f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80017f8:	230e      	movs	r3, #14
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	4619      	mov	r1, r3
 8001802:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001806:	f000 fd21 	bl	800224c <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <HAL_PCD_MspInit+0x84>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	4a08      	ldr	r2, [pc, #32]	@ (8001830 <HAL_PCD_MspInit+0x84>)
 8001810:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001814:	61d3      	str	r3, [r2, #28]
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_PCD_MspInit+0x84>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8001822:	bf00      	nop
 8001824:	3728      	adds	r7, #40	@ 0x28
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40005c00 	.word	0x40005c00
 8001830:	40021000 	.word	0x40021000

08001834 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001834:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800186c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001838:	f7ff fbcc 	bl	8000fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800183c:	480c      	ldr	r0, [pc, #48]	@ (8001870 <LoopForever+0x6>)
  ldr r1, =_edata
 800183e:	490d      	ldr	r1, [pc, #52]	@ (8001874 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001840:	4a0d      	ldr	r2, [pc, #52]	@ (8001878 <LoopForever+0xe>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001844:	e002      	b.n	800184c <LoopCopyDataInit>

08001846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184a:	3304      	adds	r3, #4

0800184c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800184c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001850:	d3f9      	bcc.n	8001846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001852:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001854:	4c0a      	ldr	r4, [pc, #40]	@ (8001880 <LoopForever+0x16>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001858:	e001      	b.n	800185e <LoopFillZerobss>

0800185a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800185c:	3204      	adds	r2, #4

0800185e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001860:	d3fb      	bcc.n	800185a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001862:	f003 fc73 	bl	800514c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001866:	f7ff fa5d 	bl	8000d24 <main>

0800186a <LoopForever>:

LoopForever:
    b LoopForever
 800186a:	e7fe      	b.n	800186a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800186c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001874:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001878:	080051e8 	.word	0x080051e8
  ldr r2, =_sbss
 800187c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001880:	200004d8 	.word	0x200004d8

08001884 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001884:	e7fe      	b.n	8001884 <ADC1_IRQHandler>
	...

08001888 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800188c:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <HAL_Init+0x28>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a07      	ldr	r2, [pc, #28]	@ (80018b0 <HAL_Init+0x28>)
 8001892:	f043 0310 	orr.w	r3, r3, #16
 8001896:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001898:	2003      	movs	r0, #3
 800189a:	f000 fc35 	bl	8002108 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189e:	200f      	movs	r0, #15
 80018a0:	f000 f808 	bl	80018b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a4:	f7ff fb42 	bl	8000f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40022000 	.word	0x40022000

080018b4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018bc:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <HAL_InitTick+0x54>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b12      	ldr	r3, [pc, #72]	@ (800190c <HAL_InitTick+0x58>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	4619      	mov	r1, r3
 80018c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 fc3f 	bl	8002156 <HAL_SYSTICK_Config>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e00e      	b.n	8001900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b0f      	cmp	r3, #15
 80018e6:	d80a      	bhi.n	80018fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e8:	2200      	movs	r2, #0
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018f0:	f000 fc15 	bl	800211e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f4:	4a06      	ldr	r2, [pc, #24]	@ (8001910 <HAL_InitTick+0x5c>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e000      	b.n	8001900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000000 	.word	0x20000000
 800190c:	20000008 	.word	0x20000008
 8001910:	20000004 	.word	0x20000004

08001914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001918:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <HAL_IncTick+0x20>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <HAL_IncTick+0x24>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4413      	add	r3, r2
 8001924:	4a04      	ldr	r2, [pc, #16]	@ (8001938 <HAL_IncTick+0x24>)
 8001926:	6013      	str	r3, [r2, #0]
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20000008 	.word	0x20000008
 8001938:	200004d4 	.word	0x200004d4

0800193c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001940:	4b03      	ldr	r3, [pc, #12]	@ (8001950 <HAL_GetTick+0x14>)
 8001942:	681b      	ldr	r3, [r3, #0]
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	200004d4 	.word	0x200004d4

08001954 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800195c:	f7ff ffee 	bl	800193c <HAL_GetTick>
 8001960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800196c:	d005      	beq.n	800197a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196e:	4b0a      	ldr	r3, [pc, #40]	@ (8001998 <HAL_Delay+0x44>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4413      	add	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800197a:	bf00      	nop
 800197c:	f7ff ffde 	bl	800193c <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	429a      	cmp	r2, r3
 800198a:	d8f7      	bhi.n	800197c <HAL_Delay+0x28>
  {
  }
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000008 	.word	0x20000008

0800199c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e0be      	b.n	8001b3c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d109      	bne.n	80019e0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7fe fec4 	bl	8000768 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 f9a3 	bl	8001d2c <ADC_ConversionStop_Disable>
 80019e6:	4603      	mov	r3, r0
 80019e8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f040 8099 	bne.w	8001b2a <HAL_ADC_Init+0x18e>
 80019f8:	7dfb      	ldrb	r3, [r7, #23]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f040 8095 	bne.w	8001b2a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a04:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a08:	f023 0302 	bic.w	r3, r3, #2
 8001a0c:	f043 0202 	orr.w	r2, r3, #2
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685a      	ldr	r2, [r3, #4]
                hadc->Init.ExternalTrigConv                      |
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8001a1c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) );
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7b1b      	ldrb	r3, [r3, #12]
 8001a22:	005b      	lsls	r3, r3, #1
                hadc->Init.ExternalTrigConv                      |
 8001a24:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a34:	d003      	beq.n	8001a3e <HAL_ADC_Init+0xa2>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d102      	bne.n	8001a44 <HAL_ADC_Init+0xa8>
 8001a3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a42:	e000      	b.n	8001a46 <HAL_ADC_Init+0xaa>
 8001a44:	2300      	movs	r3, #0
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]

    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7d1b      	ldrb	r3, [r3, #20]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d119      	bne.n	8001a88 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	7b1b      	ldrb	r3, [r3, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d109      	bne.n	8001a70 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
                  ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion) );
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	035a      	lsls	r2, r3, #13
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	e00b      	b.n	8001a88 <HAL_ADC_Init+0xec>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a74:	f043 0220 	orr.w	r2, r3, #32
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a80:	f043 0201 	orr.w	r2, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	4b28      	ldr	r3, [pc, #160]	@ (8001b44 <HAL_ADC_Init+0x1a8>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	68b9      	ldr	r1, [r7, #8]
 8001aac:	430b      	orrs	r3, r1
 8001aae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ab8:	d003      	beq.n	8001ac2 <HAL_ADC_Init+0x126>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d104      	bne.n	8001acc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	051b      	lsls	r3, r3, #20
 8001aca:	60fb      	str	r3, [r7, #12]
    }
    
    MODIFY_REG(hadc->Instance->SQR1,
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <HAL_ADC_Init+0x1ac>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d10b      	bne.n	8001b08 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afa:	f023 0303 	bic.w	r3, r3, #3
 8001afe:	f043 0201 	orr.w	r2, r3, #1
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b06:	e018      	b.n	8001b3a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0c:	f023 0312 	bic.w	r3, r3, #18
 8001b10:	f043 0210 	orr.w	r2, r3, #16
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1c:	f043 0201 	orr.w	r2, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b28:	e007      	b.n	8001b3a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2e:	f043 0210 	orr.w	r2, r3, #16
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	ffe1f7fd 	.word	0xffe1f7fd
 8001b48:	ff1f0efe 	.word	0xff1f0efe

08001b4c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x20>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e0d2      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x1c6>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6U */
  if (sConfig->Rank < 7U)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b06      	cmp	r3, #6
 8001b7a:	d81c      	bhi.n	8001bb6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3b05      	subs	r3, #5
 8001b8e:	221f      	movs	r2, #31
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	4019      	ands	r1, r3
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3b05      	subs	r3, #5
 8001ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bb4:	e03c      	b.n	8001c30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12U */
  else if (sConfig->Rank < 13U)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b0c      	cmp	r3, #12
 8001bbc:	d81c      	bhi.n	8001bf8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	3b23      	subs	r3, #35	@ 0x23
 8001bd0:	221f      	movs	r2, #31
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	4019      	ands	r1, r3
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	6818      	ldr	r0, [r3, #0]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	3b23      	subs	r3, #35	@ 0x23
 8001bea:	fa00 f203 	lsl.w	r2, r0, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bf6:	e01b      	b.n	8001c30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16U */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	3b41      	subs	r3, #65	@ 0x41
 8001c0a:	221f      	movs	r2, #31
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	4019      	ands	r1, r3
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	3b41      	subs	r3, #65	@ 0x41
 8001c24:	fa00 f203 	lsl.w	r2, r0, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 18U */
  if (sConfig->Channel > ADC_CHANNEL_10)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b0a      	cmp	r3, #10
 8001c36:	d91c      	bls.n	8001c72 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68d9      	ldr	r1, [r3, #12]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	3b1e      	subs	r3, #30
 8001c4a:	2207      	movs	r2, #7
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	4019      	ands	r1, r3
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	6898      	ldr	r0, [r3, #8]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	3b1e      	subs	r3, #30
 8001c64:	fa00 f203 	lsl.w	r2, r0, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	e019      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else   /* For channels 0 to 9U */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6919      	ldr	r1, [r3, #16]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	2207      	movs	r2, #7
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	4019      	ands	r1, r3
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	6898      	ldr	r0, [r3, #8]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b10      	cmp	r3, #16
 8001cac:	d003      	beq.n	8001cb6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cb2:	2b11      	cmp	r3, #17
 8001cb4:	d11e      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x1a8>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001cc4:	609a      	str	r2, [r3, #8]
    
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b10      	cmp	r3, #16
 8001ccc:	d11c      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x1bc>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cce:	4b14      	ldr	r3, [pc, #80]	@ (8001d20 <HAL_ADC_ConfigChannel+0x1d4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a14      	ldr	r2, [pc, #80]	@ (8001d24 <HAL_ADC_ConfigChannel+0x1d8>)
 8001cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd8:	0c9a      	lsrs	r2, r3, #18
 8001cda:	4613      	mov	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 8001ce4:	e002      	b.n	8001cec <HAL_ADC_ConfigChannel+0x1a0>
      {
        wait_loop_index--;
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f9      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x19a>
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001cf2:	e009      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x1bc>
      }
    }
  }
  /* if ADC1 Channel_18 is selected, enable VBAT measurement path */
  else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b12      	cmp	r3, #18
 8001cfa:	d105      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x1bc>
  {
    SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_VBAT);
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001d28 <HAL_ADC_ConfigChannel+0x1dc>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a09      	ldr	r2, [pc, #36]	@ (8001d28 <HAL_ADC_ConfigChannel+0x1dc>)
 8001d02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d06:	6013      	str	r3, [r2, #0]
  }

   
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	20000000 	.word	0x20000000
 8001d24:	431bde83 	.word	0x431bde83
 8001d28:	40010000 	.word	0x40010000

08001d2c <ADC_ConversionStop_Disable>:
  * @brief  Stop ADC conversion and disable the selected ADC
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d12e      	bne.n	8001da4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0201 	bic.w	r2, r2, #1
 8001d54:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d56:	f7ff fdf1 	bl	800193c <HAL_GetTick>
 8001d5a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d5c:	e01b      	b.n	8001d96 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d5e:	f7ff fded 	bl	800193c <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d914      	bls.n	8001d96 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d10d      	bne.n	8001d96 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7e:	f043 0210 	orr.w	r2, r3, #16
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8a:	f043 0201 	orr.w	r2, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e007      	b.n	8001da6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d0dc      	beq.n	8001d5e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b084      	sub	sp, #16
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0ed      	b.n	8001f9c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d102      	bne.n	8001dd2 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7fe fd3d 	bl	800084c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f042 0201 	orr.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001de2:	f7ff fdab 	bl	800193c <HAL_GetTick>
 8001de6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001de8:	e012      	b.n	8001e10 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dea:	f7ff fda7 	bl	800193c <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b0a      	cmp	r3, #10
 8001df6:	d90b      	bls.n	8001e10 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2205      	movs	r2, #5
 8001e08:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0c5      	b.n	8001f9c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0e5      	beq.n	8001dea <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0202 	bic.w	r2, r2, #2
 8001e2c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e2e:	f7ff fd85 	bl	800193c <HAL_GetTick>
 8001e32:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e34:	e012      	b.n	8001e5c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e36:	f7ff fd81 	bl	800193c <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b0a      	cmp	r3, #10
 8001e42:	d90b      	bls.n	8001e5c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e48:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2205      	movs	r2, #5
 8001e54:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e09f      	b.n	8001f9c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1e5      	bne.n	8001e36 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	7e1b      	ldrb	r3, [r3, #24]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d108      	bne.n	8001e84 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	e007      	b.n	8001e94 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	7e5b      	ldrb	r3, [r3, #25]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d108      	bne.n	8001eae <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	e007      	b.n	8001ebe <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ebc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7e9b      	ldrb	r3, [r3, #26]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d108      	bne.n	8001ed8 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 0220 	orr.w	r2, r2, #32
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e007      	b.n	8001ee8 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0220 	bic.w	r2, r2, #32
 8001ee6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7edb      	ldrb	r3, [r3, #27]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d108      	bne.n	8001f02 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0210 	bic.w	r2, r2, #16
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	e007      	b.n	8001f12 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0210 	orr.w	r2, r2, #16
 8001f10:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	7f1b      	ldrb	r3, [r3, #28]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d108      	bne.n	8001f2c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f042 0208 	orr.w	r2, r2, #8
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	e007      	b.n	8001f3c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0208 	bic.w	r2, r2, #8
 8001f3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	7f5b      	ldrb	r3, [r3, #29]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d108      	bne.n	8001f56 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0204 	orr.w	r2, r2, #4
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	e007      	b.n	8001f66 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0204 	bic.w	r2, r2, #4
 8001f64:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	ea42 0103 	orr.w	r1, r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	1e5a      	subs	r2, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd6:	4a04      	ldr	r2, [pc, #16]	@ (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	60d3      	str	r3, [r2, #12]
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff0:	4b04      	ldr	r3, [pc, #16]	@ (8002004 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	f003 0307 	and.w	r3, r3, #7
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	6039      	str	r1, [r7, #0]
 8002012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002018:	2b00      	cmp	r3, #0
 800201a:	db0a      	blt.n	8002032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	b2da      	uxtb	r2, r3
 8002020:	490c      	ldr	r1, [pc, #48]	@ (8002054 <__NVIC_SetPriority+0x4c>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	0112      	lsls	r2, r2, #4
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	440b      	add	r3, r1
 800202c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002030:	e00a      	b.n	8002048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4908      	ldr	r1, [pc, #32]	@ (8002058 <__NVIC_SetPriority+0x50>)
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	3b04      	subs	r3, #4
 8002040:	0112      	lsls	r2, r2, #4
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	440b      	add	r3, r1
 8002046:	761a      	strb	r2, [r3, #24]
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000e100 	.word	0xe000e100
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800205c:	b480      	push	{r7}
 800205e:	b089      	sub	sp, #36	@ 0x24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f1c3 0307 	rsb	r3, r3, #7
 8002076:	2b04      	cmp	r3, #4
 8002078:	bf28      	it	cs
 800207a:	2304      	movcs	r3, #4
 800207c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3304      	adds	r3, #4
 8002082:	2b06      	cmp	r3, #6
 8002084:	d902      	bls.n	800208c <NVIC_EncodePriority+0x30>
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3b03      	subs	r3, #3
 800208a:	e000      	b.n	800208e <NVIC_EncodePriority+0x32>
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43da      	mvns	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	401a      	ands	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	43d9      	mvns	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	4313      	orrs	r3, r2
         );
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3724      	adds	r7, #36	@ 0x24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020d4:	d301      	bcc.n	80020da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020d6:	2301      	movs	r3, #1
 80020d8:	e00f      	b.n	80020fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020da:	4a0a      	ldr	r2, [pc, #40]	@ (8002104 <SysTick_Config+0x40>)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3b01      	subs	r3, #1
 80020e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020e2:	210f      	movs	r1, #15
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020e8:	f7ff ff8e 	bl	8002008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020ec:	4b05      	ldr	r3, [pc, #20]	@ (8002104 <SysTick_Config+0x40>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020f2:	4b04      	ldr	r3, [pc, #16]	@ (8002104 <SysTick_Config+0x40>)
 80020f4:	2207      	movs	r2, #7
 80020f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	e000e010 	.word	0xe000e010

08002108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff ff47 	bl	8001fa4 <__NVIC_SetPriorityGrouping>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b086      	sub	sp, #24
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002130:	f7ff ff5c 	bl	8001fec <__NVIC_GetPriorityGrouping>
 8002134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	6978      	ldr	r0, [r7, #20]
 800213c:	f7ff ff8e 	bl	800205c <NVIC_EncodePriority>
 8002140:	4602      	mov	r2, r0
 8002142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff5d 	bl	8002008 <__NVIC_SetPriority>
}
 800214e:	bf00      	nop
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff ffb0 	bl	80020c4 <SysTick_Config>
 8002164:	4603      	mov	r3, r0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e014      	b.n	80021aa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	791b      	ldrb	r3, [r3, #4]
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d105      	bne.n	8002196 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7fe fbff 	bl	8000994 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2202      	movs	r2, #2
 800219a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b087      	sub	sp, #28
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	795b      	ldrb	r3, [r3, #5]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_DAC_ConfigChannel+0x20>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e036      	b.n	8002240 <HAL_DAC_ConfigChannel+0x8e>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2201      	movs	r2, #1
 80021d6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2202      	movs	r2, #2
 80021dc:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80021e6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4013      	ands	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	4313      	orrs	r3, r2
 8002210:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6819      	ldr	r1, [r3, #0]
 8002220:	22c0      	movs	r2, #192	@ 0xc0
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43da      	mvns	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	400a      	ands	r2, r1
 8002230:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2201      	movs	r2, #1
 8002236:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	371c      	adds	r7, #28
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800225a:	e154      	b.n	8002506 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	2101      	movs	r1, #1
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	fa01 f303 	lsl.w	r3, r1, r3
 8002268:	4013      	ands	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 8146 	beq.w	8002500 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b01      	cmp	r3, #1
 800227e:	d005      	beq.n	800228c <HAL_GPIO_Init+0x40>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d130      	bne.n	80022ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022c2:	2201      	movs	r2, #1
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4013      	ands	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	091b      	lsrs	r3, r3, #4
 80022d8:	f003 0201 	and.w	r2, r3, #1
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d017      	beq.n	800232a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	2203      	movs	r2, #3
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4013      	ands	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d123      	bne.n	800237e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	08da      	lsrs	r2, r3, #3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3208      	adds	r2, #8
 800233e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002342:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	220f      	movs	r2, #15
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	08da      	lsrs	r2, r3, #3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3208      	adds	r2, #8
 8002378:	6939      	ldr	r1, [r7, #16]
 800237a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	2203      	movs	r2, #3
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 0203 	and.w	r2, r3, #3
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 80a0 	beq.w	8002500 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c0:	4b58      	ldr	r3, [pc, #352]	@ (8002524 <HAL_GPIO_Init+0x2d8>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	4a57      	ldr	r2, [pc, #348]	@ (8002524 <HAL_GPIO_Init+0x2d8>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	6193      	str	r3, [r2, #24]
 80023cc:	4b55      	ldr	r3, [pc, #340]	@ (8002524 <HAL_GPIO_Init+0x2d8>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023d8:	4a53      	ldr	r2, [pc, #332]	@ (8002528 <HAL_GPIO_Init+0x2dc>)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	220f      	movs	r2, #15
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002402:	d019      	beq.n	8002438 <HAL_GPIO_Init+0x1ec>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a49      	ldr	r2, [pc, #292]	@ (800252c <HAL_GPIO_Init+0x2e0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d013      	beq.n	8002434 <HAL_GPIO_Init+0x1e8>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a48      	ldr	r2, [pc, #288]	@ (8002530 <HAL_GPIO_Init+0x2e4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d00d      	beq.n	8002430 <HAL_GPIO_Init+0x1e4>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a47      	ldr	r2, [pc, #284]	@ (8002534 <HAL_GPIO_Init+0x2e8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d007      	beq.n	800242c <HAL_GPIO_Init+0x1e0>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a46      	ldr	r2, [pc, #280]	@ (8002538 <HAL_GPIO_Init+0x2ec>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d101      	bne.n	8002428 <HAL_GPIO_Init+0x1dc>
 8002424:	2304      	movs	r3, #4
 8002426:	e008      	b.n	800243a <HAL_GPIO_Init+0x1ee>
 8002428:	2305      	movs	r3, #5
 800242a:	e006      	b.n	800243a <HAL_GPIO_Init+0x1ee>
 800242c:	2303      	movs	r3, #3
 800242e:	e004      	b.n	800243a <HAL_GPIO_Init+0x1ee>
 8002430:	2302      	movs	r3, #2
 8002432:	e002      	b.n	800243a <HAL_GPIO_Init+0x1ee>
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <HAL_GPIO_Init+0x1ee>
 8002438:	2300      	movs	r3, #0
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	f002 0203 	and.w	r2, r2, #3
 8002440:	0092      	lsls	r2, r2, #2
 8002442:	4093      	lsls	r3, r2
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800244a:	4937      	ldr	r1, [pc, #220]	@ (8002528 <HAL_GPIO_Init+0x2dc>)
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	089b      	lsrs	r3, r3, #2
 8002450:	3302      	adds	r3, #2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002458:	4b38      	ldr	r3, [pc, #224]	@ (800253c <HAL_GPIO_Init+0x2f0>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	43db      	mvns	r3, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800247c:	4a2f      	ldr	r2, [pc, #188]	@ (800253c <HAL_GPIO_Init+0x2f0>)
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002482:	4b2e      	ldr	r3, [pc, #184]	@ (800253c <HAL_GPIO_Init+0x2f0>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	43db      	mvns	r3, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024a6:	4a25      	ldr	r2, [pc, #148]	@ (800253c <HAL_GPIO_Init+0x2f0>)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ac:	4b23      	ldr	r3, [pc, #140]	@ (800253c <HAL_GPIO_Init+0x2f0>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024d0:	4a1a      	ldr	r2, [pc, #104]	@ (800253c <HAL_GPIO_Init+0x2f0>)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d6:	4b19      	ldr	r3, [pc, #100]	@ (800253c <HAL_GPIO_Init+0x2f0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	43db      	mvns	r3, r3
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024fa:	4a10      	ldr	r2, [pc, #64]	@ (800253c <HAL_GPIO_Init+0x2f0>)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	3301      	adds	r3, #1
 8002504:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	f47f aea3 	bne.w	800225c <HAL_GPIO_Init+0x10>
  }
}
 8002516:	bf00      	nop
 8002518:	bf00      	nop
 800251a:	371c      	adds	r7, #28
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	40021000 	.word	0x40021000
 8002528:	40010000 	.word	0x40010000
 800252c:	48000400 	.word	0x48000400
 8002530:	48000800 	.word	0x48000800
 8002534:	48000c00 	.word	0x48000c00
 8002538:	48001000 	.word	0x48001000
 800253c:	40010400 	.word	0x40010400

08002540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	807b      	strh	r3, [r7, #2]
 800254c:	4613      	mov	r3, r2
 800254e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002550:	787b      	ldrb	r3, [r7, #1]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002556:	887a      	ldrh	r2, [r7, #2]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800255c:	e002      	b.n	8002564 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800255e:	887a      	ldrh	r2, [r7, #2]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e0b9      	b.n	80026f6 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d106      	bne.n	800259c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff f908 	bl	80017ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2203      	movs	r2, #3
 80025a0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f002 fd8d 	bl	80050c8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ae:	2300      	movs	r3, #0
 80025b0:	73fb      	strb	r3, [r7, #15]
 80025b2:	e03e      	b.n	8002632 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025b4:	7bfa      	ldrb	r2, [r7, #15]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	440b      	add	r3, r1
 80025c2:	3311      	adds	r3, #17
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025c8:	7bfa      	ldrb	r2, [r7, #15]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	440b      	add	r3, r1
 80025d6:	3310      	adds	r3, #16
 80025d8:	7bfa      	ldrb	r2, [r7, #15]
 80025da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025dc:	7bfa      	ldrb	r2, [r7, #15]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	440b      	add	r3, r1
 80025ea:	3313      	adds	r3, #19
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025f0:	7bfa      	ldrb	r2, [r7, #15]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	440b      	add	r3, r1
 80025fe:	3320      	adds	r3, #32
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002604:	7bfa      	ldrb	r2, [r7, #15]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	440b      	add	r3, r1
 8002612:	3324      	adds	r3, #36	@ 0x24
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	440b      	add	r3, r1
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	3301      	adds	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	791b      	ldrb	r3, [r3, #4]
 8002636:	7bfa      	ldrb	r2, [r7, #15]
 8002638:	429a      	cmp	r2, r3
 800263a:	d3bb      	bcc.n	80025b4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800263c:	2300      	movs	r3, #0
 800263e:	73fb      	strb	r3, [r7, #15]
 8002640:	e044      	b.n	80026cc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002642:	7bfa      	ldrb	r2, [r7, #15]
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	440b      	add	r3, r1
 8002650:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002658:	7bfa      	ldrb	r2, [r7, #15]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	440b      	add	r3, r1
 8002666:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800266a:	7bfa      	ldrb	r2, [r7, #15]
 800266c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800266e:	7bfa      	ldrb	r2, [r7, #15]
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	440b      	add	r3, r1
 800267c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002684:	7bfa      	ldrb	r2, [r7, #15]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	440b      	add	r3, r1
 8002692:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800269a:	7bfa      	ldrb	r2, [r7, #15]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	440b      	add	r3, r1
 80026a8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026b0:	7bfa      	ldrb	r2, [r7, #15]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	440b      	add	r3, r1
 80026be:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	3301      	adds	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	791b      	ldrb	r3, [r3, #4]
 80026d0:	7bfa      	ldrb	r2, [r7, #15]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d3b5      	bcc.n	8002642 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3304      	adds	r3, #4
 80026de:	e893 0006 	ldmia.w	r3, {r1, r2}
 80026e2:	f002 fd0c 	bl	80050fe <USB_DevInit>

  hpcd->USB_Address = 0U;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002706:	af00      	add	r7, sp, #0
 8002708:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800270c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002710:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002712:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002716:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d102      	bne.n	8002726 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	f001 b823 	b.w	800376c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800272a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 817d 	beq.w	8002a36 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800273c:	4bbc      	ldr	r3, [pc, #752]	@ (8002a30 <HAL_RCC_OscConfig+0x330>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 030c 	and.w	r3, r3, #12
 8002744:	2b04      	cmp	r3, #4
 8002746:	d00c      	beq.n	8002762 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002748:	4bb9      	ldr	r3, [pc, #740]	@ (8002a30 <HAL_RCC_OscConfig+0x330>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 030c 	and.w	r3, r3, #12
 8002750:	2b08      	cmp	r3, #8
 8002752:	d15c      	bne.n	800280e <HAL_RCC_OscConfig+0x10e>
 8002754:	4bb6      	ldr	r3, [pc, #728]	@ (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800275c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002760:	d155      	bne.n	800280e <HAL_RCC_OscConfig+0x10e>
 8002762:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002766:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800276e:	fa93 f3a3 	rbit	r3, r3
 8002772:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002776:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277a:	fab3 f383 	clz	r3, r3
 800277e:	b2db      	uxtb	r3, r3
 8002780:	095b      	lsrs	r3, r3, #5
 8002782:	b2db      	uxtb	r3, r3
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b01      	cmp	r3, #1
 800278c:	d102      	bne.n	8002794 <HAL_RCC_OscConfig+0x94>
 800278e:	4ba8      	ldr	r3, [pc, #672]	@ (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	e015      	b.n	80027c0 <HAL_RCC_OscConfig+0xc0>
 8002794:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002798:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80027a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027ac:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80027b0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80027b4:	fa93 f3a3 	rbit	r3, r3
 80027b8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80027bc:	4b9c      	ldr	r3, [pc, #624]	@ (8002a30 <HAL_RCC_OscConfig+0x330>)
 80027be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027c4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80027c8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80027cc:	fa92 f2a2 	rbit	r2, r2
 80027d0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80027d4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80027d8:	fab2 f282 	clz	r2, r2
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	f042 0220 	orr.w	r2, r2, #32
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	f002 021f 	and.w	r2, r2, #31
 80027e8:	2101      	movs	r1, #1
 80027ea:	fa01 f202 	lsl.w	r2, r1, r2
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 811f 	beq.w	8002a34 <HAL_RCC_OscConfig+0x334>
 80027f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	f040 8116 	bne.w	8002a34 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	f000 bfaf 	b.w	800376c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800280e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002812:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800281e:	d106      	bne.n	800282e <HAL_RCC_OscConfig+0x12e>
 8002820:	4b83      	ldr	r3, [pc, #524]	@ (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a82      	ldr	r2, [pc, #520]	@ (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002826:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	e036      	b.n	800289c <HAL_RCC_OscConfig+0x19c>
 800282e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002832:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0x158>
 800283e:	4b7c      	ldr	r3, [pc, #496]	@ (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a7b      	ldr	r2, [pc, #492]	@ (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002844:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	4b79      	ldr	r3, [pc, #484]	@ (8002a30 <HAL_RCC_OscConfig+0x330>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a78      	ldr	r2, [pc, #480]	@ (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002850:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e021      	b.n	800289c <HAL_RCC_OscConfig+0x19c>
 8002858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002868:	d10c      	bne.n	8002884 <HAL_RCC_OscConfig+0x184>
 800286a:	4b71      	ldr	r3, [pc, #452]	@ (8002a30 <HAL_RCC_OscConfig+0x330>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a70      	ldr	r2, [pc, #448]	@ (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002870:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b6e      	ldr	r3, [pc, #440]	@ (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a6d      	ldr	r2, [pc, #436]	@ (8002a30 <HAL_RCC_OscConfig+0x330>)
 800287c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e00b      	b.n	800289c <HAL_RCC_OscConfig+0x19c>
 8002884:	4b6a      	ldr	r3, [pc, #424]	@ (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a69      	ldr	r2, [pc, #420]	@ (8002a30 <HAL_RCC_OscConfig+0x330>)
 800288a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	4b67      	ldr	r3, [pc, #412]	@ (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a66      	ldr	r2, [pc, #408]	@ (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002896:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800289a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800289c:	4b64      	ldr	r3, [pc, #400]	@ (8002a30 <HAL_RCC_OscConfig+0x330>)
 800289e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a0:	f023 020f 	bic.w	r2, r3, #15
 80028a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	495f      	ldr	r1, [pc, #380]	@ (8002a30 <HAL_RCC_OscConfig+0x330>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d059      	beq.n	800297a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c6:	f7ff f839 	bl	800193c <HAL_GetTick>
 80028ca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d0:	f7ff f834 	bl	800193c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b64      	cmp	r3, #100	@ 0x64
 80028de:	d902      	bls.n	80028e6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	f000 bf43 	b.w	800376c <HAL_RCC_OscConfig+0x106c>
 80028e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028ea:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80028fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fe:	fab3 f383 	clz	r3, r3
 8002902:	b2db      	uxtb	r3, r3
 8002904:	095b      	lsrs	r3, r3, #5
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b01      	cmp	r3, #1
 8002910:	d102      	bne.n	8002918 <HAL_RCC_OscConfig+0x218>
 8002912:	4b47      	ldr	r3, [pc, #284]	@ (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	e015      	b.n	8002944 <HAL_RCC_OscConfig+0x244>
 8002918:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800291c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002924:	fa93 f3a3 	rbit	r3, r3
 8002928:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800292c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002930:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002934:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002938:	fa93 f3a3 	rbit	r3, r3
 800293c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002940:	4b3b      	ldr	r3, [pc, #236]	@ (8002a30 <HAL_RCC_OscConfig+0x330>)
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002948:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800294c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002950:	fa92 f2a2 	rbit	r2, r2
 8002954:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002958:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800295c:	fab2 f282 	clz	r2, r2
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	f042 0220 	orr.w	r2, r2, #32
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	f002 021f 	and.w	r2, r2, #31
 800296c:	2101      	movs	r1, #1
 800296e:	fa01 f202 	lsl.w	r2, r1, r2
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0ab      	beq.n	80028d0 <HAL_RCC_OscConfig+0x1d0>
 8002978:	e05d      	b.n	8002a36 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297a:	f7fe ffdf 	bl	800193c <HAL_GetTick>
 800297e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002982:	e00a      	b.n	800299a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002984:	f7fe ffda 	bl	800193c <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b64      	cmp	r3, #100	@ 0x64
 8002992:	d902      	bls.n	800299a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	f000 bee9 	b.w	800376c <HAL_RCC_OscConfig+0x106c>
 800299a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800299e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80029ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	095b      	lsrs	r3, r3, #5
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d102      	bne.n	80029cc <HAL_RCC_OscConfig+0x2cc>
 80029c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a30 <HAL_RCC_OscConfig+0x330>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	e015      	b.n	80029f8 <HAL_RCC_OscConfig+0x2f8>
 80029cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029d0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80029e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029e4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80029e8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80029ec:	fa93 f3a3 	rbit	r3, r3
 80029f0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80029f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a30 <HAL_RCC_OscConfig+0x330>)
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80029fc:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002a00:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002a04:	fa92 f2a2 	rbit	r2, r2
 8002a08:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002a0c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002a10:	fab2 f282 	clz	r2, r2
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	f042 0220 	orr.w	r2, r2, #32
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	f002 021f 	and.w	r2, r2, #31
 8002a20:	2101      	movs	r1, #1
 8002a22:	fa01 f202 	lsl.w	r2, r1, r2
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1ab      	bne.n	8002984 <HAL_RCC_OscConfig+0x284>
 8002a2c:	e003      	b.n	8002a36 <HAL_RCC_OscConfig+0x336>
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 817d 	beq.w	8002d46 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a4c:	4ba6      	ldr	r3, [pc, #664]	@ (8002ce8 <HAL_RCC_OscConfig+0x5e8>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00b      	beq.n	8002a70 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a58:	4ba3      	ldr	r3, [pc, #652]	@ (8002ce8 <HAL_RCC_OscConfig+0x5e8>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d172      	bne.n	8002b4a <HAL_RCC_OscConfig+0x44a>
 8002a64:	4ba0      	ldr	r3, [pc, #640]	@ (8002ce8 <HAL_RCC_OscConfig+0x5e8>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d16c      	bne.n	8002b4a <HAL_RCC_OscConfig+0x44a>
 8002a70:	2302      	movs	r3, #2
 8002a72:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002a82:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a86:	fab3 f383 	clz	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	095b      	lsrs	r3, r3, #5
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d102      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x3a0>
 8002a9a:	4b93      	ldr	r3, [pc, #588]	@ (8002ce8 <HAL_RCC_OscConfig+0x5e8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	e013      	b.n	8002ac8 <HAL_RCC_OscConfig+0x3c8>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002ab8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002ac4:	4b88      	ldr	r3, [pc, #544]	@ (8002ce8 <HAL_RCC_OscConfig+0x5e8>)
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	2202      	movs	r2, #2
 8002aca:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002ace:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002ad2:	fa92 f2a2 	rbit	r2, r2
 8002ad6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002ada:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002ade:	fab2 f282 	clz	r2, r2
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	f042 0220 	orr.w	r2, r2, #32
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	f002 021f 	and.w	r2, r2, #31
 8002aee:	2101      	movs	r1, #1
 8002af0:	fa01 f202 	lsl.w	r2, r1, r2
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <HAL_RCC_OscConfig+0x410>
 8002afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d002      	beq.n	8002b10 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f000 be2e 	b.w	800376c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b10:	4b75      	ldr	r3, [pc, #468]	@ (8002ce8 <HAL_RCC_OscConfig+0x5e8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	21f8      	movs	r1, #248	@ 0xf8
 8002b26:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002b2e:	fa91 f1a1 	rbit	r1, r1
 8002b32:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002b36:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002b3a:	fab1 f181 	clz	r1, r1
 8002b3e:	b2c9      	uxtb	r1, r1
 8002b40:	408b      	lsls	r3, r1
 8002b42:	4969      	ldr	r1, [pc, #420]	@ (8002ce8 <HAL_RCC_OscConfig+0x5e8>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b48:	e0fd      	b.n	8002d46 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 8088 	beq.w	8002c6c <HAL_RCC_OscConfig+0x56c>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b62:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002b66:	fa93 f3a3 	rbit	r3, r3
 8002b6a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002b6e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b72:	fab3 f383 	clz	r3, r3
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b7c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	461a      	mov	r2, r3
 8002b84:	2301      	movs	r3, #1
 8002b86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7fe fed8 	bl	800193c <HAL_GetTick>
 8002b8c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b90:	e00a      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b92:	f7fe fed3 	bl	800193c <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d902      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	f000 bde2 	b.w	800376c <HAL_RCC_OscConfig+0x106c>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bae:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002bba:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	095b      	lsrs	r3, r3, #5
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d102      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x4d8>
 8002bd2:	4b45      	ldr	r3, [pc, #276]	@ (8002ce8 <HAL_RCC_OscConfig+0x5e8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	e013      	b.n	8002c00 <HAL_RCC_OscConfig+0x500>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002bea:	2302      	movs	r3, #2
 8002bec:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002bf0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002bf4:	fa93 f3a3 	rbit	r3, r3
 8002bf8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002bfc:	4b3a      	ldr	r3, [pc, #232]	@ (8002ce8 <HAL_RCC_OscConfig+0x5e8>)
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c00:	2202      	movs	r2, #2
 8002c02:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002c06:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002c0a:	fa92 f2a2 	rbit	r2, r2
 8002c0e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002c12:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002c16:	fab2 f282 	clz	r2, r2
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	f042 0220 	orr.w	r2, r2, #32
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	f002 021f 	and.w	r2, r2, #31
 8002c26:	2101      	movs	r1, #1
 8002c28:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0af      	beq.n	8002b92 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c32:	4b2d      	ldr	r3, [pc, #180]	@ (8002ce8 <HAL_RCC_OscConfig+0x5e8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	21f8      	movs	r1, #248	@ 0xf8
 8002c48:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002c50:	fa91 f1a1 	rbit	r1, r1
 8002c54:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002c58:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002c5c:	fab1 f181 	clz	r1, r1
 8002c60:	b2c9      	uxtb	r1, r1
 8002c62:	408b      	lsls	r3, r1
 8002c64:	4920      	ldr	r1, [pc, #128]	@ (8002ce8 <HAL_RCC_OscConfig+0x5e8>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	600b      	str	r3, [r1, #0]
 8002c6a:	e06c      	b.n	8002d46 <HAL_RCC_OscConfig+0x646>
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002c7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c8c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	461a      	mov	r2, r3
 8002c94:	2300      	movs	r3, #0
 8002c96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7fe fe50 	bl	800193c <HAL_GetTick>
 8002c9c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca0:	e00a      	b.n	8002cb8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ca2:	f7fe fe4b 	bl	800193c <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d902      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	f000 bd5a 	b.w	800376c <HAL_RCC_OscConfig+0x106c>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002cc2:	fa93 f3a3 	rbit	r3, r3
 8002cc6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d104      	bne.n	8002cec <HAL_RCC_OscConfig+0x5ec>
 8002ce2:	4b01      	ldr	r3, [pc, #4]	@ (8002ce8 <HAL_RCC_OscConfig+0x5e8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	e015      	b.n	8002d14 <HAL_RCC_OscConfig+0x614>
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	2302      	movs	r3, #2
 8002cee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002cfe:	2302      	movs	r3, #2
 8002d00:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002d04:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002d08:	fa93 f3a3 	rbit	r3, r3
 8002d0c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002d10:	4bc8      	ldr	r3, [pc, #800]	@ (8003034 <HAL_RCC_OscConfig+0x934>)
 8002d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d14:	2202      	movs	r2, #2
 8002d16:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002d1a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002d1e:	fa92 f2a2 	rbit	r2, r2
 8002d22:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002d26:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002d2a:	fab2 f282 	clz	r2, r2
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	f042 0220 	orr.w	r2, r2, #32
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	f002 021f 	and.w	r2, r2, #31
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1ad      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 8110 	beq.w	8002f7c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d079      	beq.n	8002e60 <HAL_RCC_OscConfig+0x760>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4bab      	ldr	r3, [pc, #684]	@ (8003038 <HAL_RCC_OscConfig+0x938>)
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	461a      	mov	r2, r3
 8002d92:	2301      	movs	r3, #1
 8002d94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d96:	f7fe fdd1 	bl	800193c <HAL_GetTick>
 8002d9a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9e:	e00a      	b.n	8002db6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002da0:	f7fe fdcc 	bl	800193c <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d902      	bls.n	8002db6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	f000 bcdb 	b.w	800376c <HAL_RCC_OscConfig+0x106c>
 8002db6:	2302      	movs	r3, #2
 8002db8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002dc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dcc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	fa93 f2a3 	rbit	r2, r3
 8002de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002df4:	2202      	movs	r2, #2
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	fa93 f2a3 	rbit	r2, r3
 8002e06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002e0e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e10:	4b88      	ldr	r3, [pc, #544]	@ (8003034 <HAL_RCC_OscConfig+0x934>)
 8002e12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e18:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002e1c:	2102      	movs	r1, #2
 8002e1e:	6019      	str	r1, [r3, #0]
 8002e20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e24:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	fa93 f1a3 	rbit	r1, r3
 8002e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e32:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e36:	6019      	str	r1, [r3, #0]
  return result;
 8002e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	f003 031f 	and.w	r3, r3, #31
 8002e52:	2101      	movs	r1, #1
 8002e54:	fa01 f303 	lsl.w	r3, r1, r3
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0a0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x6a0>
 8002e5e:	e08d      	b.n	8002f7c <HAL_RCC_OscConfig+0x87c>
 8002e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e64:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002e68:	2201      	movs	r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e70:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	fa93 f2a3 	rbit	r2, r3
 8002e7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002e82:	601a      	str	r2, [r3, #0]
  return result;
 8002e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e88:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002e8c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e8e:	fab3 f383 	clz	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b68      	ldr	r3, [pc, #416]	@ (8003038 <HAL_RCC_OscConfig+0x938>)
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea2:	f7fe fd4b 	bl	800193c <HAL_GetTick>
 8002ea6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eaa:	e00a      	b.n	8002ec2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eac:	f7fe fd46 	bl	800193c <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d902      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	f000 bc55 	b.w	800376c <HAL_RCC_OscConfig+0x106c>
 8002ec2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002eca:	2202      	movs	r2, #2
 8002ecc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	fa93 f2a3 	rbit	r2, r3
 8002edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002eee:	2202      	movs	r2, #2
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	fa93 f2a3 	rbit	r2, r3
 8002f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f0e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002f12:	2202      	movs	r2, #2
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	fa93 f2a3 	rbit	r2, r3
 8002f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f28:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002f2c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f2e:	4b41      	ldr	r3, [pc, #260]	@ (8003034 <HAL_RCC_OscConfig+0x934>)
 8002f30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f36:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002f3a:	2102      	movs	r1, #2
 8002f3c:	6019      	str	r1, [r3, #0]
 8002f3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f42:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	fa93 f1a3 	rbit	r1, r3
 8002f4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f50:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f54:	6019      	str	r1, [r3, #0]
  return result;
 8002f56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f5a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	fab3 f383 	clz	r3, r3
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	f003 031f 	and.w	r3, r3, #31
 8002f70:	2101      	movs	r1, #1
 8002f72:	fa01 f303 	lsl.w	r3, r1, r3
 8002f76:	4013      	ands	r3, r2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d197      	bne.n	8002eac <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 81a1 	beq.w	80032d4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f92:	2300      	movs	r3, #0
 8002f94:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f98:	4b26      	ldr	r3, [pc, #152]	@ (8003034 <HAL_RCC_OscConfig+0x934>)
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d116      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa4:	4b23      	ldr	r3, [pc, #140]	@ (8003034 <HAL_RCC_OscConfig+0x934>)
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	4a22      	ldr	r2, [pc, #136]	@ (8003034 <HAL_RCC_OscConfig+0x934>)
 8002faa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fae:	61d3      	str	r3, [r2, #28]
 8002fb0:	4b20      	ldr	r3, [pc, #128]	@ (8003034 <HAL_RCC_OscConfig+0x934>)
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fbc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002fca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800303c <HAL_RCC_OscConfig+0x93c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d11a      	bne.n	8003014 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fde:	4b17      	ldr	r3, [pc, #92]	@ (800303c <HAL_RCC_OscConfig+0x93c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a16      	ldr	r2, [pc, #88]	@ (800303c <HAL_RCC_OscConfig+0x93c>)
 8002fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fe8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fea:	f7fe fca7 	bl	800193c <HAL_GetTick>
 8002fee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff2:	e009      	b.n	8003008 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff4:	f7fe fca2 	bl	800193c <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b64      	cmp	r3, #100	@ 0x64
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e3b1      	b.n	800376c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003008:	4b0c      	ldr	r3, [pc, #48]	@ (800303c <HAL_RCC_OscConfig+0x93c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0ef      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003014:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003018:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d10d      	bne.n	8003040 <HAL_RCC_OscConfig+0x940>
 8003024:	4b03      	ldr	r3, [pc, #12]	@ (8003034 <HAL_RCC_OscConfig+0x934>)
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	4a02      	ldr	r2, [pc, #8]	@ (8003034 <HAL_RCC_OscConfig+0x934>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	6213      	str	r3, [r2, #32]
 8003030:	e03c      	b.n	80030ac <HAL_RCC_OscConfig+0x9ac>
 8003032:	bf00      	nop
 8003034:	40021000 	.word	0x40021000
 8003038:	10908120 	.word	0x10908120
 800303c:	40007000 	.word	0x40007000
 8003040:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003044:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10c      	bne.n	800306a <HAL_RCC_OscConfig+0x96a>
 8003050:	4bc1      	ldr	r3, [pc, #772]	@ (8003358 <HAL_RCC_OscConfig+0xc58>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	4ac0      	ldr	r2, [pc, #768]	@ (8003358 <HAL_RCC_OscConfig+0xc58>)
 8003056:	f023 0301 	bic.w	r3, r3, #1
 800305a:	6213      	str	r3, [r2, #32]
 800305c:	4bbe      	ldr	r3, [pc, #760]	@ (8003358 <HAL_RCC_OscConfig+0xc58>)
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	4abd      	ldr	r2, [pc, #756]	@ (8003358 <HAL_RCC_OscConfig+0xc58>)
 8003062:	f023 0304 	bic.w	r3, r3, #4
 8003066:	6213      	str	r3, [r2, #32]
 8003068:	e020      	b.n	80030ac <HAL_RCC_OscConfig+0x9ac>
 800306a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	2b05      	cmp	r3, #5
 8003078:	d10c      	bne.n	8003094 <HAL_RCC_OscConfig+0x994>
 800307a:	4bb7      	ldr	r3, [pc, #732]	@ (8003358 <HAL_RCC_OscConfig+0xc58>)
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	4ab6      	ldr	r2, [pc, #728]	@ (8003358 <HAL_RCC_OscConfig+0xc58>)
 8003080:	f043 0304 	orr.w	r3, r3, #4
 8003084:	6213      	str	r3, [r2, #32]
 8003086:	4bb4      	ldr	r3, [pc, #720]	@ (8003358 <HAL_RCC_OscConfig+0xc58>)
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	4ab3      	ldr	r2, [pc, #716]	@ (8003358 <HAL_RCC_OscConfig+0xc58>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	6213      	str	r3, [r2, #32]
 8003092:	e00b      	b.n	80030ac <HAL_RCC_OscConfig+0x9ac>
 8003094:	4bb0      	ldr	r3, [pc, #704]	@ (8003358 <HAL_RCC_OscConfig+0xc58>)
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	4aaf      	ldr	r2, [pc, #700]	@ (8003358 <HAL_RCC_OscConfig+0xc58>)
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	6213      	str	r3, [r2, #32]
 80030a0:	4bad      	ldr	r3, [pc, #692]	@ (8003358 <HAL_RCC_OscConfig+0xc58>)
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	4aac      	ldr	r2, [pc, #688]	@ (8003358 <HAL_RCC_OscConfig+0xc58>)
 80030a6:	f023 0304 	bic.w	r3, r3, #4
 80030aa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 8081 	beq.w	80031c0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030be:	f7fe fc3d 	bl	800193c <HAL_GetTick>
 80030c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c6:	e00b      	b.n	80030e0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c8:	f7fe fc38 	bl	800193c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d8:	4293      	cmp	r3, r2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e345      	b.n	800376c <HAL_RCC_OscConfig+0x106c>
 80030e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80030e8:	2202      	movs	r2, #2
 80030ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	fa93 f2a3 	rbit	r2, r3
 80030fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003108:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800310c:	2202      	movs	r2, #2
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003114:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	fa93 f2a3 	rbit	r2, r3
 800311e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003122:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003126:	601a      	str	r2, [r3, #0]
  return result;
 8003128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003130:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	095b      	lsrs	r3, r3, #5
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f043 0302 	orr.w	r3, r3, #2
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d102      	bne.n	800314c <HAL_RCC_OscConfig+0xa4c>
 8003146:	4b84      	ldr	r3, [pc, #528]	@ (8003358 <HAL_RCC_OscConfig+0xc58>)
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	e013      	b.n	8003174 <HAL_RCC_OscConfig+0xa74>
 800314c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003150:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003154:	2202      	movs	r2, #2
 8003156:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003158:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800315c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	fa93 f2a3 	rbit	r2, r3
 8003166:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	4b79      	ldr	r3, [pc, #484]	@ (8003358 <HAL_RCC_OscConfig+0xc58>)
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003178:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800317c:	2102      	movs	r1, #2
 800317e:	6011      	str	r1, [r2, #0]
 8003180:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003184:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003188:	6812      	ldr	r2, [r2, #0]
 800318a:	fa92 f1a2 	rbit	r1, r2
 800318e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003192:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003196:	6011      	str	r1, [r2, #0]
  return result;
 8003198:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800319c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80031a0:	6812      	ldr	r2, [r2, #0]
 80031a2:	fab2 f282 	clz	r2, r2
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	f002 021f 	and.w	r2, r2, #31
 80031b2:	2101      	movs	r1, #1
 80031b4:	fa01 f202 	lsl.w	r2, r1, r2
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d084      	beq.n	80030c8 <HAL_RCC_OscConfig+0x9c8>
 80031be:	e07f      	b.n	80032c0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c0:	f7fe fbbc 	bl	800193c <HAL_GetTick>
 80031c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c8:	e00b      	b.n	80031e2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ca:	f7fe fbb7 	bl	800193c <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e2c4      	b.n	800376c <HAL_RCC_OscConfig+0x106c>
 80031e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80031ea:	2202      	movs	r2, #2
 80031ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	fa93 f2a3 	rbit	r2, r3
 80031fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003200:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800320e:	2202      	movs	r2, #2
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003216:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	fa93 f2a3 	rbit	r2, r3
 8003220:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003224:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003228:	601a      	str	r2, [r3, #0]
  return result;
 800322a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800322e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003232:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003234:	fab3 f383 	clz	r3, r3
 8003238:	b2db      	uxtb	r3, r3
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	b2db      	uxtb	r3, r3
 800323e:	f043 0302 	orr.w	r3, r3, #2
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d102      	bne.n	800324e <HAL_RCC_OscConfig+0xb4e>
 8003248:	4b43      	ldr	r3, [pc, #268]	@ (8003358 <HAL_RCC_OscConfig+0xc58>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	e013      	b.n	8003276 <HAL_RCC_OscConfig+0xb76>
 800324e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003252:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003256:	2202      	movs	r2, #2
 8003258:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	fa93 f2a3 	rbit	r2, r3
 8003268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	4b39      	ldr	r3, [pc, #228]	@ (8003358 <HAL_RCC_OscConfig+0xc58>)
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800327a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800327e:	2102      	movs	r1, #2
 8003280:	6011      	str	r1, [r2, #0]
 8003282:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003286:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	fa92 f1a2 	rbit	r1, r2
 8003290:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003294:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003298:	6011      	str	r1, [r2, #0]
  return result;
 800329a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800329e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	fab2 f282 	clz	r2, r2
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	f002 021f 	and.w	r2, r2, #31
 80032b4:	2101      	movs	r1, #1
 80032b6:	fa01 f202 	lsl.w	r2, r1, r2
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d184      	bne.n	80031ca <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032c0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d105      	bne.n	80032d4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c8:	4b23      	ldr	r3, [pc, #140]	@ (8003358 <HAL_RCC_OscConfig+0xc58>)
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	4a22      	ldr	r2, [pc, #136]	@ (8003358 <HAL_RCC_OscConfig+0xc58>)
 80032ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032d2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 8242 	beq.w	800376a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003358 <HAL_RCC_OscConfig+0xc58>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	f000 8213 	beq.w	800371a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	2b02      	cmp	r3, #2
 8003302:	f040 8162 	bne.w	80035ca <HAL_RCC_OscConfig+0xeca>
 8003306:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800330e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003312:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003318:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	fa93 f2a3 	rbit	r2, r3
 8003322:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003326:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800332a:	601a      	str	r2, [r3, #0]
  return result;
 800332c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003330:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003334:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003336:	fab3 f383 	clz	r3, r3
 800333a:	b2db      	uxtb	r3, r3
 800333c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003340:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	461a      	mov	r2, r3
 8003348:	2300      	movs	r3, #0
 800334a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334c:	f7fe faf6 	bl	800193c <HAL_GetTick>
 8003350:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003354:	e00c      	b.n	8003370 <HAL_RCC_OscConfig+0xc70>
 8003356:	bf00      	nop
 8003358:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800335c:	f7fe faee 	bl	800193c <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e1fd      	b.n	800376c <HAL_RCC_OscConfig+0x106c>
 8003370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003374:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003378:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800337c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003382:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	fa93 f2a3 	rbit	r2, r3
 800338c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003390:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003394:	601a      	str	r2, [r3, #0]
  return result;
 8003396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800339a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800339e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a0:	fab3 f383 	clz	r3, r3
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f043 0301 	orr.w	r3, r3, #1
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d102      	bne.n	80033ba <HAL_RCC_OscConfig+0xcba>
 80033b4:	4bb0      	ldr	r3, [pc, #704]	@ (8003678 <HAL_RCC_OscConfig+0xf78>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	e027      	b.n	800340a <HAL_RCC_OscConfig+0xd0a>
 80033ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033be:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80033c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033cc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	fa93 f2a3 	rbit	r2, r3
 80033d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033da:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80033e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	fa93 f2a3 	rbit	r2, r3
 80033fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003400:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	4b9c      	ldr	r3, [pc, #624]	@ (8003678 <HAL_RCC_OscConfig+0xf78>)
 8003408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800340e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003412:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003416:	6011      	str	r1, [r2, #0]
 8003418:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800341c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003420:	6812      	ldr	r2, [r2, #0]
 8003422:	fa92 f1a2 	rbit	r1, r2
 8003426:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800342a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800342e:	6011      	str	r1, [r2, #0]
  return result;
 8003430:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003434:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	fab2 f282 	clz	r2, r2
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	f042 0220 	orr.w	r2, r2, #32
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	f002 021f 	and.w	r2, r2, #31
 800344a:	2101      	movs	r1, #1
 800344c:	fa01 f202 	lsl.w	r2, r1, r2
 8003450:	4013      	ands	r3, r2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d182      	bne.n	800335c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003456:	4b88      	ldr	r3, [pc, #544]	@ (8003678 <HAL_RCC_OscConfig+0xf78>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800345e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003462:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800346a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800346e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	430b      	orrs	r3, r1
 8003478:	497f      	ldr	r1, [pc, #508]	@ (8003678 <HAL_RCC_OscConfig+0xf78>)
 800347a:	4313      	orrs	r3, r2
 800347c:	604b      	str	r3, [r1, #4]
 800347e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003482:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003486:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800348a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003490:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	fa93 f2a3 	rbit	r2, r3
 800349a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800349e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80034a2:	601a      	str	r2, [r3, #0]
  return result;
 80034a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80034ac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ae:	fab3 f383 	clz	r3, r3
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80034b8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	461a      	mov	r2, r3
 80034c0:	2301      	movs	r3, #1
 80034c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7fe fa3a 	bl	800193c <HAL_GetTick>
 80034c8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034cc:	e009      	b.n	80034e2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ce:	f7fe fa35 	bl	800193c <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e144      	b.n	800376c <HAL_RCC_OscConfig+0x106c>
 80034e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80034ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	fa93 f2a3 	rbit	r2, r3
 80034fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003502:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003506:	601a      	str	r2, [r3, #0]
  return result;
 8003508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800350c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003510:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003512:	fab3 f383 	clz	r3, r3
 8003516:	b2db      	uxtb	r3, r3
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b01      	cmp	r3, #1
 8003524:	d102      	bne.n	800352c <HAL_RCC_OscConfig+0xe2c>
 8003526:	4b54      	ldr	r3, [pc, #336]	@ (8003678 <HAL_RCC_OscConfig+0xf78>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	e027      	b.n	800357c <HAL_RCC_OscConfig+0xe7c>
 800352c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003530:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003534:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003538:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800353e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	fa93 f2a3 	rbit	r2, r3
 8003548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800354c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003556:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800355a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003564:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	fa93 f2a3 	rbit	r2, r3
 800356e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003572:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	4b3f      	ldr	r3, [pc, #252]	@ (8003678 <HAL_RCC_OscConfig+0xf78>)
 800357a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003580:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003584:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003588:	6011      	str	r1, [r2, #0]
 800358a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800358e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	fa92 f1a2 	rbit	r1, r2
 8003598:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800359c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80035a0:	6011      	str	r1, [r2, #0]
  return result;
 80035a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035a6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80035aa:	6812      	ldr	r2, [r2, #0]
 80035ac:	fab2 f282 	clz	r2, r2
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	f042 0220 	orr.w	r2, r2, #32
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	f002 021f 	and.w	r2, r2, #31
 80035bc:	2101      	movs	r1, #1
 80035be:	fa01 f202 	lsl.w	r2, r1, r2
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d082      	beq.n	80034ce <HAL_RCC_OscConfig+0xdce>
 80035c8:	e0cf      	b.n	800376a <HAL_RCC_OscConfig+0x106a>
 80035ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ce:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80035d2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035dc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	fa93 f2a3 	rbit	r2, r3
 80035e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ea:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80035ee:	601a      	str	r2, [r3, #0]
  return result;
 80035f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80035f8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003604:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	461a      	mov	r2, r3
 800360c:	2300      	movs	r3, #0
 800360e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7fe f994 	bl	800193c <HAL_GetTick>
 8003614:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003618:	e009      	b.n	800362e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800361a:	f7fe f98f 	bl	800193c <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e09e      	b.n	800376c <HAL_RCC_OscConfig+0x106c>
 800362e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003632:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003636:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800363a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003640:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	fa93 f2a3 	rbit	r2, r3
 800364a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800364e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003652:	601a      	str	r2, [r3, #0]
  return result;
 8003654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003658:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800365c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800365e:	fab3 f383 	clz	r3, r3
 8003662:	b2db      	uxtb	r3, r3
 8003664:	095b      	lsrs	r3, r3, #5
 8003666:	b2db      	uxtb	r3, r3
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b01      	cmp	r3, #1
 8003670:	d104      	bne.n	800367c <HAL_RCC_OscConfig+0xf7c>
 8003672:	4b01      	ldr	r3, [pc, #4]	@ (8003678 <HAL_RCC_OscConfig+0xf78>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	e029      	b.n	80036cc <HAL_RCC_OscConfig+0xfcc>
 8003678:	40021000 	.word	0x40021000
 800367c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003680:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003684:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003688:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800368e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	fa93 f2a3 	rbit	r2, r3
 8003698:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800369c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80036aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	fa93 f2a3 	rbit	r2, r3
 80036be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003778 <HAL_RCC_OscConfig+0x1078>)
 80036ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036d0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80036d4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80036d8:	6011      	str	r1, [r2, #0]
 80036da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036de:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	fa92 f1a2 	rbit	r1, r2
 80036e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036ec:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80036f0:	6011      	str	r1, [r2, #0]
  return result;
 80036f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036f6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	fab2 f282 	clz	r2, r2
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	f042 0220 	orr.w	r2, r2, #32
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	f002 021f 	and.w	r2, r2, #31
 800370c:	2101      	movs	r1, #1
 800370e:	fa01 f202 	lsl.w	r2, r1, r2
 8003712:	4013      	ands	r3, r2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d180      	bne.n	800361a <HAL_RCC_OscConfig+0xf1a>
 8003718:	e027      	b.n	800376a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800371a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800371e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e01e      	b.n	800376c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800372e:	4b12      	ldr	r3, [pc, #72]	@ (8003778 <HAL_RCC_OscConfig+0x1078>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003736:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800373a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800373e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003742:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	429a      	cmp	r2, r3
 800374c:	d10b      	bne.n	8003766 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800374e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003752:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800375a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003762:	429a      	cmp	r2, r3
 8003764:	d001      	beq.n	800376a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40021000 	.word	0x40021000

0800377c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b09e      	sub	sp, #120	@ 0x78
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003786:	2300      	movs	r3, #0
 8003788:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e162      	b.n	8003a5a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003794:	4b90      	ldr	r3, [pc, #576]	@ (80039d8 <HAL_RCC_ClockConfig+0x25c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d910      	bls.n	80037c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a2:	4b8d      	ldr	r3, [pc, #564]	@ (80039d8 <HAL_RCC_ClockConfig+0x25c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 0207 	bic.w	r2, r3, #7
 80037aa:	498b      	ldr	r1, [pc, #556]	@ (80039d8 <HAL_RCC_ClockConfig+0x25c>)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b2:	4b89      	ldr	r3, [pc, #548]	@ (80039d8 <HAL_RCC_ClockConfig+0x25c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e14a      	b.n	8003a5a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d0:	4b82      	ldr	r3, [pc, #520]	@ (80039dc <HAL_RCC_ClockConfig+0x260>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	497f      	ldr	r1, [pc, #508]	@ (80039dc <HAL_RCC_ClockConfig+0x260>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 80dc 	beq.w	80039a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d13c      	bne.n	8003872 <HAL_RCC_ClockConfig+0xf6>
 80037f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037fc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003800:	fa93 f3a3 	rbit	r3, r3
 8003804:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003806:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003808:	fab3 f383 	clz	r3, r3
 800380c:	b2db      	uxtb	r3, r3
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	d102      	bne.n	8003822 <HAL_RCC_ClockConfig+0xa6>
 800381c:	4b6f      	ldr	r3, [pc, #444]	@ (80039dc <HAL_RCC_ClockConfig+0x260>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	e00f      	b.n	8003842 <HAL_RCC_ClockConfig+0xc6>
 8003822:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003826:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800382a:	fa93 f3a3 	rbit	r3, r3
 800382e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003830:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003834:	663b      	str	r3, [r7, #96]	@ 0x60
 8003836:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003838:	fa93 f3a3 	rbit	r3, r3
 800383c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800383e:	4b67      	ldr	r3, [pc, #412]	@ (80039dc <HAL_RCC_ClockConfig+0x260>)
 8003840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003842:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003846:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003848:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800384a:	fa92 f2a2 	rbit	r2, r2
 800384e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003850:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003852:	fab2 f282 	clz	r2, r2
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	f042 0220 	orr.w	r2, r2, #32
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	f002 021f 	and.w	r2, r2, #31
 8003862:	2101      	movs	r1, #1
 8003864:	fa01 f202 	lsl.w	r2, r1, r2
 8003868:	4013      	ands	r3, r2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d17b      	bne.n	8003966 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e0f3      	b.n	8003a5a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d13c      	bne.n	80038f4 <HAL_RCC_ClockConfig+0x178>
 800387a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800387e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003880:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003882:	fa93 f3a3 	rbit	r3, r3
 8003886:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003888:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388a:	fab3 f383 	clz	r3, r3
 800388e:	b2db      	uxtb	r3, r3
 8003890:	095b      	lsrs	r3, r3, #5
 8003892:	b2db      	uxtb	r3, r3
 8003894:	f043 0301 	orr.w	r3, r3, #1
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b01      	cmp	r3, #1
 800389c:	d102      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x128>
 800389e:	4b4f      	ldr	r3, [pc, #316]	@ (80039dc <HAL_RCC_ClockConfig+0x260>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	e00f      	b.n	80038c4 <HAL_RCC_ClockConfig+0x148>
 80038a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038ac:	fa93 f3a3 	rbit	r3, r3
 80038b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80038b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80038b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038ba:	fa93 f3a3 	rbit	r3, r3
 80038be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038c0:	4b46      	ldr	r3, [pc, #280]	@ (80039dc <HAL_RCC_ClockConfig+0x260>)
 80038c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038c8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80038ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80038cc:	fa92 f2a2 	rbit	r2, r2
 80038d0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80038d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038d4:	fab2 f282 	clz	r2, r2
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	f042 0220 	orr.w	r2, r2, #32
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	f002 021f 	and.w	r2, r2, #31
 80038e4:	2101      	movs	r1, #1
 80038e6:	fa01 f202 	lsl.w	r2, r1, r2
 80038ea:	4013      	ands	r3, r2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d13a      	bne.n	8003966 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0b2      	b.n	8003a5a <HAL_RCC_ClockConfig+0x2de>
 80038f4:	2302      	movs	r3, #2
 80038f6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fa:	fa93 f3a3 	rbit	r3, r3
 80038fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003902:	fab3 f383 	clz	r3, r3
 8003906:	b2db      	uxtb	r3, r3
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	b2db      	uxtb	r3, r3
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b01      	cmp	r3, #1
 8003914:	d102      	bne.n	800391c <HAL_RCC_ClockConfig+0x1a0>
 8003916:	4b31      	ldr	r3, [pc, #196]	@ (80039dc <HAL_RCC_ClockConfig+0x260>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	e00d      	b.n	8003938 <HAL_RCC_ClockConfig+0x1bc>
 800391c:	2302      	movs	r3, #2
 800391e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003922:	fa93 f3a3 	rbit	r3, r3
 8003926:	627b      	str	r3, [r7, #36]	@ 0x24
 8003928:	2302      	movs	r3, #2
 800392a:	623b      	str	r3, [r7, #32]
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	fa93 f3a3 	rbit	r3, r3
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	4b29      	ldr	r3, [pc, #164]	@ (80039dc <HAL_RCC_ClockConfig+0x260>)
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003938:	2202      	movs	r2, #2
 800393a:	61ba      	str	r2, [r7, #24]
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	fa92 f2a2 	rbit	r2, r2
 8003942:	617a      	str	r2, [r7, #20]
  return result;
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	fab2 f282 	clz	r2, r2
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	f042 0220 	orr.w	r2, r2, #32
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	f002 021f 	and.w	r2, r2, #31
 8003956:	2101      	movs	r1, #1
 8003958:	fa01 f202 	lsl.w	r2, r1, r2
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e079      	b.n	8003a5a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003966:	4b1d      	ldr	r3, [pc, #116]	@ (80039dc <HAL_RCC_ClockConfig+0x260>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f023 0203 	bic.w	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	491a      	ldr	r1, [pc, #104]	@ (80039dc <HAL_RCC_ClockConfig+0x260>)
 8003974:	4313      	orrs	r3, r2
 8003976:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003978:	f7fd ffe0 	bl	800193c <HAL_GetTick>
 800397c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397e:	e00a      	b.n	8003996 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003980:	f7fd ffdc 	bl	800193c <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800398e:	4293      	cmp	r3, r2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e061      	b.n	8003a5a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003996:	4b11      	ldr	r3, [pc, #68]	@ (80039dc <HAL_RCC_ClockConfig+0x260>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f003 020c 	and.w	r2, r3, #12
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d1eb      	bne.n	8003980 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039a8:	4b0b      	ldr	r3, [pc, #44]	@ (80039d8 <HAL_RCC_ClockConfig+0x25c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d214      	bcs.n	80039e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b6:	4b08      	ldr	r3, [pc, #32]	@ (80039d8 <HAL_RCC_ClockConfig+0x25c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 0207 	bic.w	r2, r3, #7
 80039be:	4906      	ldr	r1, [pc, #24]	@ (80039d8 <HAL_RCC_ClockConfig+0x25c>)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c6:	4b04      	ldr	r3, [pc, #16]	@ (80039d8 <HAL_RCC_ClockConfig+0x25c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d005      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e040      	b.n	8003a5a <HAL_RCC_ClockConfig+0x2de>
 80039d8:	40022000 	.word	0x40022000
 80039dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003a64 <HAL_RCC_ClockConfig+0x2e8>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	491a      	ldr	r1, [pc, #104]	@ (8003a64 <HAL_RCC_ClockConfig+0x2e8>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d009      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a0a:	4b16      	ldr	r3, [pc, #88]	@ (8003a64 <HAL_RCC_ClockConfig+0x2e8>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4912      	ldr	r1, [pc, #72]	@ (8003a64 <HAL_RCC_ClockConfig+0x2e8>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a1e:	f000 f829 	bl	8003a74 <HAL_RCC_GetSysClockFreq>
 8003a22:	4601      	mov	r1, r0
 8003a24:	4b0f      	ldr	r3, [pc, #60]	@ (8003a64 <HAL_RCC_ClockConfig+0x2e8>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a2c:	22f0      	movs	r2, #240	@ 0xf0
 8003a2e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	fa92 f2a2 	rbit	r2, r2
 8003a36:	60fa      	str	r2, [r7, #12]
  return result;
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	fab2 f282 	clz	r2, r2
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	40d3      	lsrs	r3, r2
 8003a42:	4a09      	ldr	r2, [pc, #36]	@ (8003a68 <HAL_RCC_ClockConfig+0x2ec>)
 8003a44:	5cd3      	ldrb	r3, [r2, r3]
 8003a46:	fa21 f303 	lsr.w	r3, r1, r3
 8003a4a:	4a08      	ldr	r2, [pc, #32]	@ (8003a6c <HAL_RCC_ClockConfig+0x2f0>)
 8003a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a4e:	4b08      	ldr	r3, [pc, #32]	@ (8003a70 <HAL_RCC_ClockConfig+0x2f4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fd ff2e 	bl	80018b4 <HAL_InitTick>
  
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3778      	adds	r7, #120	@ 0x78
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40021000 	.word	0x40021000
 8003a68:	080051ac 	.word	0x080051ac
 8003a6c:	20000000 	.word	0x20000000
 8003a70:	20000004 	.word	0x20000004

08003a74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	2300      	movs	r3, #0
 8003a88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f003 030c 	and.w	r3, r3, #12
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d002      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x30>
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d003      	beq.n	8003aaa <HAL_RCC_GetSysClockFreq+0x36>
 8003aa2:	e026      	b.n	8003af2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003aa4:	4b19      	ldr	r3, [pc, #100]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x98>)
 8003aa6:	613b      	str	r3, [r7, #16]
      break;
 8003aa8:	e026      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	0c9b      	lsrs	r3, r3, #18
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	4a17      	ldr	r2, [pc, #92]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ab4:	5cd3      	ldrb	r3, [r2, r3]
 8003ab6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003ab8:	4b13      	ldr	r3, [pc, #76]	@ (8003b08 <HAL_RCC_GetSysClockFreq+0x94>)
 8003aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003abc:	f003 030f 	and.w	r3, r3, #15
 8003ac0:	4a14      	ldr	r2, [pc, #80]	@ (8003b14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ac2:	5cd3      	ldrb	r3, [r2, r3]
 8003ac4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d008      	beq.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ad0:	4a0e      	ldr	r2, [pc, #56]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x98>)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	fb02 f303 	mul.w	r3, r2, r3
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	e004      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8003b18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ae6:	fb02 f303 	mul.w	r3, r2, r3
 8003aea:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	613b      	str	r3, [r7, #16]
      break;
 8003af0:	e002      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003af2:	4b06      	ldr	r3, [pc, #24]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x98>)
 8003af4:	613b      	str	r3, [r7, #16]
      break;
 8003af6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003af8:	693b      	ldr	r3, [r7, #16]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	371c      	adds	r7, #28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	007a1200 	.word	0x007a1200
 8003b10:	080051bc 	.word	0x080051bc
 8003b14:	080051cc 	.word	0x080051cc
 8003b18:	003d0900 	.word	0x003d0900

08003b1c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b092      	sub	sp, #72	@ 0x48
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 80d4 	beq.w	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b40:	4b4e      	ldr	r3, [pc, #312]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10e      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b4c:	4b4b      	ldr	r3, [pc, #300]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	4a4a      	ldr	r2, [pc, #296]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b56:	61d3      	str	r3, [r2, #28]
 8003b58:	4b48      	ldr	r3, [pc, #288]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b64:	2301      	movs	r3, #1
 8003b66:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6a:	4b45      	ldr	r3, [pc, #276]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d118      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b76:	4b42      	ldr	r3, [pc, #264]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a41      	ldr	r2, [pc, #260]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b80:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b82:	f7fd fedb 	bl	800193c <HAL_GetTick>
 8003b86:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b88:	e008      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b8a:	f7fd fed7 	bl	800193c <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b64      	cmp	r3, #100	@ 0x64
 8003b96:	d901      	bls.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e12d      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9c:	4b38      	ldr	r3, [pc, #224]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0f0      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ba8:	4b34      	ldr	r3, [pc, #208]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 8084 	beq.w	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bc2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d07c      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bd2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003bd6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bda:	fa93 f3a3 	rbit	r3, r3
 8003bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003be2:	fab3 f383 	clz	r3, r3
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	461a      	mov	r2, r3
 8003bea:	4b26      	ldr	r3, [pc, #152]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bec:	4413      	add	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bfe:	fa93 f3a3 	rbit	r3, r3
 8003c02:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c06:	fab3 f383 	clz	r3, r3
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	461a      	mov	r2, r3
 8003c16:	2300      	movs	r3, #0
 8003c18:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c1a:	4a18      	ldr	r2, [pc, #96]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c1e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d04b      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2a:	f7fd fe87 	bl	800193c <HAL_GetTick>
 8003c2e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c30:	e00a      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c32:	f7fd fe83 	bl	800193c <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e0d7      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c4e:	fa93 f3a3 	rbit	r3, r3
 8003c52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c54:	2302      	movs	r3, #2
 8003c56:	623b      	str	r3, [r7, #32]
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	fa93 f3a3 	rbit	r3, r3
 8003c5e:	61fb      	str	r3, [r7, #28]
  return result;
 8003c60:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c62:	fab3 f383 	clz	r3, r3
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	095b      	lsrs	r3, r3, #5
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	f043 0302 	orr.w	r3, r3, #2
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d108      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003c76:	4b01      	ldr	r3, [pc, #4]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	e00d      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	40007000 	.word	0x40007000
 8003c84:	10908100 	.word	0x10908100
 8003c88:	2302      	movs	r3, #2
 8003c8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	fa93 f3a3 	rbit	r3, r3
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	4b5a      	ldr	r3, [pc, #360]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c98:	2202      	movs	r2, #2
 8003c9a:	613a      	str	r2, [r7, #16]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	fa92 f2a2 	rbit	r2, r2
 8003ca2:	60fa      	str	r2, [r7, #12]
  return result;
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	fab2 f282 	clz	r2, r2
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	f002 021f 	and.w	r2, r2, #31
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0b7      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003cc2:	4b4f      	ldr	r3, [pc, #316]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	494c      	ldr	r1, [pc, #304]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cd4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d105      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cdc:	4b48      	ldr	r3, [pc, #288]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	4a47      	ldr	r2, [pc, #284]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ce2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ce6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cf4:	4b42      	ldr	r3, [pc, #264]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf8:	f023 0203 	bic.w	r2, r3, #3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	493f      	ldr	r1, [pc, #252]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d008      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d12:	4b3b      	ldr	r3, [pc, #236]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d16:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	4938      	ldr	r1, [pc, #224]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d008      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d30:	4b33      	ldr	r3, [pc, #204]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d34:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	4930      	ldr	r1, [pc, #192]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d008      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d52:	f023 0210 	bic.w	r2, r3, #16
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	4929      	ldr	r1, [pc, #164]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003d6c:	4b24      	ldr	r3, [pc, #144]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d78:	4921      	ldr	r1, [pc, #132]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d008      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8e:	f023 0220 	bic.w	r2, r3, #32
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	491a      	ldr	r1, [pc, #104]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d008      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003da8:	4b15      	ldr	r3, [pc, #84]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	4912      	ldr	r1, [pc, #72]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d008      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8003dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	490b      	ldr	r1, [pc, #44]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003de4:	4b06      	ldr	r3, [pc, #24]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	4903      	ldr	r1, [pc, #12]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3748      	adds	r7, #72	@ 0x48
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40021000 	.word	0x40021000

08003e04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e041      	b.n	8003e9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d106      	bne.n	8003e30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7fd fb52 	bl	80014d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	4619      	mov	r1, r3
 8003e42:	4610      	mov	r0, r2
 8003e44:	f000 fce8 	bl	8004818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e041      	b.n	8003f38 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d106      	bne.n	8003ece <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f839 	bl	8003f40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3304      	adds	r3, #4
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	f000 fc99 	bl	8004818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d109      	bne.n	8003f78 <HAL_TIM_PWM_Start+0x24>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	bf14      	ite	ne
 8003f70:	2301      	movne	r3, #1
 8003f72:	2300      	moveq	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	e022      	b.n	8003fbe <HAL_TIM_PWM_Start+0x6a>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d109      	bne.n	8003f92 <HAL_TIM_PWM_Start+0x3e>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	bf14      	ite	ne
 8003f8a:	2301      	movne	r3, #1
 8003f8c:	2300      	moveq	r3, #0
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	e015      	b.n	8003fbe <HAL_TIM_PWM_Start+0x6a>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d109      	bne.n	8003fac <HAL_TIM_PWM_Start+0x58>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	bf14      	ite	ne
 8003fa4:	2301      	movne	r3, #1
 8003fa6:	2300      	moveq	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	e008      	b.n	8003fbe <HAL_TIM_PWM_Start+0x6a>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	bf14      	ite	ne
 8003fb8:	2301      	movne	r3, #1
 8003fba:	2300      	moveq	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e07c      	b.n	80040c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d104      	bne.n	8003fd6 <HAL_TIM_PWM_Start+0x82>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fd4:	e013      	b.n	8003ffe <HAL_TIM_PWM_Start+0xaa>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d104      	bne.n	8003fe6 <HAL_TIM_PWM_Start+0x92>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fe4:	e00b      	b.n	8003ffe <HAL_TIM_PWM_Start+0xaa>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d104      	bne.n	8003ff6 <HAL_TIM_PWM_Start+0xa2>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ff4:	e003      	b.n	8003ffe <HAL_TIM_PWM_Start+0xaa>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2201      	movs	r2, #1
 8004004:	6839      	ldr	r1, [r7, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f000 ffc4 	bl	8004f94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a2d      	ldr	r2, [pc, #180]	@ (80040c8 <HAL_TIM_PWM_Start+0x174>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d009      	beq.n	800402a <HAL_TIM_PWM_Start+0xd6>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a2c      	ldr	r2, [pc, #176]	@ (80040cc <HAL_TIM_PWM_Start+0x178>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d004      	beq.n	800402a <HAL_TIM_PWM_Start+0xd6>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a2a      	ldr	r2, [pc, #168]	@ (80040d0 <HAL_TIM_PWM_Start+0x17c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d101      	bne.n	800402e <HAL_TIM_PWM_Start+0xda>
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <HAL_TIM_PWM_Start+0xdc>
 800402e:	2300      	movs	r3, #0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <HAL_TIM_PWM_Start+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004042:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800404c:	d01d      	beq.n	800408a <HAL_TIM_PWM_Start+0x136>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a20      	ldr	r2, [pc, #128]	@ (80040d4 <HAL_TIM_PWM_Start+0x180>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d018      	beq.n	800408a <HAL_TIM_PWM_Start+0x136>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a1e      	ldr	r2, [pc, #120]	@ (80040d8 <HAL_TIM_PWM_Start+0x184>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d013      	beq.n	800408a <HAL_TIM_PWM_Start+0x136>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a1d      	ldr	r2, [pc, #116]	@ (80040dc <HAL_TIM_PWM_Start+0x188>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d00e      	beq.n	800408a <HAL_TIM_PWM_Start+0x136>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a1b      	ldr	r2, [pc, #108]	@ (80040e0 <HAL_TIM_PWM_Start+0x18c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d009      	beq.n	800408a <HAL_TIM_PWM_Start+0x136>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a13      	ldr	r2, [pc, #76]	@ (80040c8 <HAL_TIM_PWM_Start+0x174>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d004      	beq.n	800408a <HAL_TIM_PWM_Start+0x136>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a17      	ldr	r2, [pc, #92]	@ (80040e4 <HAL_TIM_PWM_Start+0x190>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d111      	bne.n	80040ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2b06      	cmp	r3, #6
 800409a:	d010      	beq.n	80040be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ac:	e007      	b.n	80040be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 0201 	orr.w	r2, r2, #1
 80040bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40014000 	.word	0x40014000
 80040cc:	40014400 	.word	0x40014400
 80040d0:	40014800 	.word	0x40014800
 80040d4:	40000400 	.word	0x40000400
 80040d8:	40000800 	.word	0x40000800
 80040dc:	40000c00 	.word	0x40000c00
 80040e0:	40001800 	.word	0x40001800
 80040e4:	40015c00 	.word	0x40015c00

080040e8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e041      	b.n	800417e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fd fa7c 	bl	800160c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3304      	adds	r3, #4
 8004124:	4619      	mov	r1, r3
 8004126:	4610      	mov	r0, r2
 8004128:	f000 fb76 	bl	8004818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
	...

08004188 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d104      	bne.n	80041a6 <HAL_TIM_IC_Start_IT+0x1e>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	e013      	b.n	80041ce <HAL_TIM_IC_Start_IT+0x46>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d104      	bne.n	80041b6 <HAL_TIM_IC_Start_IT+0x2e>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	e00b      	b.n	80041ce <HAL_TIM_IC_Start_IT+0x46>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d104      	bne.n	80041c6 <HAL_TIM_IC_Start_IT+0x3e>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	e003      	b.n	80041ce <HAL_TIM_IC_Start_IT+0x46>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d104      	bne.n	80041e0 <HAL_TIM_IC_Start_IT+0x58>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	e013      	b.n	8004208 <HAL_TIM_IC_Start_IT+0x80>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d104      	bne.n	80041f0 <HAL_TIM_IC_Start_IT+0x68>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	e00b      	b.n	8004208 <HAL_TIM_IC_Start_IT+0x80>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d104      	bne.n	8004200 <HAL_TIM_IC_Start_IT+0x78>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	e003      	b.n	8004208 <HAL_TIM_IC_Start_IT+0x80>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004206:	b2db      	uxtb	r3, r3
 8004208:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800420a:	7bbb      	ldrb	r3, [r7, #14]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d102      	bne.n	8004216 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004210:	7b7b      	ldrb	r3, [r7, #13]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d001      	beq.n	800421a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e0c7      	b.n	80043aa <HAL_TIM_IC_Start_IT+0x222>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d104      	bne.n	800422a <HAL_TIM_IC_Start_IT+0xa2>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004228:	e013      	b.n	8004252 <HAL_TIM_IC_Start_IT+0xca>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b04      	cmp	r3, #4
 800422e:	d104      	bne.n	800423a <HAL_TIM_IC_Start_IT+0xb2>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004238:	e00b      	b.n	8004252 <HAL_TIM_IC_Start_IT+0xca>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b08      	cmp	r3, #8
 800423e:	d104      	bne.n	800424a <HAL_TIM_IC_Start_IT+0xc2>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004248:	e003      	b.n	8004252 <HAL_TIM_IC_Start_IT+0xca>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2202      	movs	r2, #2
 800424e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d104      	bne.n	8004262 <HAL_TIM_IC_Start_IT+0xda>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004260:	e013      	b.n	800428a <HAL_TIM_IC_Start_IT+0x102>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b04      	cmp	r3, #4
 8004266:	d104      	bne.n	8004272 <HAL_TIM_IC_Start_IT+0xea>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004270:	e00b      	b.n	800428a <HAL_TIM_IC_Start_IT+0x102>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b08      	cmp	r3, #8
 8004276:	d104      	bne.n	8004282 <HAL_TIM_IC_Start_IT+0xfa>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004280:	e003      	b.n	800428a <HAL_TIM_IC_Start_IT+0x102>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2202      	movs	r2, #2
 8004286:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b0c      	cmp	r3, #12
 800428e:	d841      	bhi.n	8004314 <HAL_TIM_IC_Start_IT+0x18c>
 8004290:	a201      	add	r2, pc, #4	@ (adr r2, 8004298 <HAL_TIM_IC_Start_IT+0x110>)
 8004292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004296:	bf00      	nop
 8004298:	080042cd 	.word	0x080042cd
 800429c:	08004315 	.word	0x08004315
 80042a0:	08004315 	.word	0x08004315
 80042a4:	08004315 	.word	0x08004315
 80042a8:	080042df 	.word	0x080042df
 80042ac:	08004315 	.word	0x08004315
 80042b0:	08004315 	.word	0x08004315
 80042b4:	08004315 	.word	0x08004315
 80042b8:	080042f1 	.word	0x080042f1
 80042bc:	08004315 	.word	0x08004315
 80042c0:	08004315 	.word	0x08004315
 80042c4:	08004315 	.word	0x08004315
 80042c8:	08004303 	.word	0x08004303
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0202 	orr.w	r2, r2, #2
 80042da:	60da      	str	r2, [r3, #12]
      break;
 80042dc:	e01d      	b.n	800431a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 0204 	orr.w	r2, r2, #4
 80042ec:	60da      	str	r2, [r3, #12]
      break;
 80042ee:	e014      	b.n	800431a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0208 	orr.w	r2, r2, #8
 80042fe:	60da      	str	r2, [r3, #12]
      break;
 8004300:	e00b      	b.n	800431a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0210 	orr.w	r2, r2, #16
 8004310:	60da      	str	r2, [r3, #12]
      break;
 8004312:	e002      	b.n	800431a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	73fb      	strb	r3, [r7, #15]
      break;
 8004318:	bf00      	nop
  }

  if (status == HAL_OK)
 800431a:	7bfb      	ldrb	r3, [r7, #15]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d143      	bne.n	80043a8 <HAL_TIM_IC_Start_IT+0x220>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2201      	movs	r2, #1
 8004326:	6839      	ldr	r1, [r7, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f000 fe33 	bl	8004f94 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004336:	d01d      	beq.n	8004374 <HAL_TIM_IC_Start_IT+0x1ec>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1d      	ldr	r2, [pc, #116]	@ (80043b4 <HAL_TIM_IC_Start_IT+0x22c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d018      	beq.n	8004374 <HAL_TIM_IC_Start_IT+0x1ec>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a1c      	ldr	r2, [pc, #112]	@ (80043b8 <HAL_TIM_IC_Start_IT+0x230>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d013      	beq.n	8004374 <HAL_TIM_IC_Start_IT+0x1ec>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a1a      	ldr	r2, [pc, #104]	@ (80043bc <HAL_TIM_IC_Start_IT+0x234>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d00e      	beq.n	8004374 <HAL_TIM_IC_Start_IT+0x1ec>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a19      	ldr	r2, [pc, #100]	@ (80043c0 <HAL_TIM_IC_Start_IT+0x238>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d009      	beq.n	8004374 <HAL_TIM_IC_Start_IT+0x1ec>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a17      	ldr	r2, [pc, #92]	@ (80043c4 <HAL_TIM_IC_Start_IT+0x23c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d004      	beq.n	8004374 <HAL_TIM_IC_Start_IT+0x1ec>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a16      	ldr	r2, [pc, #88]	@ (80043c8 <HAL_TIM_IC_Start_IT+0x240>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d111      	bne.n	8004398 <HAL_TIM_IC_Start_IT+0x210>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b06      	cmp	r3, #6
 8004384:	d010      	beq.n	80043a8 <HAL_TIM_IC_Start_IT+0x220>
      {
        __HAL_TIM_ENABLE(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f042 0201 	orr.w	r2, r2, #1
 8004394:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004396:	e007      	b.n	80043a8 <HAL_TIM_IC_Start_IT+0x220>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0201 	orr.w	r2, r2, #1
 80043a6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	40000400 	.word	0x40000400
 80043b8:	40000800 	.word	0x40000800
 80043bc:	40000c00 	.word	0x40000c00
 80043c0:	40001800 	.word	0x40001800
 80043c4:	40014000 	.word	0x40014000
 80043c8:	40015c00 	.word	0x40015c00

080043cc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_TIM_IC_ConfigChannel+0x1e>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e088      	b.n	80044fc <HAL_TIM_IC_ConfigChannel+0x130>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d11b      	bne.n	8004430 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004408:	f000 fc06 	bl	8004c18 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 020c 	bic.w	r2, r2, #12
 800441a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6999      	ldr	r1, [r3, #24]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	619a      	str	r2, [r3, #24]
 800442e:	e060      	b.n	80044f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b04      	cmp	r3, #4
 8004434:	d11c      	bne.n	8004470 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004446:	f000 fc84 	bl	8004d52 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	699a      	ldr	r2, [r3, #24]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004458:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6999      	ldr	r1, [r3, #24]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	021a      	lsls	r2, r3, #8
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	619a      	str	r2, [r3, #24]
 800446e:	e040      	b.n	80044f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b08      	cmp	r3, #8
 8004474:	d11b      	bne.n	80044ae <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004486:	f000 fcd1 	bl	8004e2c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69da      	ldr	r2, [r3, #28]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 020c 	bic.w	r2, r2, #12
 8004498:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	69d9      	ldr	r1, [r3, #28]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	61da      	str	r2, [r3, #28]
 80044ac:	e021      	b.n	80044f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b0c      	cmp	r3, #12
 80044b2:	d11c      	bne.n	80044ee <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80044c4:	f000 fcee 	bl	8004ea4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	69da      	ldr	r2, [r3, #28]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80044d6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	69d9      	ldr	r1, [r3, #28]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	021a      	lsls	r2, r3, #8
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	61da      	str	r2, [r3, #28]
 80044ec:	e001      	b.n	80044f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800451a:	2b01      	cmp	r3, #1
 800451c:	d101      	bne.n	8004522 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800451e:	2302      	movs	r3, #2
 8004520:	e0ae      	b.n	8004680 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b0c      	cmp	r3, #12
 800452e:	f200 809f 	bhi.w	8004670 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004532:	a201      	add	r2, pc, #4	@ (adr r2, 8004538 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004538:	0800456d 	.word	0x0800456d
 800453c:	08004671 	.word	0x08004671
 8004540:	08004671 	.word	0x08004671
 8004544:	08004671 	.word	0x08004671
 8004548:	080045ad 	.word	0x080045ad
 800454c:	08004671 	.word	0x08004671
 8004550:	08004671 	.word	0x08004671
 8004554:	08004671 	.word	0x08004671
 8004558:	080045ef 	.word	0x080045ef
 800455c:	08004671 	.word	0x08004671
 8004560:	08004671 	.word	0x08004671
 8004564:	08004671 	.word	0x08004671
 8004568:	0800462f 	.word	0x0800462f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68b9      	ldr	r1, [r7, #8]
 8004572:	4618      	mov	r0, r3
 8004574:	f000 f9f6 	bl	8004964 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699a      	ldr	r2, [r3, #24]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0208 	orr.w	r2, r2, #8
 8004586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699a      	ldr	r2, [r3, #24]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0204 	bic.w	r2, r2, #4
 8004596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6999      	ldr	r1, [r3, #24]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	691a      	ldr	r2, [r3, #16]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	619a      	str	r2, [r3, #24]
      break;
 80045aa:	e064      	b.n	8004676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68b9      	ldr	r1, [r7, #8]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 fa50 	bl	8004a58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699a      	ldr	r2, [r3, #24]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699a      	ldr	r2, [r3, #24]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6999      	ldr	r1, [r3, #24]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	021a      	lsls	r2, r3, #8
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	619a      	str	r2, [r3, #24]
      break;
 80045ec:	e043      	b.n	8004676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68b9      	ldr	r1, [r7, #8]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fa91 	bl	8004b1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69da      	ldr	r2, [r3, #28]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0208 	orr.w	r2, r2, #8
 8004608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69da      	ldr	r2, [r3, #28]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0204 	bic.w	r2, r2, #4
 8004618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69d9      	ldr	r1, [r3, #28]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	61da      	str	r2, [r3, #28]
      break;
 800462c:	e023      	b.n	8004676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	4618      	mov	r0, r3
 8004636:	f000 faaf 	bl	8004b98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69da      	ldr	r2, [r3, #28]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	69da      	ldr	r2, [r3, #28]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69d9      	ldr	r1, [r3, #28]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	021a      	lsls	r2, r3, #8
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	61da      	str	r2, [r3, #28]
      break;
 800466e:	e002      	b.n	8004676 <HAL_TIM_PWM_ConfigChannel+0x172>
      break;
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	75fb      	strb	r3, [r7, #23]
      break;
 8004674:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800467e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_TIM_ConfigClockSource+0x1c>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e0b4      	b.n	800480e <HAL_TIM_ConfigClockSource+0x186>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80046c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046dc:	d03e      	beq.n	800475c <HAL_TIM_ConfigClockSource+0xd4>
 80046de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046e2:	f200 8087 	bhi.w	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 80046e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ea:	f000 8086 	beq.w	80047fa <HAL_TIM_ConfigClockSource+0x172>
 80046ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046f2:	d87f      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 80046f4:	2b70      	cmp	r3, #112	@ 0x70
 80046f6:	d01a      	beq.n	800472e <HAL_TIM_ConfigClockSource+0xa6>
 80046f8:	2b70      	cmp	r3, #112	@ 0x70
 80046fa:	d87b      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 80046fc:	2b60      	cmp	r3, #96	@ 0x60
 80046fe:	d050      	beq.n	80047a2 <HAL_TIM_ConfigClockSource+0x11a>
 8004700:	2b60      	cmp	r3, #96	@ 0x60
 8004702:	d877      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004704:	2b50      	cmp	r3, #80	@ 0x50
 8004706:	d03c      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0xfa>
 8004708:	2b50      	cmp	r3, #80	@ 0x50
 800470a:	d873      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 800470c:	2b40      	cmp	r3, #64	@ 0x40
 800470e:	d058      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0x13a>
 8004710:	2b40      	cmp	r3, #64	@ 0x40
 8004712:	d86f      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004714:	2b30      	cmp	r3, #48	@ 0x30
 8004716:	d064      	beq.n	80047e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004718:	2b30      	cmp	r3, #48	@ 0x30
 800471a:	d86b      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 800471c:	2b20      	cmp	r3, #32
 800471e:	d060      	beq.n	80047e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004720:	2b20      	cmp	r3, #32
 8004722:	d867      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004724:	2b00      	cmp	r3, #0
 8004726:	d05c      	beq.n	80047e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004728:	2b10      	cmp	r3, #16
 800472a:	d05a      	beq.n	80047e2 <HAL_TIM_ConfigClockSource+0x15a>
 800472c:	e062      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800473e:	f000 fc09 	bl	8004f54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004750:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	609a      	str	r2, [r3, #8]
      break;
 800475a:	e04f      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800476c:	f000 fbf2 	bl	8004f54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800477e:	609a      	str	r2, [r3, #8]
      break;
 8004780:	e03c      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800478e:	461a      	mov	r2, r3
 8004790:	f000 fab0 	bl	8004cf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2150      	movs	r1, #80	@ 0x50
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fbbf 	bl	8004f1e <TIM_ITRx_SetConfig>
      break;
 80047a0:	e02c      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ae:	461a      	mov	r2, r3
 80047b0:	f000 fb0c 	bl	8004dcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2160      	movs	r1, #96	@ 0x60
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fbaf 	bl	8004f1e <TIM_ITRx_SetConfig>
      break;
 80047c0:	e01c      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ce:	461a      	mov	r2, r3
 80047d0:	f000 fa90 	bl	8004cf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2140      	movs	r1, #64	@ 0x40
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fb9f 	bl	8004f1e <TIM_ITRx_SetConfig>
      break;
 80047e0:	e00c      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4619      	mov	r1, r3
 80047ec:	4610      	mov	r0, r2
 80047ee:	f000 fb96 	bl	8004f1e <TIM_ITRx_SetConfig>
      break;
 80047f2:	e003      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	73fb      	strb	r3, [r7, #15]
      break;
 80047f8:	e000      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800480c:	7bfb      	ldrb	r3, [r7, #15]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800482e:	d00f      	beq.n	8004850 <TIM_Base_SetConfig+0x38>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a42      	ldr	r2, [pc, #264]	@ (800493c <TIM_Base_SetConfig+0x124>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d00b      	beq.n	8004850 <TIM_Base_SetConfig+0x38>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a41      	ldr	r2, [pc, #260]	@ (8004940 <TIM_Base_SetConfig+0x128>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d007      	beq.n	8004850 <TIM_Base_SetConfig+0x38>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a40      	ldr	r2, [pc, #256]	@ (8004944 <TIM_Base_SetConfig+0x12c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d003      	beq.n	8004850 <TIM_Base_SetConfig+0x38>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a3f      	ldr	r2, [pc, #252]	@ (8004948 <TIM_Base_SetConfig+0x130>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d108      	bne.n	8004862 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4313      	orrs	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004868:	d027      	beq.n	80048ba <TIM_Base_SetConfig+0xa2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a33      	ldr	r2, [pc, #204]	@ (800493c <TIM_Base_SetConfig+0x124>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d023      	beq.n	80048ba <TIM_Base_SetConfig+0xa2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a32      	ldr	r2, [pc, #200]	@ (8004940 <TIM_Base_SetConfig+0x128>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d01f      	beq.n	80048ba <TIM_Base_SetConfig+0xa2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a31      	ldr	r2, [pc, #196]	@ (8004944 <TIM_Base_SetConfig+0x12c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d01b      	beq.n	80048ba <TIM_Base_SetConfig+0xa2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a31      	ldr	r2, [pc, #196]	@ (800494c <TIM_Base_SetConfig+0x134>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d017      	beq.n	80048ba <TIM_Base_SetConfig+0xa2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a30      	ldr	r2, [pc, #192]	@ (8004950 <TIM_Base_SetConfig+0x138>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d013      	beq.n	80048ba <TIM_Base_SetConfig+0xa2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a2f      	ldr	r2, [pc, #188]	@ (8004954 <TIM_Base_SetConfig+0x13c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00f      	beq.n	80048ba <TIM_Base_SetConfig+0xa2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a2e      	ldr	r2, [pc, #184]	@ (8004958 <TIM_Base_SetConfig+0x140>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00b      	beq.n	80048ba <TIM_Base_SetConfig+0xa2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a2d      	ldr	r2, [pc, #180]	@ (800495c <TIM_Base_SetConfig+0x144>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d007      	beq.n	80048ba <TIM_Base_SetConfig+0xa2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a2c      	ldr	r2, [pc, #176]	@ (8004960 <TIM_Base_SetConfig+0x148>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d003      	beq.n	80048ba <TIM_Base_SetConfig+0xa2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a24      	ldr	r2, [pc, #144]	@ (8004948 <TIM_Base_SetConfig+0x130>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d108      	bne.n	80048cc <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a19      	ldr	r2, [pc, #100]	@ (8004958 <TIM_Base_SetConfig+0x140>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d007      	beq.n	8004908 <TIM_Base_SetConfig+0xf0>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a18      	ldr	r2, [pc, #96]	@ (800495c <TIM_Base_SetConfig+0x144>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d003      	beq.n	8004908 <TIM_Base_SetConfig+0xf0>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a17      	ldr	r2, [pc, #92]	@ (8004960 <TIM_Base_SetConfig+0x148>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d103      	bne.n	8004910 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b01      	cmp	r3, #1
 8004920:	d105      	bne.n	800492e <TIM_Base_SetConfig+0x116>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f023 0201 	bic.w	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	611a      	str	r2, [r3, #16]
  }
}
 800492e:	bf00      	nop
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	40000400 	.word	0x40000400
 8004940:	40000800 	.word	0x40000800
 8004944:	40000c00 	.word	0x40000c00
 8004948:	40015c00 	.word	0x40015c00
 800494c:	40001800 	.word	0x40001800
 8004950:	40001c00 	.word	0x40001c00
 8004954:	40002000 	.word	0x40002000
 8004958:	40014000 	.word	0x40014000
 800495c:	40014400 	.word	0x40014400
 8004960:	40014800 	.word	0x40014800

08004964 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	f023 0201 	bic.w	r2, r3, #1
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0303 	bic.w	r3, r3, #3
 800499a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f023 0302 	bic.w	r3, r3, #2
 80049ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a24      	ldr	r2, [pc, #144]	@ (8004a4c <TIM_OC1_SetConfig+0xe8>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d007      	beq.n	80049d0 <TIM_OC1_SetConfig+0x6c>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a23      	ldr	r2, [pc, #140]	@ (8004a50 <TIM_OC1_SetConfig+0xec>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d003      	beq.n	80049d0 <TIM_OC1_SetConfig+0x6c>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a22      	ldr	r2, [pc, #136]	@ (8004a54 <TIM_OC1_SetConfig+0xf0>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d10c      	bne.n	80049ea <TIM_OC1_SetConfig+0x86>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f023 0308 	bic.w	r3, r3, #8
 80049d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	4313      	orrs	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f023 0304 	bic.w	r3, r3, #4
 80049e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a17      	ldr	r2, [pc, #92]	@ (8004a4c <TIM_OC1_SetConfig+0xe8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d007      	beq.n	8004a02 <TIM_OC1_SetConfig+0x9e>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a16      	ldr	r2, [pc, #88]	@ (8004a50 <TIM_OC1_SetConfig+0xec>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d003      	beq.n	8004a02 <TIM_OC1_SetConfig+0x9e>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a15      	ldr	r2, [pc, #84]	@ (8004a54 <TIM_OC1_SetConfig+0xf0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d111      	bne.n	8004a26 <TIM_OC1_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	621a      	str	r2, [r3, #32]
}
 8004a40:	bf00      	nop
 8004a42:	371c      	adds	r7, #28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	40014000 	.word	0x40014000
 8004a50:	40014400 	.word	0x40014400
 8004a54:	40014800 	.word	0x40014800

08004a58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	f023 0210 	bic.w	r2, r3, #16
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f023 0320 	bic.w	r3, r3, #32
 8004aa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	011b      	lsls	r3, r3, #4
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a17      	ldr	r2, [pc, #92]	@ (8004b10 <TIM_OC2_SetConfig+0xb8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d007      	beq.n	8004ac8 <TIM_OC2_SetConfig+0x70>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a16      	ldr	r2, [pc, #88]	@ (8004b14 <TIM_OC2_SetConfig+0xbc>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d003      	beq.n	8004ac8 <TIM_OC2_SetConfig+0x70>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a15      	ldr	r2, [pc, #84]	@ (8004b18 <TIM_OC2_SetConfig+0xc0>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d10f      	bne.n	8004ae8 <TIM_OC2_SetConfig+0x90>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ace:	617b      	str	r3, [r7, #20]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	621a      	str	r2, [r3, #32]
}
 8004b02:	bf00      	nop
 8004b04:	371c      	adds	r7, #28
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	40014000 	.word	0x40014000
 8004b14:	40014400 	.word	0x40014400
 8004b18:	40014800 	.word	0x40014800

08004b1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f023 0303 	bic.w	r3, r3, #3
 8004b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	021b      	lsls	r3, r3, #8
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	621a      	str	r2, [r3, #32]
}
 8004b8c:	bf00      	nop
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	021b      	lsls	r3, r3, #8
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004be2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	031b      	lsls	r3, r3, #12
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	621a      	str	r2, [r3, #32]
}
 8004c0a:	bf00      	nop
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
	...

08004c18 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	f023 0201 	bic.w	r2, r3, #1
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c44:	d017      	beq.n	8004c76 <TIM_TI1_SetConfig+0x5e>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4a24      	ldr	r2, [pc, #144]	@ (8004cdc <TIM_TI1_SetConfig+0xc4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d013      	beq.n	8004c76 <TIM_TI1_SetConfig+0x5e>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	4a23      	ldr	r2, [pc, #140]	@ (8004ce0 <TIM_TI1_SetConfig+0xc8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d00f      	beq.n	8004c76 <TIM_TI1_SetConfig+0x5e>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4a22      	ldr	r2, [pc, #136]	@ (8004ce4 <TIM_TI1_SetConfig+0xcc>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d00b      	beq.n	8004c76 <TIM_TI1_SetConfig+0x5e>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4a21      	ldr	r2, [pc, #132]	@ (8004ce8 <TIM_TI1_SetConfig+0xd0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d007      	beq.n	8004c76 <TIM_TI1_SetConfig+0x5e>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4a20      	ldr	r2, [pc, #128]	@ (8004cec <TIM_TI1_SetConfig+0xd4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d003      	beq.n	8004c76 <TIM_TI1_SetConfig+0x5e>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4a1f      	ldr	r2, [pc, #124]	@ (8004cf0 <TIM_TI1_SetConfig+0xd8>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d101      	bne.n	8004c7a <TIM_TI1_SetConfig+0x62>
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <TIM_TI1_SetConfig+0x64>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d008      	beq.n	8004c92 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f023 0303 	bic.w	r3, r3, #3
 8004c86:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]
 8004c90:	e003      	b.n	8004c9a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f043 0301 	orr.w	r3, r3, #1
 8004c98:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f023 030a 	bic.w	r3, r3, #10
 8004cb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f003 030a 	and.w	r3, r3, #10
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	621a      	str	r2, [r3, #32]
}
 8004cce:	bf00      	nop
 8004cd0:	371c      	adds	r7, #28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	40000400 	.word	0x40000400
 8004ce0:	40000800 	.word	0x40000800
 8004ce4:	40000c00 	.word	0x40000c00
 8004ce8:	40001800 	.word	0x40001800
 8004cec:	40014000 	.word	0x40014000
 8004cf0:	40015c00 	.word	0x40015c00

08004cf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	f023 0201 	bic.w	r2, r3, #1
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f023 030a 	bic.w	r3, r3, #10
 8004d30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	621a      	str	r2, [r3, #32]
}
 8004d46:	bf00      	nop
 8004d48:	371c      	adds	r7, #28
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b087      	sub	sp, #28
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	60f8      	str	r0, [r7, #12]
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	607a      	str	r2, [r7, #4]
 8004d5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	f023 0210 	bic.w	r2, r3, #16
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	021b      	lsls	r3, r3, #8
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	031b      	lsls	r3, r3, #12
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004da4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	621a      	str	r2, [r3, #32]
}
 8004dc0:	bf00      	nop
 8004dc2:	371c      	adds	r7, #28
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	f023 0210 	bic.w	r2, r3, #16
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	031b      	lsls	r3, r3, #12
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e08:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	011b      	lsls	r3, r3, #4
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	621a      	str	r2, [r3, #32]
}
 8004e20:	bf00      	nop
 8004e22:	371c      	adds	r7, #28
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f023 0303 	bic.w	r3, r3, #3
 8004e58:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e68:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004e7c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	621a      	str	r2, [r3, #32]
}
 8004e98:	bf00      	nop
 8004e9a:	371c      	adds	r7, #28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ed0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	021b      	lsls	r3, r3, #8
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ee2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	031b      	lsls	r3, r3, #12
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004ef6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	031b      	lsls	r3, r3, #12
 8004efc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	621a      	str	r2, [r3, #32]
}
 8004f12:	bf00      	nop
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b085      	sub	sp, #20
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f043 0307 	orr.w	r3, r3, #7
 8004f40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	609a      	str	r2, [r3, #8]
}
 8004f48:	bf00      	nop
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
 8004f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	021a      	lsls	r2, r3, #8
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	431a      	orrs	r2, r3
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	609a      	str	r2, [r3, #8]
}
 8004f88:	bf00      	nop
 8004f8a:	371c      	adds	r7, #28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f003 031f 	and.w	r3, r3, #31
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a1a      	ldr	r2, [r3, #32]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	401a      	ands	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a1a      	ldr	r2, [r3, #32]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f003 031f 	and.w	r3, r3, #31
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	621a      	str	r2, [r3, #32]
}
 8004fd2:	bf00      	nop
 8004fd4:	371c      	adds	r7, #28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
	...

08004fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e055      	b.n	80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800501e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800503a:	d01d      	beq.n	8005078 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a1b      	ldr	r2, [pc, #108]	@ (80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d018      	beq.n	8005078 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a1a      	ldr	r2, [pc, #104]	@ (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d013      	beq.n	8005078 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a18      	ldr	r2, [pc, #96]	@ (80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00e      	beq.n	8005078 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a17      	ldr	r2, [pc, #92]	@ (80050bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d009      	beq.n	8005078 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a15      	ldr	r2, [pc, #84]	@ (80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d004      	beq.n	8005078 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a14      	ldr	r2, [pc, #80]	@ (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d10c      	bne.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800507e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	4313      	orrs	r3, r2
 8005088:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	40000400 	.word	0x40000400
 80050b4:	40000800 	.word	0x40000800
 80050b8:	40000c00 	.word	0x40000c00
 80050bc:	40001800 	.word	0x40001800
 80050c0:	40014000 	.word	0x40014000
 80050c4:	40015c00 	.word	0x40015c00

080050c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80050d0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80050d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80050dc:	b29a      	uxth	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	43db      	mvns	r3, r3
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	4013      	ands	r3, r2
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80050fe:	b480      	push	{r7}
 8005100:	b085      	sub	sp, #20
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	1d3b      	adds	r3, r7, #4
 8005108:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2201      	movs	r2, #1
 8005110:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <memset>:
 800513a:	4402      	add	r2, r0
 800513c:	4603      	mov	r3, r0
 800513e:	4293      	cmp	r3, r2
 8005140:	d100      	bne.n	8005144 <memset+0xa>
 8005142:	4770      	bx	lr
 8005144:	f803 1b01 	strb.w	r1, [r3], #1
 8005148:	e7f9      	b.n	800513e <memset+0x4>
	...

0800514c <__libc_init_array>:
 800514c:	b570      	push	{r4, r5, r6, lr}
 800514e:	4d0d      	ldr	r5, [pc, #52]	@ (8005184 <__libc_init_array+0x38>)
 8005150:	4c0d      	ldr	r4, [pc, #52]	@ (8005188 <__libc_init_array+0x3c>)
 8005152:	1b64      	subs	r4, r4, r5
 8005154:	10a4      	asrs	r4, r4, #2
 8005156:	2600      	movs	r6, #0
 8005158:	42a6      	cmp	r6, r4
 800515a:	d109      	bne.n	8005170 <__libc_init_array+0x24>
 800515c:	4d0b      	ldr	r5, [pc, #44]	@ (800518c <__libc_init_array+0x40>)
 800515e:	4c0c      	ldr	r4, [pc, #48]	@ (8005190 <__libc_init_array+0x44>)
 8005160:	f000 f818 	bl	8005194 <_init>
 8005164:	1b64      	subs	r4, r4, r5
 8005166:	10a4      	asrs	r4, r4, #2
 8005168:	2600      	movs	r6, #0
 800516a:	42a6      	cmp	r6, r4
 800516c:	d105      	bne.n	800517a <__libc_init_array+0x2e>
 800516e:	bd70      	pop	{r4, r5, r6, pc}
 8005170:	f855 3b04 	ldr.w	r3, [r5], #4
 8005174:	4798      	blx	r3
 8005176:	3601      	adds	r6, #1
 8005178:	e7ee      	b.n	8005158 <__libc_init_array+0xc>
 800517a:	f855 3b04 	ldr.w	r3, [r5], #4
 800517e:	4798      	blx	r3
 8005180:	3601      	adds	r6, #1
 8005182:	e7f2      	b.n	800516a <__libc_init_array+0x1e>
 8005184:	080051dc 	.word	0x080051dc
 8005188:	080051dc 	.word	0x080051dc
 800518c:	080051dc 	.word	0x080051dc
 8005190:	080051e4 	.word	0x080051e4

08005194 <_init>:
 8005194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005196:	bf00      	nop
 8005198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800519a:	bc08      	pop	{r3}
 800519c:	469e      	mov	lr, r3
 800519e:	4770      	bx	lr

080051a0 <_fini>:
 80051a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a2:	bf00      	nop
 80051a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a6:	bc08      	pop	{r3}
 80051a8:	469e      	mov	lr, r3
 80051aa:	4770      	bx	lr
